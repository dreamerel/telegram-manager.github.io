import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-ROME4SDB.js";

// node_modules/events/events.js
var require_events = __commonJS({
  "node_modules/events/events.js"(exports, module) {
    "use strict";
    var R = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;
    if (R && typeof R.ownKeys === "function") {
      ReflectOwnKeys = R.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn)
        console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
      return value !== value;
    };
    function EventEmitter() {
      EventEmitter.init.call(this);
    }
    module.exports = EventEmitter;
    module.exports.once = once;
    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = void 0;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
      }
    });
    EventEmitter.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
      }
      this._maxListeners = n;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter.prototype.emit = function emit(type) {
      var args = [];
      for (var i = 1; i < arguments.length; i++)
        args.push(arguments[i]);
      var doError = type === "error";
      var events = this._events;
      if (events !== void 0)
        doError = doError && events.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          throw er;
        }
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err;
      }
      var handler = events[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          ReflectApply(listeners[i], this, args);
      }
      return true;
    };
    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;
      checkListener(listener);
      events = target._events;
      if (events === void 0) {
        events = target._events = /* @__PURE__ */ Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events.newListener !== void 0) {
          target.emit(
            "newListener",
            type,
            listener.listener ? listener.listener : listener
          );
          events = target._events;
        }
        existing = events[type];
      }
      if (existing === void 0) {
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w.name = "MaxListenersExceededWarning";
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }
      return target;
    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: void 0, target, type, listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter.prototype.once = function once2(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.removeListener = function removeListener(type, listener) {
      var list, events, position, i, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === void 0)
        return this;
      list = events[type];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit("removeListener", type, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events[type] = list[0];
        if (events.removeListener !== void 0)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events, i;
      events = this._events;
      if (events === void 0)
        return this;
      if (events.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else
            delete events[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === "removeListener")
            continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }
      return this;
    };
    function _listeners(target, type, unwrap) {
      var events = target._events;
      if (events === void 0)
        return [];
      var evlistener = events[type];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;
      if (events !== void 0) {
        var evlistener = events[type];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }
    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }
    function once(emitter, name) {
      return new Promise(function(resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
      if (typeof emitter.on === "function") {
        if (flags.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name, function wrapListener(arg) {
          if (flags.once) {
            emitter.removeEventListener(name, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// node_modules/big-integer/BigInteger.js
var require_BigInteger = __commonJS({
  "node_modules/big-integer/BigInteger.js"(exports, module) {
    var bigInt = function(undefined2) {
      "use strict";
      var BASE = 1e7, LOG_BASE = 7, MAX_INT = 9007199254740992, MAX_INT_ARR = smallToArray(MAX_INT), DEFAULT_ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz";
      var supportsNativeBigInt = typeof BigInt === "function";
      function Integer(v, radix2, alphabet, caseSensitive) {
        if (typeof v === "undefined")
          return Integer[0];
        if (typeof radix2 !== "undefined")
          return +radix2 === 10 && !alphabet ? parseValue(v) : parseBase(v, radix2, alphabet, caseSensitive);
        return parseValue(v);
      }
      function BigInteger(value, sign) {
        this.value = value;
        this.sign = sign;
        this.isSmall = false;
      }
      BigInteger.prototype = Object.create(Integer.prototype);
      function SmallInteger(value) {
        this.value = value;
        this.sign = value < 0;
        this.isSmall = true;
      }
      SmallInteger.prototype = Object.create(Integer.prototype);
      function NativeBigInt(value) {
        this.value = value;
      }
      NativeBigInt.prototype = Object.create(Integer.prototype);
      function isPrecise(n) {
        return -MAX_INT < n && n < MAX_INT;
      }
      function smallToArray(n) {
        if (n < 1e7)
          return [n];
        if (n < 1e14)
          return [n % 1e7, Math.floor(n / 1e7)];
        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];
      }
      function arrayToSmall(arr) {
        trim2(arr);
        var length = arr.length;
        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {
          switch (length) {
            case 0:
              return 0;
            case 1:
              return arr[0];
            case 2:
              return arr[0] + arr[1] * BASE;
            default:
              return arr[0] + (arr[1] + arr[2] * BASE) * BASE;
          }
        }
        return arr;
      }
      function trim2(v) {
        var i2 = v.length;
        while (v[--i2] === 0)
          ;
        v.length = i2 + 1;
      }
      function createArray(length) {
        var x = new Array(length);
        var i2 = -1;
        while (++i2 < length) {
          x[i2] = 0;
        }
        return x;
      }
      function truncate(n) {
        if (n > 0)
          return Math.floor(n);
        return Math.ceil(n);
      }
      function add2(a, b) {
        var l_a = a.length, l_b = b.length, r = new Array(l_a), carry = 0, base = BASE, sum, i2;
        for (i2 = 0; i2 < l_b; i2++) {
          sum = a[i2] + b[i2] + carry;
          carry = sum >= base ? 1 : 0;
          r[i2] = sum - carry * base;
        }
        while (i2 < l_a) {
          sum = a[i2] + carry;
          carry = sum === base ? 1 : 0;
          r[i2++] = sum - carry * base;
        }
        if (carry > 0)
          r.push(carry);
        return r;
      }
      function addAny(a, b) {
        if (a.length >= b.length)
          return add2(a, b);
        return add2(b, a);
      }
      function addSmall(a, carry) {
        var l = a.length, r = new Array(l), base = BASE, sum, i2;
        for (i2 = 0; i2 < l; i2++) {
          sum = a[i2] - base + carry;
          carry = Math.floor(sum / base);
          r[i2] = sum - carry * base;
          carry += 1;
        }
        while (carry > 0) {
          r[i2++] = carry % base;
          carry = Math.floor(carry / base);
        }
        return r;
      }
      BigInteger.prototype.add = function(v) {
        var n = parseValue(v);
        if (this.sign !== n.sign) {
          return this.subtract(n.negate());
        }
        var a = this.value, b = n.value;
        if (n.isSmall) {
          return new BigInteger(addSmall(a, Math.abs(b)), this.sign);
        }
        return new BigInteger(addAny(a, b), this.sign);
      };
      BigInteger.prototype.plus = BigInteger.prototype.add;
      SmallInteger.prototype.add = function(v) {
        var n = parseValue(v);
        var a = this.value;
        if (a < 0 !== n.sign) {
          return this.subtract(n.negate());
        }
        var b = n.value;
        if (n.isSmall) {
          if (isPrecise(a + b))
            return new SmallInteger(a + b);
          b = smallToArray(Math.abs(b));
        }
        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);
      };
      SmallInteger.prototype.plus = SmallInteger.prototype.add;
      NativeBigInt.prototype.add = function(v) {
        return new NativeBigInt(this.value + parseValue(v).value);
      };
      NativeBigInt.prototype.plus = NativeBigInt.prototype.add;
      function subtract(a, b) {
        var a_l = a.length, b_l = b.length, r = new Array(a_l), borrow = 0, base = BASE, i2, difference;
        for (i2 = 0; i2 < b_l; i2++) {
          difference = a[i2] - borrow - b[i2];
          if (difference < 0) {
            difference += base;
            borrow = 1;
          } else
            borrow = 0;
          r[i2] = difference;
        }
        for (i2 = b_l; i2 < a_l; i2++) {
          difference = a[i2] - borrow;
          if (difference < 0)
            difference += base;
          else {
            r[i2++] = difference;
            break;
          }
          r[i2] = difference;
        }
        for (; i2 < a_l; i2++) {
          r[i2] = a[i2];
        }
        trim2(r);
        return r;
      }
      function subtractAny(a, b, sign) {
        var value;
        if (compareAbs(a, b) >= 0) {
          value = subtract(a, b);
        } else {
          value = subtract(b, a);
          sign = !sign;
        }
        value = arrayToSmall(value);
        if (typeof value === "number") {
          if (sign)
            value = -value;
          return new SmallInteger(value);
        }
        return new BigInteger(value, sign);
      }
      function subtractSmall(a, b, sign) {
        var l = a.length, r = new Array(l), carry = -b, base = BASE, i2, difference;
        for (i2 = 0; i2 < l; i2++) {
          difference = a[i2] + carry;
          carry = Math.floor(difference / base);
          difference %= base;
          r[i2] = difference < 0 ? difference + base : difference;
        }
        r = arrayToSmall(r);
        if (typeof r === "number") {
          if (sign)
            r = -r;
          return new SmallInteger(r);
        }
        return new BigInteger(r, sign);
      }
      BigInteger.prototype.subtract = function(v) {
        var n = parseValue(v);
        if (this.sign !== n.sign) {
          return this.add(n.negate());
        }
        var a = this.value, b = n.value;
        if (n.isSmall)
          return subtractSmall(a, Math.abs(b), this.sign);
        return subtractAny(a, b, this.sign);
      };
      BigInteger.prototype.minus = BigInteger.prototype.subtract;
      SmallInteger.prototype.subtract = function(v) {
        var n = parseValue(v);
        var a = this.value;
        if (a < 0 !== n.sign) {
          return this.add(n.negate());
        }
        var b = n.value;
        if (n.isSmall) {
          return new SmallInteger(a - b);
        }
        return subtractSmall(b, Math.abs(a), a >= 0);
      };
      SmallInteger.prototype.minus = SmallInteger.prototype.subtract;
      NativeBigInt.prototype.subtract = function(v) {
        return new NativeBigInt(this.value - parseValue(v).value);
      };
      NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;
      BigInteger.prototype.negate = function() {
        return new BigInteger(this.value, !this.sign);
      };
      SmallInteger.prototype.negate = function() {
        var sign = this.sign;
        var small = new SmallInteger(-this.value);
        small.sign = !sign;
        return small;
      };
      NativeBigInt.prototype.negate = function() {
        return new NativeBigInt(-this.value);
      };
      BigInteger.prototype.abs = function() {
        return new BigInteger(this.value, false);
      };
      SmallInteger.prototype.abs = function() {
        return new SmallInteger(Math.abs(this.value));
      };
      NativeBigInt.prototype.abs = function() {
        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);
      };
      function multiplyLong(a, b) {
        var a_l = a.length, b_l = b.length, l = a_l + b_l, r = createArray(l), base = BASE, product, carry, i2, a_i, b_j;
        for (i2 = 0; i2 < a_l; ++i2) {
          a_i = a[i2];
          for (var j = 0; j < b_l; ++j) {
            b_j = b[j];
            product = a_i * b_j + r[i2 + j];
            carry = Math.floor(product / base);
            r[i2 + j] = product - carry * base;
            r[i2 + j + 1] += carry;
          }
        }
        trim2(r);
        return r;
      }
      function multiplySmall(a, b) {
        var l = a.length, r = new Array(l), base = BASE, carry = 0, product, i2;
        for (i2 = 0; i2 < l; i2++) {
          product = a[i2] * b + carry;
          carry = Math.floor(product / base);
          r[i2] = product - carry * base;
        }
        while (carry > 0) {
          r[i2++] = carry % base;
          carry = Math.floor(carry / base);
        }
        return r;
      }
      function shiftLeft(x, n) {
        var r = [];
        while (n-- > 0)
          r.push(0);
        return r.concat(x);
      }
      function multiplyKaratsuba(x, y) {
        var n = Math.max(x.length, y.length);
        if (n <= 30)
          return multiplyLong(x, y);
        n = Math.ceil(n / 2);
        var b = x.slice(n), a = x.slice(0, n), d = y.slice(n), c = y.slice(0, n);
        var ac = multiplyKaratsuba(a, c), bd = multiplyKaratsuba(b, d), abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));
        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));
        trim2(product);
        return product;
      }
      function useKaratsuba(l1, l2) {
        return -0.012 * l1 - 0.012 * l2 + 15e-6 * l1 * l2 > 0;
      }
      BigInteger.prototype.multiply = function(v) {
        var n = parseValue(v), a = this.value, b = n.value, sign = this.sign !== n.sign, abs;
        if (n.isSmall) {
          if (b === 0)
            return Integer[0];
          if (b === 1)
            return this;
          if (b === -1)
            return this.negate();
          abs = Math.abs(b);
          if (abs < BASE) {
            return new BigInteger(multiplySmall(a, abs), sign);
          }
          b = smallToArray(abs);
        }
        if (useKaratsuba(a.length, b.length))
          return new BigInteger(multiplyKaratsuba(a, b), sign);
        return new BigInteger(multiplyLong(a, b), sign);
      };
      BigInteger.prototype.times = BigInteger.prototype.multiply;
      function multiplySmallAndArray(a, b, sign) {
        if (a < BASE) {
          return new BigInteger(multiplySmall(b, a), sign);
        }
        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);
      }
      SmallInteger.prototype._multiplyBySmall = function(a) {
        if (isPrecise(a.value * this.value)) {
          return new SmallInteger(a.value * this.value);
        }
        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);
      };
      BigInteger.prototype._multiplyBySmall = function(a) {
        if (a.value === 0)
          return Integer[0];
        if (a.value === 1)
          return this;
        if (a.value === -1)
          return this.negate();
        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);
      };
      SmallInteger.prototype.multiply = function(v) {
        return parseValue(v)._multiplyBySmall(this);
      };
      SmallInteger.prototype.times = SmallInteger.prototype.multiply;
      NativeBigInt.prototype.multiply = function(v) {
        return new NativeBigInt(this.value * parseValue(v).value);
      };
      NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;
      function square(a) {
        var l = a.length, r = createArray(l + l), base = BASE, product, carry, i2, a_i, a_j;
        for (i2 = 0; i2 < l; i2++) {
          a_i = a[i2];
          carry = 0 - a_i * a_i;
          for (var j = i2; j < l; j++) {
            a_j = a[j];
            product = 2 * (a_i * a_j) + r[i2 + j] + carry;
            carry = Math.floor(product / base);
            r[i2 + j] = product - carry * base;
          }
          r[i2 + l] = carry;
        }
        trim2(r);
        return r;
      }
      BigInteger.prototype.square = function() {
        return new BigInteger(square(this.value), false);
      };
      SmallInteger.prototype.square = function() {
        var value = this.value * this.value;
        if (isPrecise(value))
          return new SmallInteger(value);
        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);
      };
      NativeBigInt.prototype.square = function(v) {
        return new NativeBigInt(this.value * this.value);
      };
      function divMod1(a, b) {
        var a_l = a.length, b_l = b.length, base = BASE, result = createArray(b.length), divisorMostSignificantDigit = b[b_l - 1], lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)), remainder = multiplySmall(a, lambda), divisor = multiplySmall(b, lambda), quotientDigit, shift, carry, borrow, i2, l, q;
        if (remainder.length <= a_l)
          remainder.push(0);
        divisor.push(0);
        divisorMostSignificantDigit = divisor[b_l - 1];
        for (shift = a_l - b_l; shift >= 0; shift--) {
          quotientDigit = base - 1;
          if (remainder[shift + b_l] !== divisorMostSignificantDigit) {
            quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);
          }
          carry = 0;
          borrow = 0;
          l = divisor.length;
          for (i2 = 0; i2 < l; i2++) {
            carry += quotientDigit * divisor[i2];
            q = Math.floor(carry / base);
            borrow += remainder[shift + i2] - (carry - q * base);
            carry = q;
            if (borrow < 0) {
              remainder[shift + i2] = borrow + base;
              borrow = -1;
            } else {
              remainder[shift + i2] = borrow;
              borrow = 0;
            }
          }
          while (borrow !== 0) {
            quotientDigit -= 1;
            carry = 0;
            for (i2 = 0; i2 < l; i2++) {
              carry += remainder[shift + i2] - base + divisor[i2];
              if (carry < 0) {
                remainder[shift + i2] = carry + base;
                carry = 0;
              } else {
                remainder[shift + i2] = carry;
                carry = 1;
              }
            }
            borrow += carry;
          }
          result[shift] = quotientDigit;
        }
        remainder = divModSmall(remainder, lambda)[0];
        return [arrayToSmall(result), arrayToSmall(remainder)];
      }
      function divMod2(a, b) {
        var a_l = a.length, b_l = b.length, result = [], part = [], base = BASE, guess, xlen, highx, highy, check;
        while (a_l) {
          part.unshift(a[--a_l]);
          trim2(part);
          if (compareAbs(part, b) < 0) {
            result.push(0);
            continue;
          }
          xlen = part.length;
          highx = part[xlen - 1] * base + part[xlen - 2];
          highy = b[b_l - 1] * base + b[b_l - 2];
          if (xlen > b_l) {
            highx = (highx + 1) * base;
          }
          guess = Math.ceil(highx / highy);
          do {
            check = multiplySmall(b, guess);
            if (compareAbs(check, part) <= 0)
              break;
            guess--;
          } while (guess);
          result.push(guess);
          part = subtract(part, check);
        }
        result.reverse();
        return [arrayToSmall(result), arrayToSmall(part)];
      }
      function divModSmall(value, lambda) {
        var length = value.length, quotient = createArray(length), base = BASE, i2, q, remainder, divisor;
        remainder = 0;
        for (i2 = length - 1; i2 >= 0; --i2) {
          divisor = remainder * base + value[i2];
          q = truncate(divisor / lambda);
          remainder = divisor - q * lambda;
          quotient[i2] = q | 0;
        }
        return [quotient, remainder | 0];
      }
      function divModAny(self2, v) {
        var value, n = parseValue(v);
        if (supportsNativeBigInt) {
          return [new NativeBigInt(self2.value / n.value), new NativeBigInt(self2.value % n.value)];
        }
        var a = self2.value, b = n.value;
        var quotient;
        if (b === 0)
          throw new Error("Cannot divide by zero");
        if (self2.isSmall) {
          if (n.isSmall) {
            return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];
          }
          return [Integer[0], self2];
        }
        if (n.isSmall) {
          if (b === 1)
            return [self2, Integer[0]];
          if (b == -1)
            return [self2.negate(), Integer[0]];
          var abs = Math.abs(b);
          if (abs < BASE) {
            value = divModSmall(a, abs);
            quotient = arrayToSmall(value[0]);
            var remainder = value[1];
            if (self2.sign)
              remainder = -remainder;
            if (typeof quotient === "number") {
              if (self2.sign !== n.sign)
                quotient = -quotient;
              return [new SmallInteger(quotient), new SmallInteger(remainder)];
            }
            return [new BigInteger(quotient, self2.sign !== n.sign), new SmallInteger(remainder)];
          }
          b = smallToArray(abs);
        }
        var comparison = compareAbs(a, b);
        if (comparison === -1)
          return [Integer[0], self2];
        if (comparison === 0)
          return [Integer[self2.sign === n.sign ? 1 : -1], Integer[0]];
        if (a.length + b.length <= 200)
          value = divMod1(a, b);
        else
          value = divMod2(a, b);
        quotient = value[0];
        var qSign = self2.sign !== n.sign, mod2 = value[1], mSign = self2.sign;
        if (typeof quotient === "number") {
          if (qSign)
            quotient = -quotient;
          quotient = new SmallInteger(quotient);
        } else
          quotient = new BigInteger(quotient, qSign);
        if (typeof mod2 === "number") {
          if (mSign)
            mod2 = -mod2;
          mod2 = new SmallInteger(mod2);
        } else
          mod2 = new BigInteger(mod2, mSign);
        return [quotient, mod2];
      }
      BigInteger.prototype.divmod = function(v) {
        var result = divModAny(this, v);
        return {
          quotient: result[0],
          remainder: result[1]
        };
      };
      NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;
      BigInteger.prototype.divide = function(v) {
        return divModAny(this, v)[0];
      };
      NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function(v) {
        return new NativeBigInt(this.value / parseValue(v).value);
      };
      SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;
      BigInteger.prototype.mod = function(v) {
        return divModAny(this, v)[1];
      };
      NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function(v) {
        return new NativeBigInt(this.value % parseValue(v).value);
      };
      SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;
      BigInteger.prototype.pow = function(v) {
        var n = parseValue(v), a = this.value, b = n.value, value, x, y;
        if (b === 0)
          return Integer[1];
        if (a === 0)
          return Integer[0];
        if (a === 1)
          return Integer[1];
        if (a === -1)
          return n.isEven() ? Integer[1] : Integer[-1];
        if (n.sign) {
          return Integer[0];
        }
        if (!n.isSmall)
          throw new Error("The exponent " + n.toString() + " is too large.");
        if (this.isSmall) {
          if (isPrecise(value = Math.pow(a, b)))
            return new SmallInteger(truncate(value));
        }
        x = this;
        y = Integer[1];
        while (true) {
          if (b & true) {
            y = y.times(x);
            --b;
          }
          if (b === 0)
            break;
          b /= 2;
          x = x.square();
        }
        return y;
      };
      SmallInteger.prototype.pow = BigInteger.prototype.pow;
      NativeBigInt.prototype.pow = function(v) {
        var n = parseValue(v);
        var a = this.value, b = n.value;
        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);
        if (b === _0)
          return Integer[1];
        if (a === _0)
          return Integer[0];
        if (a === _1)
          return Integer[1];
        if (a === BigInt(-1))
          return n.isEven() ? Integer[1] : Integer[-1];
        if (n.isNegative())
          return new NativeBigInt(_0);
        var x = this;
        var y = Integer[1];
        while (true) {
          if ((b & _1) === _1) {
            y = y.times(x);
            --b;
          }
          if (b === _0)
            break;
          b /= _2;
          x = x.square();
        }
        return y;
      };
      BigInteger.prototype.modPow = function(exp, mod2) {
        exp = parseValue(exp);
        mod2 = parseValue(mod2);
        if (mod2.isZero())
          throw new Error("Cannot take modPow with modulus 0");
        var r = Integer[1], base = this.mod(mod2);
        if (exp.isNegative()) {
          exp = exp.multiply(Integer[-1]);
          base = base.modInv(mod2);
        }
        while (exp.isPositive()) {
          if (base.isZero())
            return Integer[0];
          if (exp.isOdd())
            r = r.multiply(base).mod(mod2);
          exp = exp.divide(2);
          base = base.square().mod(mod2);
        }
        return r;
      };
      NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;
      function compareAbs(a, b) {
        if (a.length !== b.length) {
          return a.length > b.length ? 1 : -1;
        }
        for (var i2 = a.length - 1; i2 >= 0; i2--) {
          if (a[i2] !== b[i2])
            return a[i2] > b[i2] ? 1 : -1;
        }
        return 0;
      }
      BigInteger.prototype.compareAbs = function(v) {
        var n = parseValue(v), a = this.value, b = n.value;
        if (n.isSmall)
          return 1;
        return compareAbs(a, b);
      };
      SmallInteger.prototype.compareAbs = function(v) {
        var n = parseValue(v), a = Math.abs(this.value), b = n.value;
        if (n.isSmall) {
          b = Math.abs(b);
          return a === b ? 0 : a > b ? 1 : -1;
        }
        return -1;
      };
      NativeBigInt.prototype.compareAbs = function(v) {
        var a = this.value;
        var b = parseValue(v).value;
        a = a >= 0 ? a : -a;
        b = b >= 0 ? b : -b;
        return a === b ? 0 : a > b ? 1 : -1;
      };
      BigInteger.prototype.compare = function(v) {
        if (v === Infinity) {
          return -1;
        }
        if (v === -Infinity) {
          return 1;
        }
        var n = parseValue(v), a = this.value, b = n.value;
        if (this.sign !== n.sign) {
          return n.sign ? 1 : -1;
        }
        if (n.isSmall) {
          return this.sign ? -1 : 1;
        }
        return compareAbs(a, b) * (this.sign ? -1 : 1);
      };
      BigInteger.prototype.compareTo = BigInteger.prototype.compare;
      SmallInteger.prototype.compare = function(v) {
        if (v === Infinity) {
          return -1;
        }
        if (v === -Infinity) {
          return 1;
        }
        var n = parseValue(v), a = this.value, b = n.value;
        if (n.isSmall) {
          return a == b ? 0 : a > b ? 1 : -1;
        }
        if (a < 0 !== n.sign) {
          return a < 0 ? -1 : 1;
        }
        return a < 0 ? 1 : -1;
      };
      SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;
      NativeBigInt.prototype.compare = function(v) {
        if (v === Infinity) {
          return -1;
        }
        if (v === -Infinity) {
          return 1;
        }
        var a = this.value;
        var b = parseValue(v).value;
        return a === b ? 0 : a > b ? 1 : -1;
      };
      NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;
      BigInteger.prototype.equals = function(v) {
        return this.compare(v) === 0;
      };
      NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;
      BigInteger.prototype.notEquals = function(v) {
        return this.compare(v) !== 0;
      };
      NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;
      BigInteger.prototype.greater = function(v) {
        return this.compare(v) > 0;
      };
      NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;
      BigInteger.prototype.lesser = function(v) {
        return this.compare(v) < 0;
      };
      NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;
      BigInteger.prototype.greaterOrEquals = function(v) {
        return this.compare(v) >= 0;
      };
      NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;
      BigInteger.prototype.lesserOrEquals = function(v) {
        return this.compare(v) <= 0;
      };
      NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;
      BigInteger.prototype.isEven = function() {
        return (this.value[0] & 1) === 0;
      };
      SmallInteger.prototype.isEven = function() {
        return (this.value & 1) === 0;
      };
      NativeBigInt.prototype.isEven = function() {
        return (this.value & BigInt(1)) === BigInt(0);
      };
      BigInteger.prototype.isOdd = function() {
        return (this.value[0] & 1) === 1;
      };
      SmallInteger.prototype.isOdd = function() {
        return (this.value & 1) === 1;
      };
      NativeBigInt.prototype.isOdd = function() {
        return (this.value & BigInt(1)) === BigInt(1);
      };
      BigInteger.prototype.isPositive = function() {
        return !this.sign;
      };
      SmallInteger.prototype.isPositive = function() {
        return this.value > 0;
      };
      NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;
      BigInteger.prototype.isNegative = function() {
        return this.sign;
      };
      SmallInteger.prototype.isNegative = function() {
        return this.value < 0;
      };
      NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;
      BigInteger.prototype.isUnit = function() {
        return false;
      };
      SmallInteger.prototype.isUnit = function() {
        return Math.abs(this.value) === 1;
      };
      NativeBigInt.prototype.isUnit = function() {
        return this.abs().value === BigInt(1);
      };
      BigInteger.prototype.isZero = function() {
        return false;
      };
      SmallInteger.prototype.isZero = function() {
        return this.value === 0;
      };
      NativeBigInt.prototype.isZero = function() {
        return this.value === BigInt(0);
      };
      BigInteger.prototype.isDivisibleBy = function(v) {
        var n = parseValue(v);
        if (n.isZero())
          return false;
        if (n.isUnit())
          return true;
        if (n.compareAbs(2) === 0)
          return this.isEven();
        return this.mod(n).isZero();
      };
      NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;
      function isBasicPrime(v) {
        var n = v.abs();
        if (n.isUnit())
          return false;
        if (n.equals(2) || n.equals(3) || n.equals(5))
          return true;
        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5))
          return false;
        if (n.lesser(49))
          return true;
      }
      function millerRabinTest(n, a) {
        var nPrev = n.prev(), b = nPrev, r = 0, d, t2, i2, x;
        while (b.isEven())
          b = b.divide(2), r++;
        next:
          for (i2 = 0; i2 < a.length; i2++) {
            if (n.lesser(a[i2]))
              continue;
            x = bigInt(a[i2]).modPow(b, n);
            if (x.isUnit() || x.equals(nPrev))
              continue;
            for (d = r - 1; d != 0; d--) {
              x = x.square().mod(n);
              if (x.isUnit())
                return false;
              if (x.equals(nPrev))
                continue next;
            }
            return false;
          }
        return true;
      }
      BigInteger.prototype.isPrime = function(strict) {
        var isPrime = isBasicPrime(this);
        if (isPrime !== undefined2)
          return isPrime;
        var n = this.abs();
        var bits = n.bitLength();
        if (bits <= 64)
          return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);
        var logN = Math.log(2) * bits.toJSNumber();
        var t2 = Math.ceil(strict === true ? 2 * Math.pow(logN, 2) : logN);
        for (var a = [], i2 = 0; i2 < t2; i2++) {
          a.push(bigInt(i2 + 2));
        }
        return millerRabinTest(n, a);
      };
      NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;
      BigInteger.prototype.isProbablePrime = function(iterations, rng) {
        var isPrime = isBasicPrime(this);
        if (isPrime !== undefined2)
          return isPrime;
        var n = this.abs();
        var t2 = iterations === undefined2 ? 5 : iterations;
        for (var a = [], i2 = 0; i2 < t2; i2++) {
          a.push(bigInt.randBetween(2, n.minus(2), rng));
        }
        return millerRabinTest(n, a);
      };
      NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;
      BigInteger.prototype.modInv = function(n) {
        var t2 = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;
        while (!newR.isZero()) {
          q = r.divide(newR);
          lastT = t2;
          lastR = r;
          t2 = newT;
          r = newR;
          newT = lastT.subtract(q.multiply(newT));
          newR = lastR.subtract(q.multiply(newR));
        }
        if (!r.isUnit())
          throw new Error(this.toString() + " and " + n.toString() + " are not co-prime");
        if (t2.compare(0) === -1) {
          t2 = t2.add(n);
        }
        if (this.isNegative()) {
          return t2.negate();
        }
        return t2;
      };
      NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;
      BigInteger.prototype.next = function() {
        var value = this.value;
        if (this.sign) {
          return subtractSmall(value, 1, this.sign);
        }
        return new BigInteger(addSmall(value, 1), this.sign);
      };
      SmallInteger.prototype.next = function() {
        var value = this.value;
        if (value + 1 < MAX_INT)
          return new SmallInteger(value + 1);
        return new BigInteger(MAX_INT_ARR, false);
      };
      NativeBigInt.prototype.next = function() {
        return new NativeBigInt(this.value + BigInt(1));
      };
      BigInteger.prototype.prev = function() {
        var value = this.value;
        if (this.sign) {
          return new BigInteger(addSmall(value, 1), true);
        }
        return subtractSmall(value, 1, this.sign);
      };
      SmallInteger.prototype.prev = function() {
        var value = this.value;
        if (value - 1 > -MAX_INT)
          return new SmallInteger(value - 1);
        return new BigInteger(MAX_INT_ARR, true);
      };
      NativeBigInt.prototype.prev = function() {
        return new NativeBigInt(this.value - BigInt(1));
      };
      var powersOfTwo = [1];
      while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE)
        powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);
      var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];
      function shift_isSmall(n) {
        return Math.abs(n) <= BASE;
      }
      BigInteger.prototype.shiftLeft = function(v) {
        var n = parseValue(v).toJSNumber();
        if (!shift_isSmall(n)) {
          throw new Error(String(n) + " is too large for shifting.");
        }
        if (n < 0)
          return this.shiftRight(-n);
        var result = this;
        if (result.isZero())
          return result;
        while (n >= powers2Length) {
          result = result.multiply(highestPower2);
          n -= powers2Length - 1;
        }
        return result.multiply(powersOfTwo[n]);
      };
      NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;
      BigInteger.prototype.shiftRight = function(v) {
        var remQuo;
        var n = parseValue(v).toJSNumber();
        if (!shift_isSmall(n)) {
          throw new Error(String(n) + " is too large for shifting.");
        }
        if (n < 0)
          return this.shiftLeft(-n);
        var result = this;
        while (n >= powers2Length) {
          if (result.isZero() || result.isNegative() && result.isUnit())
            return result;
          remQuo = divModAny(result, highestPower2);
          result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
          n -= powers2Length - 1;
        }
        remQuo = divModAny(result, powersOfTwo[n]);
        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
      };
      NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;
      function bitwise(x, y, fn) {
        y = parseValue(y);
        var xSign = x.isNegative(), ySign = y.isNegative();
        var xRem = xSign ? x.not() : x, yRem = ySign ? y.not() : y;
        var xDigit = 0, yDigit = 0;
        var xDivMod = null, yDivMod = null;
        var result = [];
        while (!xRem.isZero() || !yRem.isZero()) {
          xDivMod = divModAny(xRem, highestPower2);
          xDigit = xDivMod[1].toJSNumber();
          if (xSign) {
            xDigit = highestPower2 - 1 - xDigit;
          }
          yDivMod = divModAny(yRem, highestPower2);
          yDigit = yDivMod[1].toJSNumber();
          if (ySign) {
            yDigit = highestPower2 - 1 - yDigit;
          }
          xRem = xDivMod[0];
          yRem = yDivMod[0];
          result.push(fn(xDigit, yDigit));
        }
        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);
        for (var i2 = result.length - 1; i2 >= 0; i2 -= 1) {
          sum = sum.multiply(highestPower2).add(bigInt(result[i2]));
        }
        return sum;
      }
      BigInteger.prototype.not = function() {
        return this.negate().prev();
      };
      NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;
      BigInteger.prototype.and = function(n) {
        return bitwise(this, n, function(a, b) {
          return a & b;
        });
      };
      NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;
      BigInteger.prototype.or = function(n) {
        return bitwise(this, n, function(a, b) {
          return a | b;
        });
      };
      NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;
      BigInteger.prototype.xor = function(n) {
        return bitwise(this, n, function(a, b) {
          return a ^ b;
        });
      };
      NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;
      var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;
      function roughLOB(n) {
        var v = n.value, x = typeof v === "number" ? v | LOBMASK_I : typeof v === "bigint" ? v | BigInt(LOBMASK_I) : v[0] + v[1] * BASE | LOBMASK_BI;
        return x & -x;
      }
      function integerLogarithm(value, base) {
        if (base.compareTo(value) <= 0) {
          var tmp = integerLogarithm(value, base.square(base));
          var p = tmp.p;
          var e = tmp.e;
          var t2 = p.multiply(base);
          return t2.compareTo(value) <= 0 ? { p: t2, e: e * 2 + 1 } : { p, e: e * 2 };
        }
        return { p: bigInt(1), e: 0 };
      }
      BigInteger.prototype.bitLength = function() {
        var n = this;
        if (n.compareTo(bigInt(0)) < 0) {
          n = n.negate().subtract(bigInt(1));
        }
        if (n.compareTo(bigInt(0)) === 0) {
          return bigInt(0);
        }
        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));
      };
      NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;
      function max(a, b) {
        a = parseValue(a);
        b = parseValue(b);
        return a.greater(b) ? a : b;
      }
      function min(a, b) {
        a = parseValue(a);
        b = parseValue(b);
        return a.lesser(b) ? a : b;
      }
      function gcd(a, b) {
        a = parseValue(a).abs();
        b = parseValue(b).abs();
        if (a.equals(b))
          return a;
        if (a.isZero())
          return b;
        if (b.isZero())
          return a;
        var c = Integer[1], d, t2;
        while (a.isEven() && b.isEven()) {
          d = min(roughLOB(a), roughLOB(b));
          a = a.divide(d);
          b = b.divide(d);
          c = c.multiply(d);
        }
        while (a.isEven()) {
          a = a.divide(roughLOB(a));
        }
        do {
          while (b.isEven()) {
            b = b.divide(roughLOB(b));
          }
          if (a.greater(b)) {
            t2 = b;
            b = a;
            a = t2;
          }
          b = b.subtract(a);
        } while (!b.isZero());
        return c.isUnit() ? a : a.multiply(c);
      }
      function lcm(a, b) {
        a = parseValue(a).abs();
        b = parseValue(b).abs();
        return a.divide(gcd(a, b)).multiply(b);
      }
      function randBetween(a, b, rng) {
        a = parseValue(a);
        b = parseValue(b);
        var usedRNG = rng || Math.random;
        var low = min(a, b), high = max(a, b);
        var range = high.subtract(low).add(1);
        if (range.isSmall)
          return low.add(Math.floor(usedRNG() * range));
        var digits = toBase(range, BASE).value;
        var result = [], restricted = true;
        for (var i2 = 0; i2 < digits.length; i2++) {
          var top = restricted ? digits[i2] + (i2 + 1 < digits.length ? digits[i2 + 1] / BASE : 0) : BASE;
          var digit = truncate(usedRNG() * top);
          result.push(digit);
          if (digit < digits[i2])
            restricted = false;
        }
        return low.add(Integer.fromArray(result, BASE, false));
      }
      var parseBase = function(text, base, alphabet, caseSensitive) {
        alphabet = alphabet || DEFAULT_ALPHABET;
        text = String(text);
        if (!caseSensitive) {
          text = text.toLowerCase();
          alphabet = alphabet.toLowerCase();
        }
        var length = text.length;
        var i2;
        var absBase = Math.abs(base);
        var alphabetValues = {};
        for (i2 = 0; i2 < alphabet.length; i2++) {
          alphabetValues[alphabet[i2]] = i2;
        }
        for (i2 = 0; i2 < length; i2++) {
          var c = text[i2];
          if (c === "-")
            continue;
          if (c in alphabetValues) {
            if (alphabetValues[c] >= absBase) {
              if (c === "1" && absBase === 1)
                continue;
              throw new Error(c + " is not a valid digit in base " + base + ".");
            }
          }
        }
        base = parseValue(base);
        var digits = [];
        var isNegative = text[0] === "-";
        for (i2 = isNegative ? 1 : 0; i2 < text.length; i2++) {
          var c = text[i2];
          if (c in alphabetValues)
            digits.push(parseValue(alphabetValues[c]));
          else if (c === "<") {
            var start = i2;
            do {
              i2++;
            } while (text[i2] !== ">" && i2 < text.length);
            digits.push(parseValue(text.slice(start + 1, i2)));
          } else
            throw new Error(c + " is not a valid character");
        }
        return parseBaseFromArray(digits, base, isNegative);
      };
      function parseBaseFromArray(digits, base, isNegative) {
        var val = Integer[0], pow = Integer[1], i2;
        for (i2 = digits.length - 1; i2 >= 0; i2--) {
          val = val.add(digits[i2].times(pow));
          pow = pow.times(base);
        }
        return isNegative ? val.negate() : val;
      }
      function stringify(digit, alphabet) {
        alphabet = alphabet || DEFAULT_ALPHABET;
        if (digit < alphabet.length) {
          return alphabet[digit];
        }
        return "<" + digit + ">";
      }
      function toBase(n, base) {
        base = bigInt(base);
        if (base.isZero()) {
          if (n.isZero())
            return { value: [0], isNegative: false };
          throw new Error("Cannot convert nonzero numbers to base 0.");
        }
        if (base.equals(-1)) {
          if (n.isZero())
            return { value: [0], isNegative: false };
          if (n.isNegative())
            return {
              value: [].concat.apply(
                [],
                Array.apply(null, Array(-n.toJSNumber())).map(Array.prototype.valueOf, [1, 0])
              ),
              isNegative: false
            };
          var arr = Array.apply(null, Array(n.toJSNumber() - 1)).map(Array.prototype.valueOf, [0, 1]);
          arr.unshift([1]);
          return {
            value: [].concat.apply([], arr),
            isNegative: false
          };
        }
        var neg = false;
        if (n.isNegative() && base.isPositive()) {
          neg = true;
          n = n.abs();
        }
        if (base.isUnit()) {
          if (n.isZero())
            return { value: [0], isNegative: false };
          return {
            value: Array.apply(null, Array(n.toJSNumber())).map(Number.prototype.valueOf, 1),
            isNegative: neg
          };
        }
        var out = [];
        var left = n, divmod;
        while (left.isNegative() || left.compareAbs(base) >= 0) {
          divmod = left.divmod(base);
          left = divmod.quotient;
          var digit = divmod.remainder;
          if (digit.isNegative()) {
            digit = base.minus(digit).abs();
            left = left.next();
          }
          out.push(digit.toJSNumber());
        }
        out.push(left.toJSNumber());
        return { value: out.reverse(), isNegative: neg };
      }
      function toBaseString(n, base, alphabet) {
        var arr = toBase(n, base);
        return (arr.isNegative ? "-" : "") + arr.value.map(function(x) {
          return stringify(x, alphabet);
        }).join("");
      }
      BigInteger.prototype.toArray = function(radix2) {
        return toBase(this, radix2);
      };
      SmallInteger.prototype.toArray = function(radix2) {
        return toBase(this, radix2);
      };
      NativeBigInt.prototype.toArray = function(radix2) {
        return toBase(this, radix2);
      };
      BigInteger.prototype.toString = function(radix2, alphabet) {
        if (radix2 === undefined2)
          radix2 = 10;
        if (radix2 !== 10)
          return toBaseString(this, radix2, alphabet);
        var v = this.value, l = v.length, str = String(v[--l]), zeros = "0000000", digit;
        while (--l >= 0) {
          digit = String(v[l]);
          str += zeros.slice(digit.length) + digit;
        }
        var sign = this.sign ? "-" : "";
        return sign + str;
      };
      SmallInteger.prototype.toString = function(radix2, alphabet) {
        if (radix2 === undefined2)
          radix2 = 10;
        if (radix2 != 10)
          return toBaseString(this, radix2, alphabet);
        return String(this.value);
      };
      NativeBigInt.prototype.toString = SmallInteger.prototype.toString;
      NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function() {
        return this.toString();
      };
      BigInteger.prototype.valueOf = function() {
        return parseInt(this.toString(), 10);
      };
      BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;
      SmallInteger.prototype.valueOf = function() {
        return this.value;
      };
      SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;
      NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function() {
        return parseInt(this.toString(), 10);
      };
      function parseStringValue(v) {
        if (isPrecise(+v)) {
          var x = +v;
          if (x === truncate(x))
            return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);
          throw new Error("Invalid integer: " + v);
        }
        var sign = v[0] === "-";
        if (sign)
          v = v.slice(1);
        var split = v.split(/e/i);
        if (split.length > 2)
          throw new Error("Invalid integer: " + split.join("e"));
        if (split.length === 2) {
          var exp = split[1];
          if (exp[0] === "+")
            exp = exp.slice(1);
          exp = +exp;
          if (exp !== truncate(exp) || !isPrecise(exp))
            throw new Error("Invalid integer: " + exp + " is not a valid exponent.");
          var text = split[0];
          var decimalPlace = text.indexOf(".");
          if (decimalPlace >= 0) {
            exp -= text.length - decimalPlace - 1;
            text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);
          }
          if (exp < 0)
            throw new Error("Cannot include negative exponent part for integers");
          text += new Array(exp + 1).join("0");
          v = text;
        }
        var isValid = /^([0-9][0-9]*)$/.test(v);
        if (!isValid)
          throw new Error("Invalid integer: " + v);
        if (supportsNativeBigInt) {
          return new NativeBigInt(BigInt(sign ? "-" + v : v));
        }
        var r = [], max2 = v.length, l = LOG_BASE, min2 = max2 - l;
        while (max2 > 0) {
          r.push(+v.slice(min2, max2));
          min2 -= l;
          if (min2 < 0)
            min2 = 0;
          max2 -= l;
        }
        trim2(r);
        return new BigInteger(r, sign);
      }
      function parseNumberValue(v) {
        if (supportsNativeBigInt) {
          return new NativeBigInt(BigInt(v));
        }
        if (isPrecise(v)) {
          if (v !== truncate(v))
            throw new Error(v + " is not an integer.");
          return new SmallInteger(v);
        }
        return parseStringValue(v.toString());
      }
      function parseValue(v) {
        if (typeof v === "number") {
          return parseNumberValue(v);
        }
        if (typeof v === "string") {
          return parseStringValue(v);
        }
        if (typeof v === "bigint") {
          return new NativeBigInt(v);
        }
        return v;
      }
      for (var i = 0; i < 1e3; i++) {
        Integer[i] = parseValue(i);
        if (i > 0)
          Integer[-i] = parseValue(-i);
      }
      Integer.one = Integer[1];
      Integer.zero = Integer[0];
      Integer.minusOne = Integer[-1];
      Integer.max = max;
      Integer.min = min;
      Integer.gcd = gcd;
      Integer.lcm = lcm;
      Integer.isInstance = function(x) {
        return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt;
      };
      Integer.randBetween = randBetween;
      Integer.fromArray = function(digits, base, isNegative) {
        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);
      };
      return Integer;
    }();
    if (typeof module !== "undefined" && module.hasOwnProperty("exports")) {
      module.exports = bigInt;
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return bigInt;
      });
    }
  }
});

// node_modules/lodash.debounce/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.debounce/index.js"(exports, module) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var now = function() {
      return root.Date.now();
    };
    function debounce(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = debounce;
  }
});

// node_modules/aes-js/index.js
var require_aes_js = __commonJS({
  "node_modules/aes-js/index.js"(exports, module) {
    (function(root) {
      "use strict";
      function checkInt(value) {
        return parseInt(value) === value;
      }
      function checkInts(arrayish) {
        if (!checkInt(arrayish.length)) {
          return false;
        }
        for (var i = 0; i < arrayish.length; i++) {
          if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
            return false;
          }
        }
        return true;
      }
      function coerceArray(arg, copy) {
        if (arg.buffer && arg.name === "Uint8Array") {
          if (copy) {
            if (arg.slice) {
              arg = arg.slice();
            } else {
              arg = Array.prototype.slice.call(arg);
            }
          }
          return arg;
        }
        if (Array.isArray(arg)) {
          if (!checkInts(arg)) {
            throw new Error("Array contains invalid value: " + arg);
          }
          return new Uint8Array(arg);
        }
        if (checkInt(arg.length) && checkInts(arg)) {
          return new Uint8Array(arg);
        }
        throw new Error("unsupported array-like object");
      }
      function createArray(length) {
        return new Uint8Array(length);
      }
      function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
        if (sourceStart != null || sourceEnd != null) {
          if (sourceArray.slice) {
            sourceArray = sourceArray.slice(sourceStart, sourceEnd);
          } else {
            sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
          }
        }
        targetArray.set(sourceArray, targetStart);
      }
      var convertUtf8 = function() {
        function toBytes(text) {
          var result = [], i = 0;
          text = encodeURI(text);
          while (i < text.length) {
            var c = text.charCodeAt(i++);
            if (c === 37) {
              result.push(parseInt(text.substr(i, 2), 16));
              i += 2;
            } else {
              result.push(c);
            }
          }
          return coerceArray(result);
        }
        function fromBytes(bytes) {
          var result = [], i = 0;
          while (i < bytes.length) {
            var c = bytes[i];
            if (c < 128) {
              result.push(String.fromCharCode(c));
              i++;
            } else if (c > 191 && c < 224) {
              result.push(String.fromCharCode((c & 31) << 6 | bytes[i + 1] & 63));
              i += 2;
            } else {
              result.push(String.fromCharCode((c & 15) << 12 | (bytes[i + 1] & 63) << 6 | bytes[i + 2] & 63));
              i += 3;
            }
          }
          return result.join("");
        }
        return {
          toBytes,
          fromBytes
        };
      }();
      var convertHex = function() {
        function toBytes(text) {
          var result = [];
          for (var i = 0; i < text.length; i += 2) {
            result.push(parseInt(text.substr(i, 2), 16));
          }
          return result;
        }
        var Hex = "0123456789abcdef";
        function fromBytes(bytes) {
          var result = [];
          for (var i = 0; i < bytes.length; i++) {
            var v = bytes[i];
            result.push(Hex[(v & 240) >> 4] + Hex[v & 15]);
          }
          return result.join("");
        }
        return {
          toBytes,
          fromBytes
        };
      }();
      var numberOfRounds = { 16: 10, 24: 12, 32: 14 };
      var rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
      var S = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
      var Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
      var T1 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
      var T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
      var T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
      var T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
      var T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
      var T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
      var T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
      var T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
      var U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
      var U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
      var U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
      var U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
      function convertToInt32(bytes) {
        var result = [];
        for (var i = 0; i < bytes.length; i += 4) {
          result.push(
            bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]
          );
        }
        return result;
      }
      var AES = function(key) {
        if (!(this instanceof AES)) {
          throw Error("AES must be instanitated with `new`");
        }
        Object.defineProperty(this, "key", {
          value: coerceArray(key, true)
        });
        this._prepare();
      };
      AES.prototype._prepare = function() {
        var rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
          throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
        }
        this._Ke = [];
        this._Kd = [];
        for (var i = 0; i <= rounds; i++) {
          this._Ke.push([0, 0, 0, 0]);
          this._Kd.push([0, 0, 0, 0]);
        }
        var roundKeyCount = (rounds + 1) * 4;
        var KC = this.key.length / 4;
        var tk = convertToInt32(this.key);
        var index;
        for (var i = 0; i < KC; i++) {
          index = i >> 2;
          this._Ke[index][i % 4] = tk[i];
          this._Kd[rounds - index][i % 4] = tk[i];
        }
        var rconpointer = 0;
        var t2 = KC, tt;
        while (t2 < roundKeyCount) {
          tt = tk[KC - 1];
          tk[0] ^= S[tt >> 16 & 255] << 24 ^ S[tt >> 8 & 255] << 16 ^ S[tt & 255] << 8 ^ S[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
          rconpointer += 1;
          if (KC != 8) {
            for (var i = 1; i < KC; i++) {
              tk[i] ^= tk[i - 1];
            }
          } else {
            for (var i = 1; i < KC / 2; i++) {
              tk[i] ^= tk[i - 1];
            }
            tt = tk[KC / 2 - 1];
            tk[KC / 2] ^= S[tt & 255] ^ S[tt >> 8 & 255] << 8 ^ S[tt >> 16 & 255] << 16 ^ S[tt >> 24 & 255] << 24;
            for (var i = KC / 2 + 1; i < KC; i++) {
              tk[i] ^= tk[i - 1];
            }
          }
          var i = 0, r, c;
          while (i < KC && t2 < roundKeyCount) {
            r = t2 >> 2;
            c = t2 % 4;
            this._Ke[r][c] = tk[i];
            this._Kd[rounds - r][c] = tk[i++];
            t2++;
          }
        }
        for (var r = 1; r < rounds; r++) {
          for (var c = 0; c < 4; c++) {
            tt = this._Kd[r][c];
            this._Kd[r][c] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
          }
        }
      };
      AES.prototype.encrypt = function(plaintext) {
        if (plaintext.length != 16) {
          throw new Error("invalid plaintext size (must be 16 bytes)");
        }
        var rounds = this._Ke.length - 1;
        var a = [0, 0, 0, 0];
        var t2 = convertToInt32(plaintext);
        for (var i = 0; i < 4; i++) {
          t2[i] ^= this._Ke[0][i];
        }
        for (var r = 1; r < rounds; r++) {
          for (var i = 0; i < 4; i++) {
            a[i] = T1[t2[i] >> 24 & 255] ^ T2[t2[(i + 1) % 4] >> 16 & 255] ^ T3[t2[(i + 2) % 4] >> 8 & 255] ^ T4[t2[(i + 3) % 4] & 255] ^ this._Ke[r][i];
          }
          t2 = a.slice();
        }
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
          tt = this._Ke[rounds][i];
          result[4 * i] = (S[t2[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (S[t2[(i + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (S[t2[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (S[t2[(i + 3) % 4] & 255] ^ tt) & 255;
        }
        return result;
      };
      AES.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length != 16) {
          throw new Error("invalid ciphertext size (must be 16 bytes)");
        }
        var rounds = this._Kd.length - 1;
        var a = [0, 0, 0, 0];
        var t2 = convertToInt32(ciphertext);
        for (var i = 0; i < 4; i++) {
          t2[i] ^= this._Kd[0][i];
        }
        for (var r = 1; r < rounds; r++) {
          for (var i = 0; i < 4; i++) {
            a[i] = T5[t2[i] >> 24 & 255] ^ T6[t2[(i + 3) % 4] >> 16 & 255] ^ T7[t2[(i + 2) % 4] >> 8 & 255] ^ T8[t2[(i + 1) % 4] & 255] ^ this._Kd[r][i];
          }
          t2 = a.slice();
        }
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
          tt = this._Kd[rounds][i];
          result[4 * i] = (Si[t2[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (Si[t2[(i + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (Si[t2[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (Si[t2[(i + 1) % 4] & 255] ^ tt) & 255;
        }
        return result;
      };
      var ModeOfOperationECB = function(key) {
        if (!(this instanceof ModeOfOperationECB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Electronic Code Block";
        this.name = "ecb";
        this._aes = new AES(key);
      };
      ModeOfOperationECB.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) {
          throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        }
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for (var i = 0; i < plaintext.length; i += 16) {
          copyArray(plaintext, block, 0, i, i + 16);
          block = this._aes.encrypt(block);
          copyArray(block, ciphertext, i);
        }
        return ciphertext;
      };
      ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) {
          throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for (var i = 0; i < ciphertext.length; i += 16) {
          copyArray(ciphertext, block, 0, i, i + 16);
          block = this._aes.decrypt(block);
          copyArray(block, plaintext, i);
        }
        return plaintext;
      };
      var ModeOfOperationCBC = function(key, iv) {
        if (!(this instanceof ModeOfOperationCBC)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Cipher Block Chaining";
        this.name = "cbc";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 bytes)");
        }
        this._lastCipherblock = coerceArray(iv, true);
        this._aes = new AES(key);
      };
      ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) {
          throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        }
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for (var i = 0; i < plaintext.length; i += 16) {
          copyArray(plaintext, block, 0, i, i + 16);
          for (var j = 0; j < 16; j++) {
            block[j] ^= this._lastCipherblock[j];
          }
          this._lastCipherblock = this._aes.encrypt(block);
          copyArray(this._lastCipherblock, ciphertext, i);
        }
        return ciphertext;
      };
      ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) {
          throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for (var i = 0; i < ciphertext.length; i += 16) {
          copyArray(ciphertext, block, 0, i, i + 16);
          block = this._aes.decrypt(block);
          for (var j = 0; j < 16; j++) {
            plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
          }
          copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
        }
        return plaintext;
      };
      var ModeOfOperationCFB = function(key, iv, segmentSize) {
        if (!(this instanceof ModeOfOperationCFB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Cipher Feedback";
        this.name = "cfb";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 size)");
        }
        if (!segmentSize) {
          segmentSize = 1;
        }
        this.segmentSize = segmentSize;
        this._shiftRegister = coerceArray(iv, true);
        this._aes = new AES(key);
      };
      ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
        if (plaintext.length % this.segmentSize != 0) {
          throw new Error("invalid plaintext size (must be segmentSize bytes)");
        }
        var encrypted = coerceArray(plaintext, true);
        var xorSegment;
        for (var i = 0; i < encrypted.length; i += this.segmentSize) {
          xorSegment = this._aes.encrypt(this._shiftRegister);
          for (var j = 0; j < this.segmentSize; j++) {
            encrypted[i + j] ^= xorSegment[j];
          }
          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
          copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }
        return encrypted;
      };
      ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length % this.segmentSize != 0) {
          throw new Error("invalid ciphertext size (must be segmentSize bytes)");
        }
        var plaintext = coerceArray(ciphertext, true);
        var xorSegment;
        for (var i = 0; i < plaintext.length; i += this.segmentSize) {
          xorSegment = this._aes.encrypt(this._shiftRegister);
          for (var j = 0; j < this.segmentSize; j++) {
            plaintext[i + j] ^= xorSegment[j];
          }
          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
          copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }
        return plaintext;
      };
      var ModeOfOperationOFB = function(key, iv) {
        if (!(this instanceof ModeOfOperationOFB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Output Feedback";
        this.name = "ofb";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 bytes)");
        }
        this._lastPrecipher = coerceArray(iv, true);
        this._lastPrecipherIndex = 16;
        this._aes = new AES(key);
      };
      ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for (var i = 0; i < encrypted.length; i++) {
          if (this._lastPrecipherIndex === 16) {
            this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
            this._lastPrecipherIndex = 0;
          }
          encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
        }
        return encrypted;
      };
      ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;
      var Counter = function(initialValue) {
        if (!(this instanceof Counter)) {
          throw Error("Counter must be instanitated with `new`");
        }
        if (initialValue !== 0 && !initialValue) {
          initialValue = 1;
        }
        if (typeof initialValue === "number") {
          this._counter = createArray(16);
          this.setValue(initialValue);
        } else {
          this.setBytes(initialValue);
        }
      };
      Counter.prototype.setValue = function(value) {
        if (typeof value !== "number" || parseInt(value) != value) {
          throw new Error("invalid counter value (must be an integer)");
        }
        if (value > Number.MAX_SAFE_INTEGER) {
          throw new Error("integer value out of safe range");
        }
        for (var index = 15; index >= 0; --index) {
          this._counter[index] = value % 256;
          value = parseInt(value / 256);
        }
      };
      Counter.prototype.setBytes = function(bytes) {
        bytes = coerceArray(bytes, true);
        if (bytes.length != 16) {
          throw new Error("invalid counter bytes size (must be 16 bytes)");
        }
        this._counter = bytes;
      };
      Counter.prototype.increment = function() {
        for (var i = 15; i >= 0; i--) {
          if (this._counter[i] === 255) {
            this._counter[i] = 0;
          } else {
            this._counter[i]++;
            break;
          }
        }
      };
      var ModeOfOperationCTR = function(key, counter) {
        if (!(this instanceof ModeOfOperationCTR)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Counter";
        this.name = "ctr";
        if (!(counter instanceof Counter)) {
          counter = new Counter(counter);
        }
        this._counter = counter;
        this._remainingCounter = null;
        this._remainingCounterIndex = 16;
        this._aes = new AES(key);
      };
      ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for (var i = 0; i < encrypted.length; i++) {
          if (this._remainingCounterIndex === 16) {
            this._remainingCounter = this._aes.encrypt(this._counter._counter);
            this._remainingCounterIndex = 0;
            this._counter.increment();
          }
          encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
        }
        return encrypted;
      };
      ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;
      function pkcs7pad(data) {
        data = coerceArray(data, true);
        var padder = 16 - data.length % 16;
        var result = createArray(data.length + padder);
        copyArray(data, result);
        for (var i = data.length; i < result.length; i++) {
          result[i] = padder;
        }
        return result;
      }
      function pkcs7strip(data) {
        data = coerceArray(data, true);
        if (data.length < 16) {
          throw new Error("PKCS#7 invalid length");
        }
        var padder = data[data.length - 1];
        if (padder > 16) {
          throw new Error("PKCS#7 padding byte out of range");
        }
        var length = data.length - padder;
        for (var i = 0; i < padder; i++) {
          if (data[length + i] !== padder) {
            throw new Error("PKCS#7 invalid padding byte");
          }
        }
        var result = createArray(length);
        copyArray(data, result, 0, 0, length);
        return result;
      }
      var aesjs = {
        AES,
        Counter,
        ModeOfOperation: {
          ecb: ModeOfOperationECB,
          cbc: ModeOfOperationCBC,
          cfb: ModeOfOperationCFB,
          ofb: ModeOfOperationOFB,
          ctr: ModeOfOperationCTR
        },
        utils: {
          hex: convertHex,
          utf8: convertUtf8
        },
        padding: {
          pkcs7: {
            pad: pkcs7pad,
            strip: pkcs7strip
          }
        },
        _arrayTest: {
          coerceArray,
          createArray,
          copyArray
        }
      };
      if (typeof exports !== "undefined") {
        module.exports = aesjs;
      } else if (typeof define === "function" && define.amd) {
        define([], function() {
          return aesjs;
        });
      } else {
        if (root.aesjs) {
          aesjs._aesjs = root.aesjs;
        }
        root.aesjs = aesjs;
      }
    })(exports);
  }
});

// node_modules/@mtproto/core/src/utils/common/index.js
var require_common = __commonJS({
  "node_modules/@mtproto/core/src/utils/common/index.js"(exports, module) {
    var bigInt = require_BigInteger();
    function bytesIsEqual(bytes1, bytes2) {
      if (bytes1.length !== bytes2.length) {
        return false;
      }
      for (let i = 0; i < bytes1.length; i++) {
        if (bytes1[i] !== bytes2[i]) {
          return false;
        }
      }
      return true;
    }
    function bigIntToBytes(bigInt2, length) {
      return hexToBytes(bigInt2.toString(16), length);
    }
    function hexToBytesRaw(value, length) {
      if (!length) {
        length = Math.ceil(value.length / 2);
      }
      while (value.length < length * 2) {
        value = "0" + value;
      }
      const bytes = [];
      for (let i = 0; i < length; i++) {
        bytes.push(parseInt(value.slice(i * 2, i * 2 + 2), 16));
      }
      return bytes;
    }
    function hexToBytes(value, length) {
      return new Uint8Array(hexToBytesRaw(value, length));
    }
    function bytesToBigInt(bytes) {
      return bigInt(bytesToHex(bytes), 16);
    }
    function xorBytes(bytes1, bytes2) {
      let bytes = new Uint8Array(bytes1.length);
      for (let i = 0; i < bytes1.length; i++) {
        bytes[i] = bytes1[i] ^ bytes2[i];
      }
      return bytes;
    }
    function concatBytes(...arrays) {
      let length = 0;
      for (let bytes of arrays) {
        length += bytes.length;
      }
      let result = new Uint8Array(length);
      let offset = 0;
      for (let bytes of arrays) {
        result.set(bytes, offset);
        offset += bytes.length;
      }
      return result;
    }
    function bytesToHex(bytes) {
      const result = [];
      for (let i = 0; i < bytes.length; i++) {
        result.push((bytes[i] < 16 ? "0" : "") + bytes[i].toString(16));
      }
      return result.join("");
    }
    function bytesToBytesRaw(bytes) {
      const result = [];
      for (let i = 0; i < bytes.length; i++) {
        result.push(bytes[i]);
      }
      return result;
    }
    function longToBytesRaw(value) {
      const result = hexToBytesRaw(bigInt(value).toString(16), 8).reverse();
      return result;
    }
    function intsToLong(low, high) {
      return bigInt(low).shiftLeft(32).add(bigInt(high)).toString(10);
    }
    function getRandomInt(maxValue) {
      return Math.floor(Math.random() * maxValue);
    }
    var sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
    module.exports = {
      bytesIsEqual,
      bigIntToBytes,
      hexToBytesRaw,
      hexToBytes,
      bytesToBigInt,
      xorBytes,
      concatBytes,
      bytesToHex,
      bytesToBytesRaw,
      longToBytesRaw,
      intsToLong,
      getRandomInt,
      sleep
    };
  }
});

// node_modules/@mtproto/core/src/crypto/aes/index.js
var require_aes = __commonJS({
  "node_modules/@mtproto/core/src/crypto/aes/index.js"(exports, module) {
    var aesjs = require_aes_js();
    var { xorBytes } = require_common();
    var AES = aesjs.AES;
    AES.Counter = aesjs.Counter;
    AES.CTR = aesjs.ModeOfOperation.ctr;
    var createArray = aesjs._arrayTest.createArray;
    var copyArray = aesjs._arrayTest.copyArray;
    var ModeOfOperationIGE = class {
      constructor(key, iv) {
        this.description = "Infinite Garble Extension";
        this.name = "ige";
        this._aes = new AES(key);
        this._iv = iv;
        this._ivp = null;
      }
      encrypt(plaintext) {
        if (plaintext.length % 16 !== 0) {
          throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        }
        const ciphertext = createArray(plaintext.length);
        let block = createArray(16);
        if (this._ivp === null) {
          this._ivp = this._iv.slice(0, 16);
          this._iv2p = this._iv.slice(16, 32);
        }
        for (let i = 0; i < plaintext.length; i += 16) {
          const nextIv2p = plaintext.slice(i, i + 16);
          copyArray(plaintext, block, 0, i, i + 16);
          block = xorBytes(block, this._ivp);
          block = this._aes.encrypt(block);
          block = xorBytes(block, this._iv2p);
          copyArray(block, ciphertext, i);
          this._ivp = ciphertext.slice(i, i + 16);
          this._iv2p = nextIv2p;
        }
        return ciphertext;
      }
      decrypt(ciphertext) {
        if (ciphertext.length % 16 !== 0) {
          throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        const plaintext = createArray(ciphertext.length);
        let block = createArray(16);
        if (this._ivp === null) {
          this._ivp = this._iv.slice(0, 16);
          this._iv2p = this._iv.slice(16, 32);
        }
        for (let i = 0; i < ciphertext.length; i += 16) {
          const nextIvp = ciphertext.slice(i, i + 16);
          copyArray(ciphertext, block, 0, i, i + 16);
          block = xorBytes(block, this._iv2p);
          block = this._aes.decrypt(block);
          block = xorBytes(block, this._ivp);
          copyArray(block, plaintext, i);
          this._ivp = nextIvp;
          this._iv2p = plaintext.slice(i, i + 16);
        }
        return plaintext;
      }
    };
    AES.IGE = ModeOfOperationIGE;
    module.exports = AES;
  }
});

// node_modules/@mtproto/core/src/tl/builder/index.js
var require_builder = __commonJS({
  "node_modules/@mtproto/core/src/tl/builder/index.js"(exports, module) {
    var builderMap = {
      "mt_vector": function(params) {
        this.int32(481674261);
      },
      "mt_resPQ": function(params) {
        this.int32(85337187);
        this.int128(params.nonce);
        this.int128(params.server_nonce);
        this.bytes(params.pq);
        this.vector(this.long, params.server_public_key_fingerprints);
      },
      "mt_p_q_inner_data": function(params) {
        this.int32(-2083955988);
        this.bytes(params.pq);
        this.bytes(params.p);
        this.bytes(params.q);
        this.int128(params.nonce);
        this.int128(params.server_nonce);
        this.int256(params.new_nonce);
      },
      "mt_p_q_inner_data_dc": function(params) {
        this.int32(-1443537003);
        this.bytes(params.pq);
        this.bytes(params.p);
        this.bytes(params.q);
        this.int128(params.nonce);
        this.int128(params.server_nonce);
        this.int256(params.new_nonce);
        this.int(params.dc);
      },
      "mt_p_q_inner_data_temp": function(params) {
        this.int32(1013613780);
        this.bytes(params.pq);
        this.bytes(params.p);
        this.bytes(params.q);
        this.int128(params.nonce);
        this.int128(params.server_nonce);
        this.int256(params.new_nonce);
        this.int(params.expires_in);
      },
      "mt_p_q_inner_data_temp_dc": function(params) {
        this.int32(1459478408);
        this.bytes(params.pq);
        this.bytes(params.p);
        this.bytes(params.q);
        this.int128(params.nonce);
        this.int128(params.server_nonce);
        this.int256(params.new_nonce);
        this.int(params.dc);
        this.int(params.expires_in);
      },
      "mt_server_DH_params_fail": function(params) {
        this.int32(2043348061);
        this.int128(params.nonce);
        this.int128(params.server_nonce);
        this.int128(params.new_nonce_hash);
      },
      "mt_server_DH_params_ok": function(params) {
        this.int32(-790100132);
        this.int128(params.nonce);
        this.int128(params.server_nonce);
        this.bytes(params.encrypted_answer);
      },
      "mt_server_DH_inner_data": function(params) {
        this.int32(-1249309254);
        this.int128(params.nonce);
        this.int128(params.server_nonce);
        this.int(params.g);
        this.bytes(params.dh_prime);
        this.bytes(params.g_a);
        this.int(params.server_time);
      },
      "mt_client_DH_inner_data": function(params) {
        this.int32(1715713620);
        this.int128(params.nonce);
        this.int128(params.server_nonce);
        this.long(params.retry_id);
        this.bytes(params.g_b);
      },
      "mt_dh_gen_ok": function(params) {
        this.int32(1003222836);
        this.int128(params.nonce);
        this.int128(params.server_nonce);
        this.int128(params.new_nonce_hash1);
      },
      "mt_dh_gen_retry": function(params) {
        this.int32(1188831161);
        this.int128(params.nonce);
        this.int128(params.server_nonce);
        this.int128(params.new_nonce_hash2);
      },
      "mt_dh_gen_fail": function(params) {
        this.int32(-1499615742);
        this.int128(params.nonce);
        this.int128(params.server_nonce);
        this.int128(params.new_nonce_hash3);
      },
      "mt_rpc_result": function(params) {
        this.int32(-212046591);
        this.long(params.req_msg_id);
        this.predicate(params.result);
      },
      "mt_rpc_error": function(params) {
        this.int32(558156313);
        this.int(params.error_code);
        this.string(params.error_message);
      },
      "mt_rpc_answer_unknown": function(params) {
        this.int32(1579864942);
      },
      "mt_rpc_answer_dropped_running": function(params) {
        this.int32(-847714938);
      },
      "mt_rpc_answer_dropped": function(params) {
        this.int32(-1539647305);
        this.long(params.msg_id);
        this.int(params.seq_no);
        this.int(params.bytes);
      },
      "mt_future_salt": function(params) {
        this.int32(155834844);
        this.int(params.valid_since);
        this.int(params.valid_until);
        this.long(params.salt);
      },
      "mt_future_salts": function(params) {
        this.int32(-1370486635);
        this.long(params.req_msg_id);
        this.int(params.now);
        this.vector(this.predicate, params.salts);
      },
      "mt_pong": function(params) {
        this.int32(880243653);
        this.long(params.msg_id);
        this.long(params.ping_id);
      },
      "mt_new_session_created": function(params) {
        this.int32(-1631450872);
        this.long(params.first_msg_id);
        this.long(params.unique_id);
        this.long(params.server_salt);
      },
      "mt_msg_container": function(params) {
        this.int32(1945237724);
        this.vector(this.predicate, params.messages);
      },
      "mt_message": function(params) {
        this.int32(1538843921);
        this.long(params.msg_id);
        this.int(params.seqno);
        this.int(params.bytes);
        this.predicate(params.body);
      },
      "mt_msg_copy": function(params) {
        this.int32(-530561358);
        this.predicate(params.orig_message);
      },
      "mt_gzip_packed": function(params) {
        this.int32(812830625);
        this.bytes(params.packed_data);
      },
      "mt_msgs_ack": function(params) {
        this.int32(1658238041);
        this.vector(this.long, params.msg_ids);
      },
      "mt_bad_msg_notification": function(params) {
        this.int32(-1477445615);
        this.long(params.bad_msg_id);
        this.int(params.bad_msg_seqno);
        this.int(params.error_code);
      },
      "mt_bad_server_salt": function(params) {
        this.int32(-307542917);
        this.long(params.bad_msg_id);
        this.int(params.bad_msg_seqno);
        this.int(params.error_code);
        this.long(params.new_server_salt);
      },
      "mt_msg_resend_req": function(params) {
        this.int32(2105940488);
        this.vector(this.long, params.msg_ids);
      },
      "mt_msg_resend_ans_req": function(params) {
        this.int32(-2045723925);
        this.vector(this.long, params.msg_ids);
      },
      "mt_msgs_state_req": function(params) {
        this.int32(-630588590);
        this.vector(this.long, params.msg_ids);
      },
      "mt_msgs_state_info": function(params) {
        this.int32(81704317);
        this.long(params.req_msg_id);
        this.bytes(params.info);
      },
      "mt_msgs_all_info": function(params) {
        this.int32(-1933520591);
        this.vector(this.long, params.msg_ids);
        this.bytes(params.info);
      },
      "mt_msg_detailed_info": function(params) {
        this.int32(661470918);
        this.long(params.msg_id);
        this.long(params.answer_msg_id);
        this.int(params.bytes);
        this.int(params.status);
      },
      "mt_msg_new_detailed_info": function(params) {
        this.int32(-2137147681);
        this.long(params.answer_msg_id);
        this.int(params.bytes);
        this.int(params.status);
      },
      "mt_bind_auth_key_inner": function(params) {
        this.int32(1973679973);
        this.long(params.nonce);
        this.long(params.temp_auth_key_id);
        this.long(params.perm_auth_key_id);
        this.long(params.temp_session_id);
        this.int(params.expires_at);
      },
      "mt_destroy_auth_key_ok": function(params) {
        this.int32(-161422892);
      },
      "mt_destroy_auth_key_none": function(params) {
        this.int32(178201177);
      },
      "mt_destroy_auth_key_fail": function(params) {
        this.int32(-368010477);
      },
      "mt_destroy_session_ok": function(params) {
        this.int32(-501201412);
        this.long(params.session_id);
      },
      "mt_destroy_session_none": function(params) {
        this.int32(1658015945);
        this.long(params.session_id);
      },
      "mt_req_pq": function(params) {
        this.int32(1615239032);
        this.int128(params.nonce);
      },
      "mt_req_pq_multi": function(params) {
        this.int32(-1099002127);
        this.int128(params.nonce);
      },
      "mt_req_DH_params": function(params) {
        this.int32(-686627650);
        this.int128(params.nonce);
        this.int128(params.server_nonce);
        this.bytes(params.p);
        this.bytes(params.q);
        this.long(params.public_key_fingerprint);
        this.bytes(params.encrypted_data);
      },
      "mt_set_client_DH_params": function(params) {
        this.int32(-184262881);
        this.int128(params.nonce);
        this.int128(params.server_nonce);
        this.bytes(params.encrypted_data);
      },
      "mt_rpc_drop_answer": function(params) {
        this.int32(1491380032);
        this.long(params.req_msg_id);
      },
      "mt_get_future_salts": function(params) {
        this.int32(-1188971260);
        this.int(params.num);
      },
      "mt_ping": function(params) {
        this.int32(2059302892);
        this.long(params.ping_id);
      },
      "mt_ping_delay_disconnect": function(params) {
        this.int32(-213746804);
        this.long(params.ping_id);
        this.int(params.disconnect_delay);
      },
      "mt_http_wait": function(params) {
        this.int32(-1835453025);
        this.int(params.max_delay);
        this.int(params.wait_after);
        this.int(params.max_wait);
      },
      "mt_destroy_auth_key": function(params) {
        this.int32(-784117408);
      },
      "mt_destroy_session": function(params) {
        this.int32(-414113498);
        this.long(params.session_id);
      },
      "boolFalse": function(params) {
        this.int32(-1132882121);
      },
      "boolTrue": function(params) {
        this.int32(-1720552011);
      },
      "true": function(params) {
        this.int32(1072550713);
      },
      "vector": function(params) {
        this.int32(481674261);
      },
      "error": function(params) {
        this.int32(-994444869);
        this.int(params.code);
        this.string(params.text);
      },
      "null": function(params) {
        this.int32(1450380236);
      },
      "inputPeerEmpty": function(params) {
        this.int32(2134579434);
      },
      "inputPeerSelf": function(params) {
        this.int32(2107670217);
      },
      "inputPeerChat": function(params) {
        this.int32(900291769);
        this.long(params.chat_id);
      },
      "inputUserEmpty": function(params) {
        this.int32(-1182234929);
      },
      "inputUserSelf": function(params) {
        this.int32(-138301121);
      },
      "inputPhoneContact": function(params) {
        this.int32(-208488460);
        this.long(params.client_id);
        this.string(params.phone);
        this.string(params.first_name);
        this.string(params.last_name);
      },
      "inputFile": function(params) {
        this.int32(-181407105);
        this.long(params.id);
        this.int(params.parts);
        this.string(params.name);
        this.string(params.md5_checksum);
      },
      "inputMediaEmpty": function(params) {
        this.int32(-1771768449);
      },
      "inputMediaUploadedPhoto": function(params) {
        this.int32(505969924);
        const flags = this.has(params.spoiler) << 2 | this.has(params.stickers) << 0 | this.has(params.ttl_seconds) << 1;
        this.int32(flags);
        this.predicate(params.file);
        this.flagVector(this.predicate, params.stickers);
        this.flag(this.int, params.ttl_seconds);
      },
      "inputMediaPhoto": function(params) {
        this.int32(-1279654347);
        const flags = this.has(params.spoiler) << 1 | this.has(params.ttl_seconds) << 0;
        this.int32(flags);
        this.predicate(params.id);
        this.flag(this.int, params.ttl_seconds);
      },
      "inputMediaGeoPoint": function(params) {
        this.int32(-104578748);
        this.predicate(params.geo_point);
      },
      "inputMediaContact": function(params) {
        this.int32(-122978821);
        this.string(params.phone_number);
        this.string(params.first_name);
        this.string(params.last_name);
        this.string(params.vcard);
      },
      "inputChatPhotoEmpty": function(params) {
        this.int32(480546647);
      },
      "inputChatUploadedPhoto": function(params) {
        this.int32(-1110593856);
        const flags = this.has(params.file) << 0 | this.has(params.video) << 1 | this.has(params.video_start_ts) << 2 | this.has(params.video_emoji_markup) << 3;
        this.int32(flags);
        this.flag(this.predicate, params.file);
        this.flag(this.predicate, params.video);
        this.flag(this.double, params.video_start_ts);
        this.flag(this.predicate, params.video_emoji_markup);
      },
      "inputChatPhoto": function(params) {
        this.int32(-1991004873);
        this.predicate(params.id);
      },
      "inputGeoPointEmpty": function(params) {
        this.int32(-457104426);
      },
      "inputGeoPoint": function(params) {
        this.int32(1210199983);
        const flags = this.has(params.accuracy_radius) << 0;
        this.int32(flags);
        this.double(params.lat);
        this.double(params.long);
        this.flag(this.int, params.accuracy_radius);
      },
      "inputPhotoEmpty": function(params) {
        this.int32(483901197);
      },
      "inputPhoto": function(params) {
        this.int32(1001634122);
        this.long(params.id);
        this.long(params.access_hash);
        this.bytes(params.file_reference);
      },
      "inputFileLocation": function(params) {
        this.int32(-539317279);
        this.long(params.volume_id);
        this.int(params.local_id);
        this.long(params.secret);
        this.bytes(params.file_reference);
      },
      "peerUser": function(params) {
        this.int32(1498486562);
        this.long(params.user_id);
      },
      "peerChat": function(params) {
        this.int32(918946202);
        this.long(params.chat_id);
      },
      "storage.fileUnknown": function(params) {
        this.int32(-1432995067);
      },
      "storage.filePartial": function(params) {
        this.int32(1086091090);
      },
      "storage.fileJpeg": function(params) {
        this.int32(8322574);
      },
      "storage.fileGif": function(params) {
        this.int32(-891180321);
      },
      "storage.filePng": function(params) {
        this.int32(172975040);
      },
      "storage.filePdf": function(params) {
        this.int32(-1373745011);
      },
      "storage.fileMp3": function(params) {
        this.int32(1384777335);
      },
      "storage.fileMov": function(params) {
        this.int32(1258941372);
      },
      "storage.fileMp4": function(params) {
        this.int32(-1278304028);
      },
      "storage.fileWebp": function(params) {
        this.int32(276907596);
      },
      "userEmpty": function(params) {
        this.int32(-742634630);
        this.long(params.id);
      },
      "userProfilePhotoEmpty": function(params) {
        this.int32(1326562017);
      },
      "userProfilePhoto": function(params) {
        this.int32(-2100168954);
        const flags = this.has(params.has_video) << 0 | this.has(params.personal) << 2 | this.has(params.stripped_thumb) << 1;
        this.int32(flags);
        this.long(params.photo_id);
        this.flag(this.bytes, params.stripped_thumb);
        this.int(params.dc_id);
      },
      "userStatusEmpty": function(params) {
        this.int32(164646985);
      },
      "userStatusOnline": function(params) {
        this.int32(-306628279);
        this.int(params.expires);
      },
      "userStatusOffline": function(params) {
        this.int32(9203775);
        this.int(params.was_online);
      },
      "chatEmpty": function(params) {
        this.int32(693512293);
        this.long(params.id);
      },
      "chat": function(params) {
        this.int32(1103884886);
        const flags = this.has(params.creator) << 0 | this.has(params.left) << 2 | this.has(params.deactivated) << 5 | this.has(params.call_active) << 23 | this.has(params.call_not_empty) << 24 | this.has(params.noforwards) << 25 | this.has(params.migrated_to) << 6 | this.has(params.admin_rights) << 14 | this.has(params.default_banned_rights) << 18;
        this.int32(flags);
        this.long(params.id);
        this.string(params.title);
        this.predicate(params.photo);
        this.int(params.participants_count);
        this.int(params.date);
        this.int(params.version);
        this.flag(this.predicate, params.migrated_to);
        this.flag(this.predicate, params.admin_rights);
        this.flag(this.predicate, params.default_banned_rights);
      },
      "chatForbidden": function(params) {
        this.int32(1704108455);
        this.long(params.id);
        this.string(params.title);
      },
      "chatFull": function(params) {
        this.int32(-908914376);
        const flags = this.has(params.can_set_username) << 7 | this.has(params.has_scheduled) << 8 | this.has(params.translations_disabled) << 19 | this.has(params.chat_photo) << 2 | this.has(params.exported_invite) << 13 | this.has(params.bot_info) << 3 | this.has(params.pinned_msg_id) << 6 | this.has(params.folder_id) << 11 | this.has(params.call) << 12 | this.has(params.ttl_period) << 14 | this.has(params.groupcall_default_join_as) << 15 | this.has(params.theme_emoticon) << 16 | this.has(params.requests_pending) << 17 | this.has(params.recent_requesters) << 17 | this.has(params.available_reactions) << 18;
        this.int32(flags);
        this.long(params.id);
        this.string(params.about);
        this.predicate(params.participants);
        this.flag(this.predicate, params.chat_photo);
        this.predicate(params.notify_settings);
        this.flag(this.predicate, params.exported_invite);
        this.flagVector(this.predicate, params.bot_info);
        this.flag(this.int, params.pinned_msg_id);
        this.flag(this.int, params.folder_id);
        this.flag(this.predicate, params.call);
        this.flag(this.int, params.ttl_period);
        this.flag(this.predicate, params.groupcall_default_join_as);
        this.flag(this.string, params.theme_emoticon);
        this.flag(this.int, params.requests_pending);
        this.flagVector(this.long, params.recent_requesters);
        this.flag(this.predicate, params.available_reactions);
      },
      "chatParticipant": function(params) {
        this.int32(-1070776313);
        this.long(params.user_id);
        this.long(params.inviter_id);
        this.int(params.date);
      },
      "chatParticipantsForbidden": function(params) {
        this.int32(-2023500831);
        const flags = this.has(params.self_participant) << 0;
        this.int32(flags);
        this.long(params.chat_id);
        this.flag(this.predicate, params.self_participant);
      },
      "chatParticipants": function(params) {
        this.int32(1018991608);
        this.long(params.chat_id);
        this.vector(this.predicate, params.participants);
        this.int(params.version);
      },
      "chatPhotoEmpty": function(params) {
        this.int32(935395612);
      },
      "chatPhoto": function(params) {
        this.int32(476978193);
        const flags = this.has(params.has_video) << 0 | this.has(params.stripped_thumb) << 1;
        this.int32(flags);
        this.long(params.photo_id);
        this.flag(this.bytes, params.stripped_thumb);
        this.int(params.dc_id);
      },
      "messageEmpty": function(params) {
        this.int32(-1868117372);
        const flags = this.has(params.peer_id) << 0;
        this.int32(flags);
        this.int(params.id);
        this.flag(this.predicate, params.peer_id);
      },
      "message": function(params) {
        this.int32(940666592);
        const flags = this.has(params.out) << 1 | this.has(params.mentioned) << 4 | this.has(params.media_unread) << 5 | this.has(params.silent) << 13 | this.has(params.post) << 14 | this.has(params.from_scheduled) << 18 | this.has(params.legacy) << 19 | this.has(params.edit_hide) << 21 | this.has(params.pinned) << 24 | this.has(params.noforwards) << 26 | this.has(params.from_id) << 8 | this.has(params.fwd_from) << 2 | this.has(params.via_bot_id) << 11 | this.has(params.reply_to) << 3 | this.has(params.media) << 9 | this.has(params.reply_markup) << 6 | this.has(params.entities) << 7 | this.has(params.views) << 10 | this.has(params.forwards) << 10 | this.has(params.replies) << 23 | this.has(params.edit_date) << 15 | this.has(params.post_author) << 16 | this.has(params.grouped_id) << 17 | this.has(params.reactions) << 20 | this.has(params.restriction_reason) << 22 | this.has(params.ttl_period) << 25;
        this.int32(flags);
        this.int(params.id);
        this.flag(this.predicate, params.from_id);
        this.predicate(params.peer_id);
        this.flag(this.predicate, params.fwd_from);
        this.flag(this.long, params.via_bot_id);
        this.flag(this.predicate, params.reply_to);
        this.int(params.date);
        this.string(params.message);
        this.flag(this.predicate, params.media);
        this.flag(this.predicate, params.reply_markup);
        this.flagVector(this.predicate, params.entities);
        this.flag(this.int, params.views);
        this.flag(this.int, params.forwards);
        this.flag(this.predicate, params.replies);
        this.flag(this.int, params.edit_date);
        this.flag(this.string, params.post_author);
        this.flag(this.long, params.grouped_id);
        this.flag(this.predicate, params.reactions);
        this.flagVector(this.predicate, params.restriction_reason);
        this.flag(this.int, params.ttl_period);
      },
      "messageService": function(params) {
        this.int32(721967202);
        const flags = this.has(params.out) << 1 | this.has(params.mentioned) << 4 | this.has(params.media_unread) << 5 | this.has(params.silent) << 13 | this.has(params.post) << 14 | this.has(params.legacy) << 19 | this.has(params.from_id) << 8 | this.has(params.reply_to) << 3 | this.has(params.ttl_period) << 25;
        this.int32(flags);
        this.int(params.id);
        this.flag(this.predicate, params.from_id);
        this.predicate(params.peer_id);
        this.flag(this.predicate, params.reply_to);
        this.int(params.date);
        this.predicate(params.action);
        this.flag(this.int, params.ttl_period);
      },
      "messageMediaEmpty": function(params) {
        this.int32(1038967584);
      },
      "messageMediaPhoto": function(params) {
        this.int32(1766936791);
        const flags = this.has(params.spoiler) << 3 | this.has(params.photo) << 0 | this.has(params.ttl_seconds) << 2;
        this.int32(flags);
        this.flag(this.predicate, params.photo);
        this.flag(this.int, params.ttl_seconds);
      },
      "messageMediaGeo": function(params) {
        this.int32(1457575028);
        this.predicate(params.geo);
      },
      "messageMediaContact": function(params) {
        this.int32(1882335561);
        this.string(params.phone_number);
        this.string(params.first_name);
        this.string(params.last_name);
        this.string(params.vcard);
        this.long(params.user_id);
      },
      "messageMediaUnsupported": function(params) {
        this.int32(-1618676578);
      },
      "messageActionEmpty": function(params) {
        this.int32(-1230047312);
      },
      "messageActionChatCreate": function(params) {
        this.int32(-1119368275);
        this.string(params.title);
        this.vector(this.long, params.users);
      },
      "messageActionChatEditTitle": function(params) {
        this.int32(-1247687078);
        this.string(params.title);
      },
      "messageActionChatEditPhoto": function(params) {
        this.int32(2144015272);
        this.predicate(params.photo);
      },
      "messageActionChatDeletePhoto": function(params) {
        this.int32(-1780220945);
      },
      "messageActionChatAddUser": function(params) {
        this.int32(365886720);
        this.vector(this.long, params.users);
      },
      "messageActionChatDeleteUser": function(params) {
        this.int32(-1539362612);
        this.long(params.user_id);
      },
      "dialog": function(params) {
        this.int32(-712374074);
        const flags = this.has(params.pinned) << 2 | this.has(params.unread_mark) << 3 | this.has(params.pts) << 0 | this.has(params.draft) << 1 | this.has(params.folder_id) << 4 | this.has(params.ttl_period) << 5;
        this.int32(flags);
        this.predicate(params.peer);
        this.int(params.top_message);
        this.int(params.read_inbox_max_id);
        this.int(params.read_outbox_max_id);
        this.int(params.unread_count);
        this.int(params.unread_mentions_count);
        this.int(params.unread_reactions_count);
        this.predicate(params.notify_settings);
        this.flag(this.int, params.pts);
        this.flag(this.predicate, params.draft);
        this.flag(this.int, params.folder_id);
        this.flag(this.int, params.ttl_period);
      },
      "photoEmpty": function(params) {
        this.int32(590459437);
        this.long(params.id);
      },
      "photo": function(params) {
        this.int32(-82216347);
        const flags = this.has(params.has_stickers) << 0 | this.has(params.video_sizes) << 1;
        this.int32(flags);
        this.long(params.id);
        this.long(params.access_hash);
        this.bytes(params.file_reference);
        this.int(params.date);
        this.vector(this.predicate, params.sizes);
        this.flagVector(this.predicate, params.video_sizes);
        this.int(params.dc_id);
      },
      "photoSizeEmpty": function(params) {
        this.int32(236446268);
        this.string(params.type);
      },
      "photoSize": function(params) {
        this.int32(1976012384);
        this.string(params.type);
        this.int(params.w);
        this.int(params.h);
        this.int(params.size);
      },
      "photoCachedSize": function(params) {
        this.int32(35527382);
        this.string(params.type);
        this.int(params.w);
        this.int(params.h);
        this.bytes(params.bytes);
      },
      "geoPointEmpty": function(params) {
        this.int32(286776671);
      },
      "geoPoint": function(params) {
        this.int32(-1297942941);
        const flags = this.has(params.accuracy_radius) << 0;
        this.int32(flags);
        this.double(params.long);
        this.double(params.lat);
        this.long(params.access_hash);
        this.flag(this.int, params.accuracy_radius);
      },
      "auth.sentCode": function(params) {
        this.int32(1577067778);
        const flags = this.has(params.next_type) << 1 | this.has(params.timeout) << 2;
        this.int32(flags);
        this.predicate(params.type);
        this.string(params.phone_code_hash);
        this.flag(this.predicate, params.next_type);
        this.flag(this.int, params.timeout);
      },
      "auth.authorization": function(params) {
        this.int32(782418132);
        const flags = this.has(params.setup_password_required) << 1 | this.has(params.otherwise_relogin_days) << 1 | this.has(params.tmp_sessions) << 0 | this.has(params.future_auth_token) << 2;
        this.int32(flags);
        this.flag(this.int, params.otherwise_relogin_days);
        this.flag(this.int, params.tmp_sessions);
        this.flag(this.bytes, params.future_auth_token);
        this.predicate(params.user);
      },
      "auth.exportedAuthorization": function(params) {
        this.int32(-1271602504);
        this.long(params.id);
        this.bytes(params.bytes);
      },
      "inputNotifyPeer": function(params) {
        this.int32(-1195615476);
        this.predicate(params.peer);
      },
      "inputNotifyUsers": function(params) {
        this.int32(423314455);
      },
      "inputNotifyChats": function(params) {
        this.int32(1251338318);
      },
      "inputPeerNotifySettings": function(params) {
        this.int32(-551616469);
        const flags = this.has(params.show_previews) << 0 | this.has(params.silent) << 1 | this.has(params.mute_until) << 2 | this.has(params.sound) << 3;
        this.int32(flags);
        this.flag(this.Bool, params.show_previews);
        this.flag(this.Bool, params.silent);
        this.flag(this.int, params.mute_until);
        this.flag(this.predicate, params.sound);
      },
      "peerNotifySettings": function(params) {
        this.int32(-1472527322);
        const flags = this.has(params.show_previews) << 0 | this.has(params.silent) << 1 | this.has(params.mute_until) << 2 | this.has(params.ios_sound) << 3 | this.has(params.android_sound) << 4 | this.has(params.other_sound) << 5;
        this.int32(flags);
        this.flag(this.Bool, params.show_previews);
        this.flag(this.Bool, params.silent);
        this.flag(this.int, params.mute_until);
        this.flag(this.predicate, params.ios_sound);
        this.flag(this.predicate, params.android_sound);
        this.flag(this.predicate, params.other_sound);
      },
      "peerSettings": function(params) {
        this.int32(-1525149427);
        const flags = this.has(params.report_spam) << 0 | this.has(params.add_contact) << 1 | this.has(params.block_contact) << 2 | this.has(params.share_contact) << 3 | this.has(params.need_contacts_exception) << 4 | this.has(params.report_geo) << 5 | this.has(params.autoarchived) << 7 | this.has(params.invite_members) << 8 | this.has(params.request_chat_broadcast) << 10 | this.has(params.geo_distance) << 6 | this.has(params.request_chat_title) << 9 | this.has(params.request_chat_date) << 9;
        this.int32(flags);
        this.flag(this.int, params.geo_distance);
        this.flag(this.string, params.request_chat_title);
        this.flag(this.int, params.request_chat_date);
      },
      "wallPaper": function(params) {
        this.int32(-1539849235);
        this.long(params.id);
        const flags = this.has(params.creator) << 0 | this.has(params.default) << 1 | this.has(params.pattern) << 3 | this.has(params.dark) << 4 | this.has(params.settings) << 2;
        this.int32(flags);
        this.long(params.access_hash);
        this.string(params.slug);
        this.predicate(params.document);
        this.flag(this.predicate, params.settings);
      },
      "inputReportReasonSpam": function(params) {
        this.int32(1490799288);
      },
      "inputReportReasonViolence": function(params) {
        this.int32(505595789);
      },
      "inputReportReasonPornography": function(params) {
        this.int32(777640226);
      },
      "inputReportReasonChildAbuse": function(params) {
        this.int32(-1376497949);
      },
      "inputReportReasonOther": function(params) {
        this.int32(-1041980751);
      },
      "userFull": function(params) {
        this.int32(-1813324973);
        const flags = this.has(params.blocked) << 0 | this.has(params.phone_calls_available) << 4 | this.has(params.phone_calls_private) << 5 | this.has(params.can_pin_message) << 7 | this.has(params.has_scheduled) << 12 | this.has(params.video_calls_available) << 13 | this.has(params.voice_messages_forbidden) << 20 | this.has(params.translations_disabled) << 23 | this.has(params.about) << 1 | this.has(params.personal_photo) << 21 | this.has(params.profile_photo) << 2 | this.has(params.fallback_photo) << 22 | this.has(params.bot_info) << 3 | this.has(params.pinned_msg_id) << 6 | this.has(params.folder_id) << 11 | this.has(params.ttl_period) << 14 | this.has(params.theme_emoticon) << 15 | this.has(params.private_forward_name) << 16 | this.has(params.bot_group_admin_rights) << 17 | this.has(params.bot_broadcast_admin_rights) << 18 | this.has(params.premium_gifts) << 19 | this.has(params.wallpaper) << 24;
        this.int32(flags);
        this.long(params.id);
        this.flag(this.string, params.about);
        this.predicate(params.settings);
        this.flag(this.predicate, params.personal_photo);
        this.flag(this.predicate, params.profile_photo);
        this.flag(this.predicate, params.fallback_photo);
        this.predicate(params.notify_settings);
        this.flag(this.predicate, params.bot_info);
        this.flag(this.int, params.pinned_msg_id);
        this.int(params.common_chats_count);
        this.flag(this.int, params.folder_id);
        this.flag(this.int, params.ttl_period);
        this.flag(this.string, params.theme_emoticon);
        this.flag(this.string, params.private_forward_name);
        this.flag(this.predicate, params.bot_group_admin_rights);
        this.flag(this.predicate, params.bot_broadcast_admin_rights);
        this.flagVector(this.predicate, params.premium_gifts);
        this.flag(this.predicate, params.wallpaper);
      },
      "contact": function(params) {
        this.int32(341499403);
        this.long(params.user_id);
        this.Bool(params.mutual);
      },
      "importedContact": function(params) {
        this.int32(-1052885936);
        this.long(params.user_id);
        this.long(params.client_id);
      },
      "contactStatus": function(params) {
        this.int32(383348795);
        this.long(params.user_id);
        this.predicate(params.status);
      },
      "contacts.contactsNotModified": function(params) {
        this.int32(-1219778094);
      },
      "contacts.contacts": function(params) {
        this.int32(-353862078);
        this.vector(this.predicate, params.contacts);
        this.int(params.saved_count);
        this.vector(this.predicate, params.users);
      },
      "contacts.importedContacts": function(params) {
        this.int32(2010127419);
        this.vector(this.predicate, params.imported);
        this.vector(this.predicate, params.popular_invites);
        this.vector(this.long, params.retry_contacts);
        this.vector(this.predicate, params.users);
      },
      "contacts.blocked": function(params) {
        this.int32(182326673);
        this.vector(this.predicate, params.blocked);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "contacts.blockedSlice": function(params) {
        this.int32(-513392236);
        this.int(params.count);
        this.vector(this.predicate, params.blocked);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "messages.dialogs": function(params) {
        this.int32(364538944);
        this.vector(this.predicate, params.dialogs);
        this.vector(this.predicate, params.messages);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "messages.dialogsSlice": function(params) {
        this.int32(1910543603);
        this.int(params.count);
        this.vector(this.predicate, params.dialogs);
        this.vector(this.predicate, params.messages);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "messages.messages": function(params) {
        this.int32(-1938715001);
        this.vector(this.predicate, params.messages);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "messages.messagesSlice": function(params) {
        this.int32(978610270);
        const flags = this.has(params.inexact) << 1 | this.has(params.next_rate) << 0 | this.has(params.offset_id_offset) << 2;
        this.int32(flags);
        this.int(params.count);
        this.flag(this.int, params.next_rate);
        this.flag(this.int, params.offset_id_offset);
        this.vector(this.predicate, params.messages);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "messages.chats": function(params) {
        this.int32(1694474197);
        this.vector(this.predicate, params.chats);
      },
      "messages.chatFull": function(params) {
        this.int32(-438840932);
        this.predicate(params.full_chat);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "messages.affectedHistory": function(params) {
        this.int32(-1269012015);
        this.int(params.pts);
        this.int(params.pts_count);
        this.int(params.offset);
      },
      "inputMessagesFilterEmpty": function(params) {
        this.int32(1474492012);
      },
      "inputMessagesFilterPhotos": function(params) {
        this.int32(-1777752804);
      },
      "inputMessagesFilterVideo": function(params) {
        this.int32(-1614803355);
      },
      "inputMessagesFilterPhotoVideo": function(params) {
        this.int32(1458172132);
      },
      "inputMessagesFilterDocument": function(params) {
        this.int32(-1629621880);
      },
      "inputMessagesFilterUrl": function(params) {
        this.int32(2129714567);
      },
      "inputMessagesFilterGif": function(params) {
        this.int32(-3644025);
      },
      "updateNewMessage": function(params) {
        this.int32(522914557);
        this.predicate(params.message);
        this.int(params.pts);
        this.int(params.pts_count);
      },
      "updateMessageID": function(params) {
        this.int32(1318109142);
        this.int(params.id);
        this.long(params.random_id);
      },
      "updateDeleteMessages": function(params) {
        this.int32(-1576161051);
        this.vector(this.int, params.messages);
        this.int(params.pts);
        this.int(params.pts_count);
      },
      "updateUserTyping": function(params) {
        this.int32(-1071741569);
        this.long(params.user_id);
        this.predicate(params.action);
      },
      "updateChatUserTyping": function(params) {
        this.int32(-2092401936);
        this.long(params.chat_id);
        this.predicate(params.from_id);
        this.predicate(params.action);
      },
      "updateChatParticipants": function(params) {
        this.int32(125178264);
        this.predicate(params.participants);
      },
      "updateUserStatus": function(params) {
        this.int32(-440534818);
        this.long(params.user_id);
        this.predicate(params.status);
      },
      "updateUserName": function(params) {
        this.int32(-1484486364);
        this.long(params.user_id);
        this.string(params.first_name);
        this.string(params.last_name);
        this.vector(this.predicate, params.usernames);
      },
      "updates.state": function(params) {
        this.int32(-1519637954);
        this.int(params.pts);
        this.int(params.qts);
        this.int(params.date);
        this.int(params.seq);
        this.int(params.unread_count);
      },
      "updates.differenceEmpty": function(params) {
        this.int32(1567990072);
        this.int(params.date);
        this.int(params.seq);
      },
      "updates.difference": function(params) {
        this.int32(16030880);
        this.vector(this.predicate, params.new_messages);
        this.vector(this.predicate, params.new_encrypted_messages);
        this.vector(this.predicate, params.other_updates);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
        this.predicate(params.state);
      },
      "updates.differenceSlice": function(params) {
        this.int32(-1459938943);
        this.vector(this.predicate, params.new_messages);
        this.vector(this.predicate, params.new_encrypted_messages);
        this.vector(this.predicate, params.other_updates);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
        this.predicate(params.intermediate_state);
      },
      "updatesTooLong": function(params) {
        this.int32(-484987010);
      },
      "updateShortMessage": function(params) {
        this.int32(826001400);
        const flags = this.has(params.out) << 1 | this.has(params.mentioned) << 4 | this.has(params.media_unread) << 5 | this.has(params.silent) << 13 | this.has(params.fwd_from) << 2 | this.has(params.via_bot_id) << 11 | this.has(params.reply_to) << 3 | this.has(params.entities) << 7 | this.has(params.ttl_period) << 25;
        this.int32(flags);
        this.int(params.id);
        this.long(params.user_id);
        this.string(params.message);
        this.int(params.pts);
        this.int(params.pts_count);
        this.int(params.date);
        this.flag(this.predicate, params.fwd_from);
        this.flag(this.long, params.via_bot_id);
        this.flag(this.predicate, params.reply_to);
        this.flagVector(this.predicate, params.entities);
        this.flag(this.int, params.ttl_period);
      },
      "updateShortChatMessage": function(params) {
        this.int32(1299050149);
        const flags = this.has(params.out) << 1 | this.has(params.mentioned) << 4 | this.has(params.media_unread) << 5 | this.has(params.silent) << 13 | this.has(params.fwd_from) << 2 | this.has(params.via_bot_id) << 11 | this.has(params.reply_to) << 3 | this.has(params.entities) << 7 | this.has(params.ttl_period) << 25;
        this.int32(flags);
        this.int(params.id);
        this.long(params.from_id);
        this.long(params.chat_id);
        this.string(params.message);
        this.int(params.pts);
        this.int(params.pts_count);
        this.int(params.date);
        this.flag(this.predicate, params.fwd_from);
        this.flag(this.long, params.via_bot_id);
        this.flag(this.predicate, params.reply_to);
        this.flagVector(this.predicate, params.entities);
        this.flag(this.int, params.ttl_period);
      },
      "updateShort": function(params) {
        this.int32(2027216577);
        this.predicate(params.update);
        this.int(params.date);
      },
      "updatesCombined": function(params) {
        this.int32(1918567619);
        this.vector(this.predicate, params.updates);
        this.vector(this.predicate, params.users);
        this.vector(this.predicate, params.chats);
        this.int(params.date);
        this.int(params.seq_start);
        this.int(params.seq);
      },
      "updates": function(params) {
        this.int32(1957577280);
        this.vector(this.predicate, params.updates);
        this.vector(this.predicate, params.users);
        this.vector(this.predicate, params.chats);
        this.int(params.date);
        this.int(params.seq);
      },
      "photos.photos": function(params) {
        this.int32(-1916114267);
        this.vector(this.predicate, params.photos);
        this.vector(this.predicate, params.users);
      },
      "photos.photosSlice": function(params) {
        this.int32(352657236);
        this.int(params.count);
        this.vector(this.predicate, params.photos);
        this.vector(this.predicate, params.users);
      },
      "photos.photo": function(params) {
        this.int32(539045032);
        this.predicate(params.photo);
        this.vector(this.predicate, params.users);
      },
      "upload.file": function(params) {
        this.int32(157948117);
        this.predicate(params.type);
        this.int(params.mtime);
        this.bytes(params.bytes);
      },
      "dcOption": function(params) {
        this.int32(414687501);
        const flags = this.has(params.ipv6) << 0 | this.has(params.media_only) << 1 | this.has(params.tcpo_only) << 2 | this.has(params.cdn) << 3 | this.has(params.static) << 4 | this.has(params.this_port_only) << 5 | this.has(params.secret) << 10;
        this.int32(flags);
        this.int(params.id);
        this.string(params.ip_address);
        this.int(params.port);
        this.flag(this.bytes, params.secret);
      },
      "config": function(params) {
        this.int32(-870702050);
        const flags = this.has(params.default_p2p_contacts) << 3 | this.has(params.preload_featured_stickers) << 4 | this.has(params.revoke_pm_inbox) << 6 | this.has(params.blocked_mode) << 8 | this.has(params.force_try_ipv6) << 14 | this.has(params.tmp_sessions) << 0 | this.has(params.autoupdate_url_prefix) << 7 | this.has(params.gif_search_username) << 9 | this.has(params.venue_search_username) << 10 | this.has(params.img_search_username) << 11 | this.has(params.static_maps_provider) << 12 | this.has(params.suggested_lang_code) << 2 | this.has(params.lang_pack_version) << 2 | this.has(params.base_lang_pack_version) << 2 | this.has(params.reactions_default) << 15 | this.has(params.autologin_token) << 16;
        this.int32(flags);
        this.int(params.date);
        this.int(params.expires);
        this.Bool(params.test_mode);
        this.int(params.this_dc);
        this.vector(this.predicate, params.dc_options);
        this.string(params.dc_txt_domain_name);
        this.int(params.chat_size_max);
        this.int(params.megagroup_size_max);
        this.int(params.forwarded_count_max);
        this.int(params.online_update_period_ms);
        this.int(params.offline_blur_timeout_ms);
        this.int(params.offline_idle_timeout_ms);
        this.int(params.online_cloud_timeout_ms);
        this.int(params.notify_cloud_delay_ms);
        this.int(params.notify_default_delay_ms);
        this.int(params.push_chat_period_ms);
        this.int(params.push_chat_limit);
        this.int(params.edit_time_limit);
        this.int(params.revoke_time_limit);
        this.int(params.revoke_pm_time_limit);
        this.int(params.rating_e_decay);
        this.int(params.stickers_recent_limit);
        this.int(params.channels_read_media_period);
        this.flag(this.int, params.tmp_sessions);
        this.int(params.call_receive_timeout_ms);
        this.int(params.call_ring_timeout_ms);
        this.int(params.call_connect_timeout_ms);
        this.int(params.call_packet_timeout_ms);
        this.string(params.me_url_prefix);
        this.flag(this.string, params.autoupdate_url_prefix);
        this.flag(this.string, params.gif_search_username);
        this.flag(this.string, params.venue_search_username);
        this.flag(this.string, params.img_search_username);
        this.flag(this.string, params.static_maps_provider);
        this.int(params.caption_length_max);
        this.int(params.message_length_max);
        this.int(params.webfile_dc_id);
        this.flag(this.string, params.suggested_lang_code);
        this.flag(this.int, params.lang_pack_version);
        this.flag(this.int, params.base_lang_pack_version);
        this.flag(this.predicate, params.reactions_default);
        this.flag(this.string, params.autologin_token);
      },
      "nearestDc": function(params) {
        this.int32(-1910892683);
        this.string(params.country);
        this.int(params.this_dc);
        this.int(params.nearest_dc);
      },
      "help.appUpdate": function(params) {
        this.int32(-860107216);
        const flags = this.has(params.can_not_skip) << 0 | this.has(params.document) << 1 | this.has(params.url) << 2 | this.has(params.sticker) << 3;
        this.int32(flags);
        this.int(params.id);
        this.string(params.version);
        this.string(params.text);
        this.vector(this.predicate, params.entities);
        this.flag(this.predicate, params.document);
        this.flag(this.string, params.url);
        this.flag(this.predicate, params.sticker);
      },
      "help.noAppUpdate": function(params) {
        this.int32(-1000708810);
      },
      "help.inviteText": function(params) {
        this.int32(415997816);
        this.string(params.message);
      },
      "updateNewEncryptedMessage": function(params) {
        this.int32(314359194);
        this.predicate(params.message);
        this.int(params.qts);
      },
      "updateEncryptedChatTyping": function(params) {
        this.int32(386986326);
        this.int(params.chat_id);
      },
      "updateEncryption": function(params) {
        this.int32(-1264392051);
        this.predicate(params.chat);
        this.int(params.date);
      },
      "updateEncryptedMessagesRead": function(params) {
        this.int32(956179895);
        this.int(params.chat_id);
        this.int(params.max_date);
        this.int(params.date);
      },
      "encryptedChatEmpty": function(params) {
        this.int32(-1417756512);
        this.int(params.id);
      },
      "encryptedChatWaiting": function(params) {
        this.int32(1722964307);
        this.int(params.id);
        this.long(params.access_hash);
        this.int(params.date);
        this.long(params.admin_id);
        this.long(params.participant_id);
      },
      "encryptedChatRequested": function(params) {
        this.int32(1223809356);
        const flags = this.has(params.folder_id) << 0;
        this.int32(flags);
        this.flag(this.int, params.folder_id);
        this.int(params.id);
        this.long(params.access_hash);
        this.int(params.date);
        this.long(params.admin_id);
        this.long(params.participant_id);
        this.bytes(params.g_a);
      },
      "encryptedChat": function(params) {
        this.int32(1643173063);
        this.int(params.id);
        this.long(params.access_hash);
        this.int(params.date);
        this.long(params.admin_id);
        this.long(params.participant_id);
        this.bytes(params.g_a_or_b);
        this.long(params.key_fingerprint);
      },
      "encryptedChatDiscarded": function(params) {
        this.int32(505183301);
        const flags = this.has(params.history_deleted) << 0;
        this.int32(flags);
        this.int(params.id);
      },
      "inputEncryptedChat": function(params) {
        this.int32(-247351839);
        this.int(params.chat_id);
        this.long(params.access_hash);
      },
      "encryptedFileEmpty": function(params) {
        this.int32(-1038136962);
      },
      "encryptedFile": function(params) {
        this.int32(-1476358952);
        this.long(params.id);
        this.long(params.access_hash);
        this.long(params.size);
        this.int(params.dc_id);
        this.int(params.key_fingerprint);
      },
      "inputEncryptedFileEmpty": function(params) {
        this.int32(406307684);
      },
      "inputEncryptedFileUploaded": function(params) {
        this.int32(1690108678);
        this.long(params.id);
        this.int(params.parts);
        this.string(params.md5_checksum);
        this.int(params.key_fingerprint);
      },
      "inputEncryptedFile": function(params) {
        this.int32(1511503333);
        this.long(params.id);
        this.long(params.access_hash);
      },
      "inputEncryptedFileLocation": function(params) {
        this.int32(-182231723);
        this.long(params.id);
        this.long(params.access_hash);
      },
      "encryptedMessage": function(params) {
        this.int32(-317144808);
        this.long(params.random_id);
        this.int(params.chat_id);
        this.int(params.date);
        this.bytes(params.bytes);
        this.predicate(params.file);
      },
      "encryptedMessageService": function(params) {
        this.int32(594758406);
        this.long(params.random_id);
        this.int(params.chat_id);
        this.int(params.date);
        this.bytes(params.bytes);
      },
      "messages.dhConfigNotModified": function(params) {
        this.int32(-1058912715);
        this.bytes(params.random);
      },
      "messages.dhConfig": function(params) {
        this.int32(740433629);
        this.int(params.g);
        this.bytes(params.p);
        this.int(params.version);
        this.bytes(params.random);
      },
      "messages.sentEncryptedMessage": function(params) {
        this.int32(1443858741);
        this.int(params.date);
      },
      "messages.sentEncryptedFile": function(params) {
        this.int32(-1802240206);
        this.int(params.date);
        this.predicate(params.file);
      },
      "inputFileBig": function(params) {
        this.int32(-95482955);
        this.long(params.id);
        this.int(params.parts);
        this.string(params.name);
      },
      "inputEncryptedFileBigUploaded": function(params) {
        this.int32(767652808);
        this.long(params.id);
        this.int(params.parts);
        this.int(params.key_fingerprint);
      },
      "updateChatParticipantAdd": function(params) {
        this.int32(1037718609);
        this.long(params.chat_id);
        this.long(params.user_id);
        this.long(params.inviter_id);
        this.int(params.date);
        this.int(params.version);
      },
      "updateChatParticipantDelete": function(params) {
        this.int32(-483443337);
        this.long(params.chat_id);
        this.long(params.user_id);
        this.int(params.version);
      },
      "updateDcOptions": function(params) {
        this.int32(-1906403213);
        this.vector(this.predicate, params.dc_options);
      },
      "inputMediaUploadedDocument": function(params) {
        this.int32(1530447553);
        const flags = this.has(params.nosound_video) << 3 | this.has(params.force_file) << 4 | this.has(params.spoiler) << 5 | this.has(params.thumb) << 2 | this.has(params.stickers) << 0 | this.has(params.ttl_seconds) << 1;
        this.int32(flags);
        this.predicate(params.file);
        this.flag(this.predicate, params.thumb);
        this.string(params.mime_type);
        this.vector(this.predicate, params.attributes);
        this.flagVector(this.predicate, params.stickers);
        this.flag(this.int, params.ttl_seconds);
      },
      "inputMediaDocument": function(params) {
        this.int32(860303448);
        const flags = this.has(params.spoiler) << 2 | this.has(params.ttl_seconds) << 0 | this.has(params.query) << 1;
        this.int32(flags);
        this.predicate(params.id);
        this.flag(this.int, params.ttl_seconds);
        this.flag(this.string, params.query);
      },
      "messageMediaDocument": function(params) {
        this.int32(-1666158377);
        const flags = this.has(params.nopremium) << 3 | this.has(params.spoiler) << 4 | this.has(params.document) << 0 | this.has(params.ttl_seconds) << 2;
        this.int32(flags);
        this.flag(this.predicate, params.document);
        this.flag(this.int, params.ttl_seconds);
      },
      "inputDocumentEmpty": function(params) {
        this.int32(1928391342);
      },
      "inputDocument": function(params) {
        this.int32(448771445);
        this.long(params.id);
        this.long(params.access_hash);
        this.bytes(params.file_reference);
      },
      "inputDocumentFileLocation": function(params) {
        this.int32(-1160743548);
        this.long(params.id);
        this.long(params.access_hash);
        this.bytes(params.file_reference);
        this.string(params.thumb_size);
      },
      "documentEmpty": function(params) {
        this.int32(922273905);
        this.long(params.id);
      },
      "document": function(params) {
        this.int32(-1881881384);
        const flags = this.has(params.thumbs) << 0 | this.has(params.video_thumbs) << 1;
        this.int32(flags);
        this.long(params.id);
        this.long(params.access_hash);
        this.bytes(params.file_reference);
        this.int(params.date);
        this.string(params.mime_type);
        this.long(params.size);
        this.flagVector(this.predicate, params.thumbs);
        this.flagVector(this.predicate, params.video_thumbs);
        this.int(params.dc_id);
        this.vector(this.predicate, params.attributes);
      },
      "help.support": function(params) {
        this.int32(398898678);
        this.string(params.phone_number);
        this.predicate(params.user);
      },
      "notifyPeer": function(params) {
        this.int32(-1613493288);
        this.predicate(params.peer);
      },
      "notifyUsers": function(params) {
        this.int32(-1261946036);
      },
      "notifyChats": function(params) {
        this.int32(-1073230141);
      },
      "updateNotifySettings": function(params) {
        this.int32(-1094555409);
        this.predicate(params.peer);
        this.predicate(params.notify_settings);
      },
      "sendMessageTypingAction": function(params) {
        this.int32(381645902);
      },
      "sendMessageCancelAction": function(params) {
        this.int32(-44119819);
      },
      "sendMessageRecordVideoAction": function(params) {
        this.int32(-1584933265);
      },
      "sendMessageUploadVideoAction": function(params) {
        this.int32(-378127636);
        this.int(params.progress);
      },
      "sendMessageRecordAudioAction": function(params) {
        this.int32(-718310409);
      },
      "sendMessageUploadAudioAction": function(params) {
        this.int32(-212740181);
        this.int(params.progress);
      },
      "sendMessageUploadPhotoAction": function(params) {
        this.int32(-774682074);
        this.int(params.progress);
      },
      "sendMessageUploadDocumentAction": function(params) {
        this.int32(-1441998364);
        this.int(params.progress);
      },
      "sendMessageGeoLocationAction": function(params) {
        this.int32(393186209);
      },
      "sendMessageChooseContactAction": function(params) {
        this.int32(1653390447);
      },
      "contacts.found": function(params) {
        this.int32(-1290580579);
        this.vector(this.predicate, params.my_results);
        this.vector(this.predicate, params.results);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "updateServiceNotification": function(params) {
        this.int32(-337352679);
        const flags = this.has(params.popup) << 0 | this.has(params.inbox_date) << 1;
        this.int32(flags);
        this.flag(this.int, params.inbox_date);
        this.string(params.type);
        this.string(params.message);
        this.predicate(params.media);
        this.vector(this.predicate, params.entities);
      },
      "userStatusRecently": function(params) {
        this.int32(-496024847);
      },
      "userStatusLastWeek": function(params) {
        this.int32(129960444);
      },
      "userStatusLastMonth": function(params) {
        this.int32(2011940674);
      },
      "updatePrivacy": function(params) {
        this.int32(-298113238);
        this.predicate(params.key);
        this.vector(this.predicate, params.rules);
      },
      "inputPrivacyKeyStatusTimestamp": function(params) {
        this.int32(1335282456);
      },
      "privacyKeyStatusTimestamp": function(params) {
        this.int32(-1137792208);
      },
      "inputPrivacyValueAllowContacts": function(params) {
        this.int32(218751099);
      },
      "inputPrivacyValueAllowAll": function(params) {
        this.int32(407582158);
      },
      "inputPrivacyValueAllowUsers": function(params) {
        this.int32(320652927);
        this.vector(this.predicate, params.users);
      },
      "inputPrivacyValueDisallowContacts": function(params) {
        this.int32(195371015);
      },
      "inputPrivacyValueDisallowAll": function(params) {
        this.int32(-697604407);
      },
      "inputPrivacyValueDisallowUsers": function(params) {
        this.int32(-1877932953);
        this.vector(this.predicate, params.users);
      },
      "privacyValueAllowContacts": function(params) {
        this.int32(-123988);
      },
      "privacyValueAllowAll": function(params) {
        this.int32(1698855810);
      },
      "privacyValueAllowUsers": function(params) {
        this.int32(-1198497870);
        this.vector(this.long, params.users);
      },
      "privacyValueDisallowContacts": function(params) {
        this.int32(-125240806);
      },
      "privacyValueDisallowAll": function(params) {
        this.int32(-1955338397);
      },
      "privacyValueDisallowUsers": function(params) {
        this.int32(-463335103);
        this.vector(this.long, params.users);
      },
      "account.privacyRules": function(params) {
        this.int32(1352683077);
        this.vector(this.predicate, params.rules);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "accountDaysTTL": function(params) {
        this.int32(-1194283041);
        this.int(params.days);
      },
      "updateUserPhone": function(params) {
        this.int32(88680979);
        this.long(params.user_id);
        this.string(params.phone);
      },
      "documentAttributeImageSize": function(params) {
        this.int32(1815593308);
        this.int(params.w);
        this.int(params.h);
      },
      "documentAttributeAnimated": function(params) {
        this.int32(297109817);
      },
      "documentAttributeSticker": function(params) {
        this.int32(1662637586);
        const flags = this.has(params.mask) << 1 | this.has(params.mask_coords) << 0;
        this.int32(flags);
        this.string(params.alt);
        this.predicate(params.stickerset);
        this.flag(this.predicate, params.mask_coords);
      },
      "documentAttributeVideo": function(params) {
        this.int32(250621158);
        const flags = this.has(params.round_message) << 0 | this.has(params.supports_streaming) << 1;
        this.int32(flags);
        this.int(params.duration);
        this.int(params.w);
        this.int(params.h);
      },
      "documentAttributeAudio": function(params) {
        this.int32(-1739392570);
        const flags = this.has(params.voice) << 10 | this.has(params.title) << 0 | this.has(params.performer) << 1 | this.has(params.waveform) << 2;
        this.int32(flags);
        this.int(params.duration);
        this.flag(this.string, params.title);
        this.flag(this.string, params.performer);
        this.flag(this.bytes, params.waveform);
      },
      "documentAttributeFilename": function(params) {
        this.int32(358154344);
        this.string(params.file_name);
      },
      "messages.stickersNotModified": function(params) {
        this.int32(-244016606);
      },
      "messages.stickers": function(params) {
        this.int32(816245886);
        this.long(params.hash);
        this.vector(this.predicate, params.stickers);
      },
      "stickerPack": function(params) {
        this.int32(313694676);
        this.string(params.emoticon);
        this.vector(this.long, params.documents);
      },
      "messages.allStickersNotModified": function(params) {
        this.int32(-395967805);
      },
      "messages.allStickers": function(params) {
        this.int32(-843329861);
        this.long(params.hash);
        this.vector(this.predicate, params.sets);
      },
      "updateReadHistoryInbox": function(params) {
        this.int32(-1667805217);
        const flags = this.has(params.folder_id) << 0;
        this.int32(flags);
        this.flag(this.int, params.folder_id);
        this.predicate(params.peer);
        this.int(params.max_id);
        this.int(params.still_unread_count);
        this.int(params.pts);
        this.int(params.pts_count);
      },
      "updateReadHistoryOutbox": function(params) {
        this.int32(791617983);
        this.predicate(params.peer);
        this.int(params.max_id);
        this.int(params.pts);
        this.int(params.pts_count);
      },
      "messages.affectedMessages": function(params) {
        this.int32(-2066640507);
        this.int(params.pts);
        this.int(params.pts_count);
      },
      "updateWebPage": function(params) {
        this.int32(2139689491);
        this.predicate(params.webpage);
        this.int(params.pts);
        this.int(params.pts_count);
      },
      "webPageEmpty": function(params) {
        this.int32(-350980120);
        this.long(params.id);
      },
      "webPagePending": function(params) {
        this.int32(-981018084);
        this.long(params.id);
        this.int(params.date);
      },
      "webPage": function(params) {
        this.int32(-392411726);
        const flags = this.has(params.type) << 0 | this.has(params.site_name) << 1 | this.has(params.title) << 2 | this.has(params.description) << 3 | this.has(params.photo) << 4 | this.has(params.embed_url) << 5 | this.has(params.embed_type) << 5 | this.has(params.embed_width) << 6 | this.has(params.embed_height) << 6 | this.has(params.duration) << 7 | this.has(params.author) << 8 | this.has(params.document) << 9 | this.has(params.cached_page) << 10 | this.has(params.attributes) << 12;
        this.int32(flags);
        this.long(params.id);
        this.string(params.url);
        this.string(params.display_url);
        this.int(params.hash);
        this.flag(this.string, params.type);
        this.flag(this.string, params.site_name);
        this.flag(this.string, params.title);
        this.flag(this.string, params.description);
        this.flag(this.predicate, params.photo);
        this.flag(this.string, params.embed_url);
        this.flag(this.string, params.embed_type);
        this.flag(this.int, params.embed_width);
        this.flag(this.int, params.embed_height);
        this.flag(this.int, params.duration);
        this.flag(this.string, params.author);
        this.flag(this.predicate, params.document);
        this.flag(this.predicate, params.cached_page);
        this.flagVector(this.predicate, params.attributes);
      },
      "messageMediaWebPage": function(params) {
        this.int32(-1557277184);
        this.predicate(params.webpage);
      },
      "authorization": function(params) {
        this.int32(-1392388579);
        const flags = this.has(params.current) << 0 | this.has(params.official_app) << 1 | this.has(params.password_pending) << 2 | this.has(params.encrypted_requests_disabled) << 3 | this.has(params.call_requests_disabled) << 4;
        this.int32(flags);
        this.long(params.hash);
        this.string(params.device_model);
        this.string(params.platform);
        this.string(params.system_version);
        this.int(params.api_id);
        this.string(params.app_name);
        this.string(params.app_version);
        this.int(params.date_created);
        this.int(params.date_active);
        this.string(params.ip);
        this.string(params.country);
        this.string(params.region);
      },
      "account.authorizations": function(params) {
        this.int32(1275039392);
        this.int(params.authorization_ttl_days);
        this.vector(this.predicate, params.authorizations);
      },
      "account.password": function(params) {
        this.int32(-1787080453);
        const flags = this.has(params.has_recovery) << 0 | this.has(params.has_secure_values) << 1 | this.has(params.has_password) << 2 | this.has(params.current_algo) << 2 | this.has(params.srp_B) << 2 | this.has(params.srp_id) << 2 | this.has(params.hint) << 3 | this.has(params.email_unconfirmed_pattern) << 4 | this.has(params.pending_reset_date) << 5 | this.has(params.login_email_pattern) << 6;
        this.int32(flags);
        this.flag(this.predicate, params.current_algo);
        this.flag(this.bytes, params.srp_B);
        this.flag(this.long, params.srp_id);
        this.flag(this.string, params.hint);
        this.flag(this.string, params.email_unconfirmed_pattern);
        this.predicate(params.new_algo);
        this.predicate(params.new_secure_algo);
        this.bytes(params.secure_random);
        this.flag(this.int, params.pending_reset_date);
        this.flag(this.string, params.login_email_pattern);
      },
      "account.passwordSettings": function(params) {
        this.int32(-1705233435);
        const flags = this.has(params.email) << 0 | this.has(params.secure_settings) << 1;
        this.int32(flags);
        this.flag(this.string, params.email);
        this.flag(this.predicate, params.secure_settings);
      },
      "account.passwordInputSettings": function(params) {
        this.int32(-1036572727);
        const flags = this.has(params.new_algo) << 0 | this.has(params.new_password_hash) << 0 | this.has(params.hint) << 0 | this.has(params.email) << 1 | this.has(params.new_secure_settings) << 2;
        this.int32(flags);
        this.flag(this.predicate, params.new_algo);
        this.flag(this.bytes, params.new_password_hash);
        this.flag(this.string, params.hint);
        this.flag(this.string, params.email);
        this.flag(this.predicate, params.new_secure_settings);
      },
      "auth.passwordRecovery": function(params) {
        this.int32(326715557);
        this.string(params.email_pattern);
      },
      "inputMediaVenue": function(params) {
        this.int32(-1052959727);
        this.predicate(params.geo_point);
        this.string(params.title);
        this.string(params.address);
        this.string(params.provider);
        this.string(params.venue_id);
        this.string(params.venue_type);
      },
      "messageMediaVenue": function(params) {
        this.int32(784356159);
        this.predicate(params.geo);
        this.string(params.title);
        this.string(params.address);
        this.string(params.provider);
        this.string(params.venue_id);
        this.string(params.venue_type);
      },
      "receivedNotifyMessage": function(params) {
        this.int32(-1551583367);
        this.int(params.id);
        this.int(params.flags);
      },
      "chatInviteExported": function(params) {
        this.int32(179611673);
        const flags = this.has(params.revoked) << 0 | this.has(params.permanent) << 5 | this.has(params.request_needed) << 6 | this.has(params.start_date) << 4 | this.has(params.expire_date) << 1 | this.has(params.usage_limit) << 2 | this.has(params.usage) << 3 | this.has(params.requested) << 7 | this.has(params.title) << 8;
        this.int32(flags);
        this.string(params.link);
        this.long(params.admin_id);
        this.int(params.date);
        this.flag(this.int, params.start_date);
        this.flag(this.int, params.expire_date);
        this.flag(this.int, params.usage_limit);
        this.flag(this.int, params.usage);
        this.flag(this.int, params.requested);
        this.flag(this.string, params.title);
      },
      "chatInviteAlready": function(params) {
        this.int32(1516793212);
        this.predicate(params.chat);
      },
      "chatInvite": function(params) {
        this.int32(806110401);
        const flags = this.has(params.channel) << 0 | this.has(params.broadcast) << 1 | this.has(params.public) << 2 | this.has(params.megagroup) << 3 | this.has(params.request_needed) << 6 | this.has(params.about) << 5 | this.has(params.participants) << 4;
        this.int32(flags);
        this.string(params.title);
        this.flag(this.string, params.about);
        this.predicate(params.photo);
        this.int(params.participants_count);
        this.flagVector(this.predicate, params.participants);
      },
      "messageActionChatJoinedByLink": function(params) {
        this.int32(51520707);
        this.long(params.inviter_id);
      },
      "updateReadMessagesContents": function(params) {
        this.int32(1757493555);
        this.vector(this.int, params.messages);
        this.int(params.pts);
        this.int(params.pts_count);
      },
      "inputStickerSetEmpty": function(params) {
        this.int32(-4838507);
      },
      "inputStickerSetID": function(params) {
        this.int32(-1645763991);
        this.long(params.id);
        this.long(params.access_hash);
      },
      "inputStickerSetShortName": function(params) {
        this.int32(-2044933984);
        this.string(params.short_name);
      },
      "stickerSet": function(params) {
        this.int32(768691932);
        const flags = this.has(params.archived) << 1 | this.has(params.official) << 2 | this.has(params.masks) << 3 | this.has(params.animated) << 5 | this.has(params.videos) << 6 | this.has(params.emojis) << 7 | this.has(params.installed_date) << 0 | this.has(params.thumbs) << 4 | this.has(params.thumb_dc_id) << 4 | this.has(params.thumb_version) << 4 | this.has(params.thumb_document_id) << 8;
        this.int32(flags);
        this.flag(this.int, params.installed_date);
        this.long(params.id);
        this.long(params.access_hash);
        this.string(params.title);
        this.string(params.short_name);
        this.flagVector(this.predicate, params.thumbs);
        this.flag(this.int, params.thumb_dc_id);
        this.flag(this.int, params.thumb_version);
        this.flag(this.long, params.thumb_document_id);
        this.int(params.count);
        this.int(params.hash);
      },
      "messages.stickerSet": function(params) {
        this.int32(1846886166);
        this.predicate(params.set);
        this.vector(this.predicate, params.packs);
        this.vector(this.predicate, params.keywords);
        this.vector(this.predicate, params.documents);
      },
      "user": function(params) {
        this.int32(-1885878744);
        const flags = this.has(params.self) << 10 | this.has(params.contact) << 11 | this.has(params.mutual_contact) << 12 | this.has(params.deleted) << 13 | this.has(params.bot) << 14 | this.has(params.bot_chat_history) << 15 | this.has(params.bot_nochats) << 16 | this.has(params.verified) << 17 | this.has(params.restricted) << 18 | this.has(params.min) << 20 | this.has(params.bot_inline_geo) << 21 | this.has(params.support) << 23 | this.has(params.scam) << 24 | this.has(params.apply_min_photo) << 25 | this.has(params.fake) << 26 | this.has(params.bot_attach_menu) << 27 | this.has(params.premium) << 28 | this.has(params.attach_menu_enabled) << 29 | this.has(params.access_hash) << 0 | this.has(params.first_name) << 1 | this.has(params.last_name) << 2 | this.has(params.username) << 3 | this.has(params.phone) << 4 | this.has(params.photo) << 5 | this.has(params.status) << 6 | this.has(params.bot_info_version) << 14 | this.has(params.restriction_reason) << 18 | this.has(params.bot_inline_placeholder) << 19 | this.has(params.lang_code) << 22 | this.has(params.emoji_status) << 30;
        this.int32(flags);
        const flags2 = this.has(params.bot_can_edit) << 1 | this.has(params.usernames) << 0;
        this.int32(flags2);
        this.long(params.id);
        this.flag(this.long, params.access_hash);
        this.flag(this.string, params.first_name);
        this.flag(this.string, params.last_name);
        this.flag(this.string, params.username);
        this.flag(this.string, params.phone);
        this.flag(this.predicate, params.photo);
        this.flag(this.predicate, params.status);
        this.flag(this.int, params.bot_info_version);
        this.flagVector(this.predicate, params.restriction_reason);
        this.flag(this.string, params.bot_inline_placeholder);
        this.flag(this.string, params.lang_code);
        this.flag(this.predicate, params.emoji_status);
        this.flagVector(this.predicate, params.usernames);
      },
      "botCommand": function(params) {
        this.int32(-1032140601);
        this.string(params.command);
        this.string(params.description);
      },
      "botInfo": function(params) {
        this.int32(-1892676777);
        const flags = this.has(params.user_id) << 0 | this.has(params.description) << 1 | this.has(params.description_photo) << 4 | this.has(params.description_document) << 5 | this.has(params.commands) << 2 | this.has(params.menu_button) << 3;
        this.int32(flags);
        this.flag(this.long, params.user_id);
        this.flag(this.string, params.description);
        this.flag(this.predicate, params.description_photo);
        this.flag(this.predicate, params.description_document);
        this.flagVector(this.predicate, params.commands);
        this.flag(this.predicate, params.menu_button);
      },
      "keyboardButton": function(params) {
        this.int32(-1560655744);
        this.string(params.text);
      },
      "keyboardButtonRow": function(params) {
        this.int32(2002815875);
        this.vector(this.predicate, params.buttons);
      },
      "replyKeyboardHide": function(params) {
        this.int32(-1606526075);
        const flags = this.has(params.selective) << 2;
        this.int32(flags);
      },
      "replyKeyboardForceReply": function(params) {
        this.int32(-2035021048);
        const flags = this.has(params.single_use) << 1 | this.has(params.selective) << 2 | this.has(params.placeholder) << 3;
        this.int32(flags);
        this.flag(this.string, params.placeholder);
      },
      "replyKeyboardMarkup": function(params) {
        this.int32(-2049074735);
        const flags = this.has(params.resize) << 0 | this.has(params.single_use) << 1 | this.has(params.selective) << 2 | this.has(params.persistent) << 4 | this.has(params.placeholder) << 3;
        this.int32(flags);
        this.vector(this.predicate, params.rows);
        this.flag(this.string, params.placeholder);
      },
      "inputPeerUser": function(params) {
        this.int32(-571955892);
        this.long(params.user_id);
        this.long(params.access_hash);
      },
      "inputUser": function(params) {
        this.int32(-233744186);
        this.long(params.user_id);
        this.long(params.access_hash);
      },
      "messageEntityUnknown": function(params) {
        this.int32(-1148011883);
        this.int(params.offset);
        this.int(params.length);
      },
      "messageEntityMention": function(params) {
        this.int32(-100378723);
        this.int(params.offset);
        this.int(params.length);
      },
      "messageEntityHashtag": function(params) {
        this.int32(1868782349);
        this.int(params.offset);
        this.int(params.length);
      },
      "messageEntityBotCommand": function(params) {
        this.int32(1827637959);
        this.int(params.offset);
        this.int(params.length);
      },
      "messageEntityUrl": function(params) {
        this.int32(1859134776);
        this.int(params.offset);
        this.int(params.length);
      },
      "messageEntityEmail": function(params) {
        this.int32(1692693954);
        this.int(params.offset);
        this.int(params.length);
      },
      "messageEntityBold": function(params) {
        this.int32(-1117713463);
        this.int(params.offset);
        this.int(params.length);
      },
      "messageEntityItalic": function(params) {
        this.int32(-2106619040);
        this.int(params.offset);
        this.int(params.length);
      },
      "messageEntityCode": function(params) {
        this.int32(681706865);
        this.int(params.offset);
        this.int(params.length);
      },
      "messageEntityPre": function(params) {
        this.int32(1938967520);
        this.int(params.offset);
        this.int(params.length);
        this.string(params.language);
      },
      "messageEntityTextUrl": function(params) {
        this.int32(1990644519);
        this.int(params.offset);
        this.int(params.length);
        this.string(params.url);
      },
      "updateShortSentMessage": function(params) {
        this.int32(-1877614335);
        const flags = this.has(params.out) << 1 | this.has(params.media) << 9 | this.has(params.entities) << 7 | this.has(params.ttl_period) << 25;
        this.int32(flags);
        this.int(params.id);
        this.int(params.pts);
        this.int(params.pts_count);
        this.int(params.date);
        this.flag(this.predicate, params.media);
        this.flagVector(this.predicate, params.entities);
        this.flag(this.int, params.ttl_period);
      },
      "inputChannelEmpty": function(params) {
        this.int32(-292807034);
      },
      "inputChannel": function(params) {
        this.int32(-212145112);
        this.long(params.channel_id);
        this.long(params.access_hash);
      },
      "peerChannel": function(params) {
        this.int32(-1566230754);
        this.long(params.channel_id);
      },
      "inputPeerChannel": function(params) {
        this.int32(666680316);
        this.long(params.channel_id);
        this.long(params.access_hash);
      },
      "channel": function(params) {
        this.int32(-2094689180);
        const flags = this.has(params.creator) << 0 | this.has(params.left) << 2 | this.has(params.broadcast) << 5 | this.has(params.verified) << 7 | this.has(params.megagroup) << 8 | this.has(params.restricted) << 9 | this.has(params.signatures) << 11 | this.has(params.min) << 12 | this.has(params.scam) << 19 | this.has(params.has_link) << 20 | this.has(params.has_geo) << 21 | this.has(params.slowmode_enabled) << 22 | this.has(params.call_active) << 23 | this.has(params.call_not_empty) << 24 | this.has(params.fake) << 25 | this.has(params.gigagroup) << 26 | this.has(params.noforwards) << 27 | this.has(params.join_to_send) << 28 | this.has(params.join_request) << 29 | this.has(params.forum) << 30 | this.has(params.access_hash) << 13 | this.has(params.username) << 6 | this.has(params.restriction_reason) << 9 | this.has(params.admin_rights) << 14 | this.has(params.banned_rights) << 15 | this.has(params.default_banned_rights) << 18 | this.has(params.participants_count) << 17;
        this.int32(flags);
        const flags2 = this.has(params.usernames) << 0;
        this.int32(flags2);
        this.long(params.id);
        this.flag(this.long, params.access_hash);
        this.string(params.title);
        this.flag(this.string, params.username);
        this.predicate(params.photo);
        this.int(params.date);
        this.flagVector(this.predicate, params.restriction_reason);
        this.flag(this.predicate, params.admin_rights);
        this.flag(this.predicate, params.banned_rights);
        this.flag(this.predicate, params.default_banned_rights);
        this.flag(this.int, params.participants_count);
        this.flagVector(this.predicate, params.usernames);
      },
      "channelForbidden": function(params) {
        this.int32(399807445);
        const flags = this.has(params.broadcast) << 5 | this.has(params.megagroup) << 8 | this.has(params.until_date) << 16;
        this.int32(flags);
        this.long(params.id);
        this.long(params.access_hash);
        this.string(params.title);
        this.flag(this.int, params.until_date);
      },
      "contacts.resolvedPeer": function(params) {
        this.int32(2131196633);
        this.predicate(params.peer);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "channelFull": function(params) {
        this.int32(-231385849);
        const flags = this.has(params.can_view_participants) << 3 | this.has(params.can_set_username) << 6 | this.has(params.can_set_stickers) << 7 | this.has(params.hidden_prehistory) << 10 | this.has(params.can_set_location) << 16 | this.has(params.has_scheduled) << 19 | this.has(params.can_view_stats) << 20 | this.has(params.blocked) << 22 | this.has(params.participants_count) << 0 | this.has(params.admins_count) << 1 | this.has(params.kicked_count) << 2 | this.has(params.banned_count) << 2 | this.has(params.online_count) << 13 | this.has(params.exported_invite) << 23 | this.has(params.migrated_from_chat_id) << 4 | this.has(params.migrated_from_max_id) << 4 | this.has(params.pinned_msg_id) << 5 | this.has(params.stickerset) << 8 | this.has(params.available_min_id) << 9 | this.has(params.folder_id) << 11 | this.has(params.linked_chat_id) << 14 | this.has(params.location) << 15 | this.has(params.slowmode_seconds) << 17 | this.has(params.slowmode_next_send_date) << 18 | this.has(params.stats_dc) << 12 | this.has(params.call) << 21 | this.has(params.ttl_period) << 24 | this.has(params.pending_suggestions) << 25 | this.has(params.groupcall_default_join_as) << 26 | this.has(params.theme_emoticon) << 27 | this.has(params.requests_pending) << 28 | this.has(params.recent_requesters) << 28 | this.has(params.default_send_as) << 29 | this.has(params.available_reactions) << 30;
        this.int32(flags);
        const flags2 = this.has(params.can_delete_channel) << 0 | this.has(params.antispam) << 1 | this.has(params.participants_hidden) << 2 | this.has(params.translations_disabled) << 3;
        this.int32(flags2);
        this.long(params.id);
        this.string(params.about);
        this.flag(this.int, params.participants_count);
        this.flag(this.int, params.admins_count);
        this.flag(this.int, params.kicked_count);
        this.flag(this.int, params.banned_count);
        this.flag(this.int, params.online_count);
        this.int(params.read_inbox_max_id);
        this.int(params.read_outbox_max_id);
        this.int(params.unread_count);
        this.predicate(params.chat_photo);
        this.predicate(params.notify_settings);
        this.flag(this.predicate, params.exported_invite);
        this.vector(this.predicate, params.bot_info);
        this.flag(this.long, params.migrated_from_chat_id);
        this.flag(this.int, params.migrated_from_max_id);
        this.flag(this.int, params.pinned_msg_id);
        this.flag(this.predicate, params.stickerset);
        this.flag(this.int, params.available_min_id);
        this.flag(this.int, params.folder_id);
        this.flag(this.long, params.linked_chat_id);
        this.flag(this.predicate, params.location);
        this.flag(this.int, params.slowmode_seconds);
        this.flag(this.int, params.slowmode_next_send_date);
        this.flag(this.int, params.stats_dc);
        this.int(params.pts);
        this.flag(this.predicate, params.call);
        this.flag(this.int, params.ttl_period);
        this.flagVector(this.string, params.pending_suggestions);
        this.flag(this.predicate, params.groupcall_default_join_as);
        this.flag(this.string, params.theme_emoticon);
        this.flag(this.int, params.requests_pending);
        this.flagVector(this.long, params.recent_requesters);
        this.flag(this.predicate, params.default_send_as);
        this.flag(this.predicate, params.available_reactions);
      },
      "messageRange": function(params) {
        this.int32(182649427);
        this.int(params.min_id);
        this.int(params.max_id);
      },
      "messages.channelMessages": function(params) {
        this.int32(-948520370);
        const flags = this.has(params.inexact) << 1 | this.has(params.offset_id_offset) << 2;
        this.int32(flags);
        this.int(params.pts);
        this.int(params.count);
        this.flag(this.int, params.offset_id_offset);
        this.vector(this.predicate, params.messages);
        this.vector(this.predicate, params.topics);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "messageActionChannelCreate": function(params) {
        this.int32(-1781355374);
        this.string(params.title);
      },
      "updateChannelTooLong": function(params) {
        this.int32(277713951);
        const flags = this.has(params.pts) << 0;
        this.int32(flags);
        this.long(params.channel_id);
        this.flag(this.int, params.pts);
      },
      "updateChannel": function(params) {
        this.int32(1666927625);
        this.long(params.channel_id);
      },
      "updateNewChannelMessage": function(params) {
        this.int32(1656358105);
        this.predicate(params.message);
        this.int(params.pts);
        this.int(params.pts_count);
      },
      "updateReadChannelInbox": function(params) {
        this.int32(-1842450928);
        const flags = this.has(params.folder_id) << 0;
        this.int32(flags);
        this.flag(this.int, params.folder_id);
        this.long(params.channel_id);
        this.int(params.max_id);
        this.int(params.still_unread_count);
        this.int(params.pts);
      },
      "updateDeleteChannelMessages": function(params) {
        this.int32(-1020437742);
        this.long(params.channel_id);
        this.vector(this.int, params.messages);
        this.int(params.pts);
        this.int(params.pts_count);
      },
      "updateChannelMessageViews": function(params) {
        this.int32(-232346616);
        this.long(params.channel_id);
        this.int(params.id);
        this.int(params.views);
      },
      "updates.channelDifferenceEmpty": function(params) {
        this.int32(1041346555);
        const flags = this.has(params.final) << 0 | this.has(params.timeout) << 1;
        this.int32(flags);
        this.int(params.pts);
        this.flag(this.int, params.timeout);
      },
      "updates.channelDifferenceTooLong": function(params) {
        this.int32(-1531132162);
        const flags = this.has(params.final) << 0 | this.has(params.timeout) << 1;
        this.int32(flags);
        this.flag(this.int, params.timeout);
        this.predicate(params.dialog);
        this.vector(this.predicate, params.messages);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "updates.channelDifference": function(params) {
        this.int32(543450958);
        const flags = this.has(params.final) << 0 | this.has(params.timeout) << 1;
        this.int32(flags);
        this.int(params.pts);
        this.flag(this.int, params.timeout);
        this.vector(this.predicate, params.new_messages);
        this.vector(this.predicate, params.other_updates);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "channelMessagesFilterEmpty": function(params) {
        this.int32(-1798033689);
      },
      "channelMessagesFilter": function(params) {
        this.int32(-847783593);
        const flags = this.has(params.exclude_new_messages) << 1;
        this.int32(flags);
        this.vector(this.predicate, params.ranges);
      },
      "channelParticipant": function(params) {
        this.int32(-1072953408);
        this.long(params.user_id);
        this.int(params.date);
      },
      "channelParticipantSelf": function(params) {
        this.int32(900251559);
        const flags = this.has(params.via_request) << 0;
        this.int32(flags);
        this.long(params.user_id);
        this.long(params.inviter_id);
        this.int(params.date);
      },
      "channelParticipantCreator": function(params) {
        this.int32(803602899);
        const flags = this.has(params.rank) << 0;
        this.int32(flags);
        this.long(params.user_id);
        this.predicate(params.admin_rights);
        this.flag(this.string, params.rank);
      },
      "channelParticipantsRecent": function(params) {
        this.int32(-566281095);
      },
      "channelParticipantsAdmins": function(params) {
        this.int32(-1268741783);
      },
      "channelParticipantsKicked": function(params) {
        this.int32(-1548400251);
        this.string(params.q);
      },
      "channels.channelParticipants": function(params) {
        this.int32(-1699676497);
        this.int(params.count);
        this.vector(this.predicate, params.participants);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "channels.channelParticipant": function(params) {
        this.int32(-541588713);
        this.predicate(params.participant);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "chatParticipantCreator": function(params) {
        this.int32(-462696732);
        this.long(params.user_id);
      },
      "chatParticipantAdmin": function(params) {
        this.int32(-1600962725);
        this.long(params.user_id);
        this.long(params.inviter_id);
        this.int(params.date);
      },
      "updateChatParticipantAdmin": function(params) {
        this.int32(-674602590);
        this.long(params.chat_id);
        this.long(params.user_id);
        this.Bool(params.is_admin);
        this.int(params.version);
      },
      "messageActionChatMigrateTo": function(params) {
        this.int32(-519864430);
        this.long(params.channel_id);
      },
      "messageActionChannelMigrateFrom": function(params) {
        this.int32(-365344535);
        this.string(params.title);
        this.long(params.chat_id);
      },
      "channelParticipantsBots": function(params) {
        this.int32(-1328445861);
      },
      "help.termsOfService": function(params) {
        this.int32(2013922064);
        const flags = this.has(params.popup) << 0 | this.has(params.min_age_confirm) << 1;
        this.int32(flags);
        this.predicate(params.id);
        this.string(params.text);
        this.vector(this.predicate, params.entities);
        this.flag(this.int, params.min_age_confirm);
      },
      "updateNewStickerSet": function(params) {
        this.int32(1753886890);
        this.predicate(params.stickerset);
      },
      "updateStickerSetsOrder": function(params) {
        this.int32(196268545);
        const flags = this.has(params.masks) << 0 | this.has(params.emojis) << 1;
        this.int32(flags);
        this.vector(this.long, params.order);
      },
      "updateStickerSets": function(params) {
        this.int32(834816008);
        const flags = this.has(params.masks) << 0 | this.has(params.emojis) << 1;
        this.int32(flags);
      },
      "messages.savedGifsNotModified": function(params) {
        this.int32(-402498398);
      },
      "messages.savedGifs": function(params) {
        this.int32(-2069878259);
        this.long(params.hash);
        this.vector(this.predicate, params.gifs);
      },
      "updateSavedGifs": function(params) {
        this.int32(-1821035490);
      },
      "inputBotInlineMessageMediaAuto": function(params) {
        this.int32(864077702);
        const flags = this.has(params.entities) << 1 | this.has(params.reply_markup) << 2;
        this.int32(flags);
        this.string(params.message);
        this.flagVector(this.predicate, params.entities);
        this.flag(this.predicate, params.reply_markup);
      },
      "inputBotInlineMessageText": function(params) {
        this.int32(1036876423);
        const flags = this.has(params.no_webpage) << 0 | this.has(params.entities) << 1 | this.has(params.reply_markup) << 2;
        this.int32(flags);
        this.string(params.message);
        this.flagVector(this.predicate, params.entities);
        this.flag(this.predicate, params.reply_markup);
      },
      "inputBotInlineResult": function(params) {
        this.int32(-2000710887);
        const flags = this.has(params.title) << 1 | this.has(params.description) << 2 | this.has(params.url) << 3 | this.has(params.thumb) << 4 | this.has(params.content) << 5;
        this.int32(flags);
        this.string(params.id);
        this.string(params.type);
        this.flag(this.string, params.title);
        this.flag(this.string, params.description);
        this.flag(this.string, params.url);
        this.flag(this.predicate, params.thumb);
        this.flag(this.predicate, params.content);
        this.predicate(params.send_message);
      },
      "botInlineMessageMediaAuto": function(params) {
        this.int32(1984755728);
        const flags = this.has(params.entities) << 1 | this.has(params.reply_markup) << 2;
        this.int32(flags);
        this.string(params.message);
        this.flagVector(this.predicate, params.entities);
        this.flag(this.predicate, params.reply_markup);
      },
      "botInlineMessageText": function(params) {
        this.int32(-1937807902);
        const flags = this.has(params.no_webpage) << 0 | this.has(params.entities) << 1 | this.has(params.reply_markup) << 2;
        this.int32(flags);
        this.string(params.message);
        this.flagVector(this.predicate, params.entities);
        this.flag(this.predicate, params.reply_markup);
      },
      "botInlineResult": function(params) {
        this.int32(295067450);
        const flags = this.has(params.title) << 1 | this.has(params.description) << 2 | this.has(params.url) << 3 | this.has(params.thumb) << 4 | this.has(params.content) << 5;
        this.int32(flags);
        this.string(params.id);
        this.string(params.type);
        this.flag(this.string, params.title);
        this.flag(this.string, params.description);
        this.flag(this.string, params.url);
        this.flag(this.predicate, params.thumb);
        this.flag(this.predicate, params.content);
        this.predicate(params.send_message);
      },
      "messages.botResults": function(params) {
        this.int32(-534646026);
        const flags = this.has(params.gallery) << 0 | this.has(params.next_offset) << 1 | this.has(params.switch_pm) << 2 | this.has(params.switch_webview) << 3;
        this.int32(flags);
        this.long(params.query_id);
        this.flag(this.string, params.next_offset);
        this.flag(this.predicate, params.switch_pm);
        this.flag(this.predicate, params.switch_webview);
        this.vector(this.predicate, params.results);
        this.int(params.cache_time);
        this.vector(this.predicate, params.users);
      },
      "updateBotInlineQuery": function(params) {
        this.int32(1232025500);
        const flags = this.has(params.geo) << 0 | this.has(params.peer_type) << 1;
        this.int32(flags);
        this.long(params.query_id);
        this.long(params.user_id);
        this.string(params.query);
        this.flag(this.predicate, params.geo);
        this.flag(this.predicate, params.peer_type);
        this.string(params.offset);
      },
      "updateBotInlineSend": function(params) {
        this.int32(317794823);
        const flags = this.has(params.geo) << 0 | this.has(params.msg_id) << 1;
        this.int32(flags);
        this.long(params.user_id);
        this.string(params.query);
        this.flag(this.predicate, params.geo);
        this.string(params.id);
        this.flag(this.predicate, params.msg_id);
      },
      "inputMessagesFilterVoice": function(params) {
        this.int32(1358283666);
      },
      "inputMessagesFilterMusic": function(params) {
        this.int32(928101534);
      },
      "inputPrivacyKeyChatInvite": function(params) {
        this.int32(-1107622874);
      },
      "privacyKeyChatInvite": function(params) {
        this.int32(1343122938);
      },
      "exportedMessageLink": function(params) {
        this.int32(1571494644);
        this.string(params.link);
        this.string(params.html);
      },
      "messageFwdHeader": function(params) {
        this.int32(1601666510);
        const flags = this.has(params.imported) << 7 | this.has(params.from_id) << 0 | this.has(params.from_name) << 5 | this.has(params.channel_post) << 2 | this.has(params.post_author) << 3 | this.has(params.saved_from_peer) << 4 | this.has(params.saved_from_msg_id) << 4 | this.has(params.psa_type) << 6;
        this.int32(flags);
        this.flag(this.predicate, params.from_id);
        this.flag(this.string, params.from_name);
        this.int(params.date);
        this.flag(this.int, params.channel_post);
        this.flag(this.string, params.post_author);
        this.flag(this.predicate, params.saved_from_peer);
        this.flag(this.int, params.saved_from_msg_id);
        this.flag(this.string, params.psa_type);
      },
      "updateEditChannelMessage": function(params) {
        this.int32(457133559);
        this.predicate(params.message);
        this.int(params.pts);
        this.int(params.pts_count);
      },
      "messageActionPinMessage": function(params) {
        this.int32(-1799538451);
      },
      "auth.codeTypeSms": function(params) {
        this.int32(1923290508);
      },
      "auth.codeTypeCall": function(params) {
        this.int32(1948046307);
      },
      "auth.codeTypeFlashCall": function(params) {
        this.int32(577556219);
      },
      "auth.sentCodeTypeApp": function(params) {
        this.int32(1035688326);
        this.int(params.length);
      },
      "auth.sentCodeTypeSms": function(params) {
        this.int32(-1073693790);
        this.int(params.length);
      },
      "auth.sentCodeTypeCall": function(params) {
        this.int32(1398007207);
        this.int(params.length);
      },
      "auth.sentCodeTypeFlashCall": function(params) {
        this.int32(-1425815847);
        this.string(params.pattern);
      },
      "keyboardButtonUrl": function(params) {
        this.int32(629866245);
        this.string(params.text);
        this.string(params.url);
      },
      "keyboardButtonCallback": function(params) {
        this.int32(901503851);
        const flags = this.has(params.requires_password) << 0;
        this.int32(flags);
        this.string(params.text);
        this.bytes(params.data);
      },
      "keyboardButtonRequestPhone": function(params) {
        this.int32(-1318425559);
        this.string(params.text);
      },
      "keyboardButtonRequestGeoLocation": function(params) {
        this.int32(-59151553);
        this.string(params.text);
      },
      "keyboardButtonSwitchInline": function(params) {
        this.int32(-1816527947);
        const flags = this.has(params.same_peer) << 0 | this.has(params.peer_types) << 1;
        this.int32(flags);
        this.string(params.text);
        this.string(params.query);
        this.flagVector(this.predicate, params.peer_types);
      },
      "replyInlineMarkup": function(params) {
        this.int32(1218642516);
        this.vector(this.predicate, params.rows);
      },
      "messages.botCallbackAnswer": function(params) {
        this.int32(911761060);
        const flags = this.has(params.alert) << 1 | this.has(params.has_url) << 3 | this.has(params.native_ui) << 4 | this.has(params.message) << 0 | this.has(params.url) << 2;
        this.int32(flags);
        this.flag(this.string, params.message);
        this.flag(this.string, params.url);
        this.int(params.cache_time);
      },
      "updateBotCallbackQuery": function(params) {
        this.int32(-1177566067);
        const flags = this.has(params.data) << 0 | this.has(params.game_short_name) << 1;
        this.int32(flags);
        this.long(params.query_id);
        this.long(params.user_id);
        this.predicate(params.peer);
        this.int(params.msg_id);
        this.long(params.chat_instance);
        this.flag(this.bytes, params.data);
        this.flag(this.string, params.game_short_name);
      },
      "messages.messageEditData": function(params) {
        this.int32(649453030);
        const flags = this.has(params.caption) << 0;
        this.int32(flags);
      },
      "updateEditMessage": function(params) {
        this.int32(-469536605);
        this.predicate(params.message);
        this.int(params.pts);
        this.int(params.pts_count);
      },
      "inputBotInlineMessageMediaGeo": function(params) {
        this.int32(-1768777083);
        const flags = this.has(params.heading) << 0 | this.has(params.period) << 1 | this.has(params.proximity_notification_radius) << 3 | this.has(params.reply_markup) << 2;
        this.int32(flags);
        this.predicate(params.geo_point);
        this.flag(this.int, params.heading);
        this.flag(this.int, params.period);
        this.flag(this.int, params.proximity_notification_radius);
        this.flag(this.predicate, params.reply_markup);
      },
      "inputBotInlineMessageMediaVenue": function(params) {
        this.int32(1098628881);
        const flags = this.has(params.reply_markup) << 2;
        this.int32(flags);
        this.predicate(params.geo_point);
        this.string(params.title);
        this.string(params.address);
        this.string(params.provider);
        this.string(params.venue_id);
        this.string(params.venue_type);
        this.flag(this.predicate, params.reply_markup);
      },
      "inputBotInlineMessageMediaContact": function(params) {
        this.int32(-1494368259);
        const flags = this.has(params.reply_markup) << 2;
        this.int32(flags);
        this.string(params.phone_number);
        this.string(params.first_name);
        this.string(params.last_name);
        this.string(params.vcard);
        this.flag(this.predicate, params.reply_markup);
      },
      "botInlineMessageMediaGeo": function(params) {
        this.int32(85477117);
        const flags = this.has(params.heading) << 0 | this.has(params.period) << 1 | this.has(params.proximity_notification_radius) << 3 | this.has(params.reply_markup) << 2;
        this.int32(flags);
        this.predicate(params.geo);
        this.flag(this.int, params.heading);
        this.flag(this.int, params.period);
        this.flag(this.int, params.proximity_notification_radius);
        this.flag(this.predicate, params.reply_markup);
      },
      "botInlineMessageMediaVenue": function(params) {
        this.int32(-1970903652);
        const flags = this.has(params.reply_markup) << 2;
        this.int32(flags);
        this.predicate(params.geo);
        this.string(params.title);
        this.string(params.address);
        this.string(params.provider);
        this.string(params.venue_id);
        this.string(params.venue_type);
        this.flag(this.predicate, params.reply_markup);
      },
      "botInlineMessageMediaContact": function(params) {
        this.int32(416402882);
        const flags = this.has(params.reply_markup) << 2;
        this.int32(flags);
        this.string(params.phone_number);
        this.string(params.first_name);
        this.string(params.last_name);
        this.string(params.vcard);
        this.flag(this.predicate, params.reply_markup);
      },
      "inputBotInlineResultPhoto": function(params) {
        this.int32(-1462213465);
        this.string(params.id);
        this.string(params.type);
        this.predicate(params.photo);
        this.predicate(params.send_message);
      },
      "inputBotInlineResultDocument": function(params) {
        this.int32(-459324);
        const flags = this.has(params.title) << 1 | this.has(params.description) << 2;
        this.int32(flags);
        this.string(params.id);
        this.string(params.type);
        this.flag(this.string, params.title);
        this.flag(this.string, params.description);
        this.predicate(params.document);
        this.predicate(params.send_message);
      },
      "botInlineMediaResult": function(params) {
        this.int32(400266251);
        const flags = this.has(params.photo) << 0 | this.has(params.document) << 1 | this.has(params.title) << 2 | this.has(params.description) << 3;
        this.int32(flags);
        this.string(params.id);
        this.string(params.type);
        this.flag(this.predicate, params.photo);
        this.flag(this.predicate, params.document);
        this.flag(this.string, params.title);
        this.flag(this.string, params.description);
        this.predicate(params.send_message);
      },
      "inputBotInlineMessageID": function(params) {
        this.int32(-1995686519);
        this.int(params.dc_id);
        this.long(params.id);
        this.long(params.access_hash);
      },
      "updateInlineBotCallbackQuery": function(params) {
        this.int32(1763610706);
        const flags = this.has(params.data) << 0 | this.has(params.game_short_name) << 1;
        this.int32(flags);
        this.long(params.query_id);
        this.long(params.user_id);
        this.predicate(params.msg_id);
        this.long(params.chat_instance);
        this.flag(this.bytes, params.data);
        this.flag(this.string, params.game_short_name);
      },
      "inlineBotSwitchPM": function(params) {
        this.int32(1008755359);
        this.string(params.text);
        this.string(params.start_param);
      },
      "messages.peerDialogs": function(params) {
        this.int32(863093588);
        this.vector(this.predicate, params.dialogs);
        this.vector(this.predicate, params.messages);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
        this.predicate(params.state);
      },
      "topPeer": function(params) {
        this.int32(-305282981);
        this.predicate(params.peer);
        this.double(params.rating);
      },
      "topPeerCategoryBotsPM": function(params) {
        this.int32(-1419371685);
      },
      "topPeerCategoryBotsInline": function(params) {
        this.int32(344356834);
      },
      "topPeerCategoryCorrespondents": function(params) {
        this.int32(104314861);
      },
      "topPeerCategoryGroups": function(params) {
        this.int32(-1122524854);
      },
      "topPeerCategoryChannels": function(params) {
        this.int32(371037736);
      },
      "topPeerCategoryPeers": function(params) {
        this.int32(-75283823);
        this.predicate(params.category);
        this.int(params.count);
        this.vector(this.predicate, params.peers);
      },
      "contacts.topPeersNotModified": function(params) {
        this.int32(-567906571);
      },
      "contacts.topPeers": function(params) {
        this.int32(1891070632);
        this.vector(this.predicate, params.categories);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "messageEntityMentionName": function(params) {
        this.int32(-595914432);
        this.int(params.offset);
        this.int(params.length);
        this.long(params.user_id);
      },
      "inputMessageEntityMentionName": function(params) {
        this.int32(546203849);
        this.int(params.offset);
        this.int(params.length);
        this.predicate(params.user_id);
      },
      "inputMessagesFilterChatPhotos": function(params) {
        this.int32(975236280);
      },
      "updateReadChannelOutbox": function(params) {
        this.int32(-1218471511);
        this.long(params.channel_id);
        this.int(params.max_id);
      },
      "updateDraftMessage": function(params) {
        this.int32(457829485);
        const flags = this.has(params.top_msg_id) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.flag(this.int, params.top_msg_id);
        this.predicate(params.draft);
      },
      "draftMessageEmpty": function(params) {
        this.int32(453805082);
        const flags = this.has(params.date) << 0;
        this.int32(flags);
        this.flag(this.int, params.date);
      },
      "draftMessage": function(params) {
        this.int32(-40996577);
        const flags = this.has(params.no_webpage) << 1 | this.has(params.reply_to_msg_id) << 0 | this.has(params.entities) << 3;
        this.int32(flags);
        this.flag(this.int, params.reply_to_msg_id);
        this.string(params.message);
        this.flagVector(this.predicate, params.entities);
        this.int(params.date);
      },
      "messageActionHistoryClear": function(params) {
        this.int32(-1615153660);
      },
      "messages.featuredStickersNotModified": function(params) {
        this.int32(-958657434);
        this.int(params.count);
      },
      "messages.featuredStickers": function(params) {
        this.int32(-1103615738);
        const flags = this.has(params.premium) << 0;
        this.int32(flags);
        this.long(params.hash);
        this.int(params.count);
        this.vector(this.predicate, params.sets);
        this.vector(this.long, params.unread);
      },
      "updateReadFeaturedStickers": function(params) {
        this.int32(1461528386);
      },
      "messages.recentStickersNotModified": function(params) {
        this.int32(186120336);
      },
      "messages.recentStickers": function(params) {
        this.int32(-1999405994);
        this.long(params.hash);
        this.vector(this.predicate, params.packs);
        this.vector(this.predicate, params.stickers);
        this.vector(this.int, params.dates);
      },
      "updateRecentStickers": function(params) {
        this.int32(-1706939360);
      },
      "messages.archivedStickers": function(params) {
        this.int32(1338747336);
        this.int(params.count);
        this.vector(this.predicate, params.sets);
      },
      "messages.stickerSetInstallResultSuccess": function(params) {
        this.int32(946083368);
      },
      "messages.stickerSetInstallResultArchive": function(params) {
        this.int32(904138920);
        this.vector(this.predicate, params.sets);
      },
      "stickerSetCovered": function(params) {
        this.int32(1678812626);
        this.predicate(params.set);
        this.predicate(params.cover);
      },
      "updateConfig": function(params) {
        this.int32(-1574314746);
      },
      "updatePtsChanged": function(params) {
        this.int32(861169551);
      },
      "inputMediaPhotoExternal": function(params) {
        this.int32(-440664550);
        const flags = this.has(params.spoiler) << 1 | this.has(params.ttl_seconds) << 0;
        this.int32(flags);
        this.string(params.url);
        this.flag(this.int, params.ttl_seconds);
      },
      "inputMediaDocumentExternal": function(params) {
        this.int32(-78455655);
        const flags = this.has(params.spoiler) << 1 | this.has(params.ttl_seconds) << 0;
        this.int32(flags);
        this.string(params.url);
        this.flag(this.int, params.ttl_seconds);
      },
      "stickerSetMultiCovered": function(params) {
        this.int32(872932635);
        this.predicate(params.set);
        this.vector(this.predicate, params.covers);
      },
      "maskCoords": function(params) {
        this.int32(-1361650766);
        this.int(params.n);
        this.double(params.x);
        this.double(params.y);
        this.double(params.zoom);
      },
      "documentAttributeHasStickers": function(params) {
        this.int32(-1744710921);
      },
      "inputStickeredMediaPhoto": function(params) {
        this.int32(1251549527);
        this.predicate(params.id);
      },
      "inputStickeredMediaDocument": function(params) {
        this.int32(70813275);
        this.predicate(params.id);
      },
      "game": function(params) {
        this.int32(-1107729093);
        const flags = this.has(params.document) << 0;
        this.int32(flags);
        this.long(params.id);
        this.long(params.access_hash);
        this.string(params.short_name);
        this.string(params.title);
        this.string(params.description);
        this.predicate(params.photo);
        this.flag(this.predicate, params.document);
      },
      "inputBotInlineResultGame": function(params) {
        this.int32(1336154098);
        this.string(params.id);
        this.string(params.short_name);
        this.predicate(params.send_message);
      },
      "inputBotInlineMessageGame": function(params) {
        this.int32(1262639204);
        const flags = this.has(params.reply_markup) << 2;
        this.int32(flags);
        this.flag(this.predicate, params.reply_markup);
      },
      "messageMediaGame": function(params) {
        this.int32(-38694904);
        this.predicate(params.game);
      },
      "inputMediaGame": function(params) {
        this.int32(-750828557);
        this.predicate(params.id);
      },
      "inputGameID": function(params) {
        this.int32(53231223);
        this.long(params.id);
        this.long(params.access_hash);
      },
      "inputGameShortName": function(params) {
        this.int32(-1020139510);
        this.predicate(params.bot_id);
        this.string(params.short_name);
      },
      "keyboardButtonGame": function(params) {
        this.int32(1358175439);
        this.string(params.text);
      },
      "messageActionGameScore": function(params) {
        this.int32(-1834538890);
        this.long(params.game_id);
        this.int(params.score);
      },
      "highScore": function(params) {
        this.int32(1940093419);
        this.int(params.pos);
        this.long(params.user_id);
        this.int(params.score);
      },
      "messages.highScores": function(params) {
        this.int32(-1707344487);
        this.vector(this.predicate, params.scores);
        this.vector(this.predicate, params.users);
      },
      "updates.differenceTooLong": function(params) {
        this.int32(1258196845);
        this.int(params.pts);
      },
      "updateChannelWebPage": function(params) {
        this.int32(791390623);
        this.long(params.channel_id);
        this.predicate(params.webpage);
        this.int(params.pts);
        this.int(params.pts_count);
      },
      "messages.chatsSlice": function(params) {
        this.int32(-1663561404);
        this.int(params.count);
        this.vector(this.predicate, params.chats);
      },
      "textEmpty": function(params) {
        this.int32(-599948721);
      },
      "textPlain": function(params) {
        this.int32(1950782688);
        this.string(params.text);
      },
      "textBold": function(params) {
        this.int32(1730456516);
        this.predicate(params.text);
      },
      "textItalic": function(params) {
        this.int32(-653089380);
        this.predicate(params.text);
      },
      "textUnderline": function(params) {
        this.int32(-1054465340);
        this.predicate(params.text);
      },
      "textStrike": function(params) {
        this.int32(-1678197867);
        this.predicate(params.text);
      },
      "textFixed": function(params) {
        this.int32(1816074681);
        this.predicate(params.text);
      },
      "textUrl": function(params) {
        this.int32(1009288385);
        this.predicate(params.text);
        this.string(params.url);
        this.long(params.webpage_id);
      },
      "textEmail": function(params) {
        this.int32(-564523562);
        this.predicate(params.text);
        this.string(params.email);
      },
      "textConcat": function(params) {
        this.int32(2120376535);
        this.vector(this.predicate, params.texts);
      },
      "pageBlockUnsupported": function(params) {
        this.int32(324435594);
      },
      "pageBlockTitle": function(params) {
        this.int32(1890305021);
        this.predicate(params.text);
      },
      "pageBlockSubtitle": function(params) {
        this.int32(-1879401953);
        this.predicate(params.text);
      },
      "pageBlockAuthorDate": function(params) {
        this.int32(-1162877472);
        this.predicate(params.author);
        this.int(params.published_date);
      },
      "pageBlockHeader": function(params) {
        this.int32(-1076861716);
        this.predicate(params.text);
      },
      "pageBlockSubheader": function(params) {
        this.int32(-248793375);
        this.predicate(params.text);
      },
      "pageBlockParagraph": function(params) {
        this.int32(1182402406);
        this.predicate(params.text);
      },
      "pageBlockPreformatted": function(params) {
        this.int32(-1066346178);
        this.predicate(params.text);
        this.string(params.language);
      },
      "pageBlockFooter": function(params) {
        this.int32(1216809369);
        this.predicate(params.text);
      },
      "pageBlockDivider": function(params) {
        this.int32(-618614392);
      },
      "pageBlockAnchor": function(params) {
        this.int32(-837994576);
        this.string(params.name);
      },
      "pageBlockList": function(params) {
        this.int32(-454524911);
        this.vector(this.predicate, params.items);
      },
      "pageBlockBlockquote": function(params) {
        this.int32(641563686);
        this.predicate(params.text);
        this.predicate(params.caption);
      },
      "pageBlockPullquote": function(params) {
        this.int32(1329878739);
        this.predicate(params.text);
        this.predicate(params.caption);
      },
      "pageBlockPhoto": function(params) {
        this.int32(391759200);
        const flags = this.has(params.url) << 0 | this.has(params.webpage_id) << 0;
        this.int32(flags);
        this.long(params.photo_id);
        this.predicate(params.caption);
        this.flag(this.string, params.url);
        this.flag(this.long, params.webpage_id);
      },
      "pageBlockVideo": function(params) {
        this.int32(2089805750);
        const flags = this.has(params.autoplay) << 0 | this.has(params.loop) << 1;
        this.int32(flags);
        this.long(params.video_id);
        this.predicate(params.caption);
      },
      "pageBlockCover": function(params) {
        this.int32(972174080);
        this.predicate(params.cover);
      },
      "pageBlockEmbed": function(params) {
        this.int32(-1468953147);
        const flags = this.has(params.full_width) << 0 | this.has(params.allow_scrolling) << 3 | this.has(params.url) << 1 | this.has(params.html) << 2 | this.has(params.poster_photo_id) << 4 | this.has(params.w) << 5 | this.has(params.h) << 5;
        this.int32(flags);
        this.flag(this.string, params.url);
        this.flag(this.string, params.html);
        this.flag(this.long, params.poster_photo_id);
        this.flag(this.int, params.w);
        this.flag(this.int, params.h);
        this.predicate(params.caption);
      },
      "pageBlockEmbedPost": function(params) {
        this.int32(-229005301);
        this.string(params.url);
        this.long(params.webpage_id);
        this.long(params.author_photo_id);
        this.string(params.author);
        this.int(params.date);
        this.vector(this.predicate, params.blocks);
        this.predicate(params.caption);
      },
      "pageBlockCollage": function(params) {
        this.int32(1705048653);
        this.vector(this.predicate, params.items);
        this.predicate(params.caption);
      },
      "pageBlockSlideshow": function(params) {
        this.int32(52401552);
        this.vector(this.predicate, params.items);
        this.predicate(params.caption);
      },
      "webPageNotModified": function(params) {
        this.int32(1930545681);
        const flags = this.has(params.cached_page_views) << 0;
        this.int32(flags);
        this.flag(this.int, params.cached_page_views);
      },
      "inputPrivacyKeyPhoneCall": function(params) {
        this.int32(-88417185);
      },
      "privacyKeyPhoneCall": function(params) {
        this.int32(1030105979);
      },
      "sendMessageGamePlayAction": function(params) {
        this.int32(-580219064);
      },
      "phoneCallDiscardReasonMissed": function(params) {
        this.int32(-2048646399);
      },
      "phoneCallDiscardReasonDisconnect": function(params) {
        this.int32(-527056480);
      },
      "phoneCallDiscardReasonHangup": function(params) {
        this.int32(1471006352);
      },
      "phoneCallDiscardReasonBusy": function(params) {
        this.int32(-84416311);
      },
      "updateDialogPinned": function(params) {
        this.int32(1852826908);
        const flags = this.has(params.pinned) << 0 | this.has(params.folder_id) << 1;
        this.int32(flags);
        this.flag(this.int, params.folder_id);
        this.predicate(params.peer);
      },
      "updatePinnedDialogs": function(params) {
        this.int32(-99664734);
        const flags = this.has(params.folder_id) << 1 | this.has(params.order) << 0;
        this.int32(flags);
        this.flag(this.int, params.folder_id);
        this.flagVector(this.predicate, params.order);
      },
      "dataJSON": function(params) {
        this.int32(2104790276);
        this.string(params.data);
      },
      "updateBotWebhookJSON": function(params) {
        this.int32(-2095595325);
        this.predicate(params.data);
      },
      "updateBotWebhookJSONQuery": function(params) {
        this.int32(-1684914010);
        this.long(params.query_id);
        this.predicate(params.data);
        this.int(params.timeout);
      },
      "labeledPrice": function(params) {
        this.int32(-886477832);
        this.string(params.label);
        this.long(params.amount);
      },
      "invoice": function(params) {
        this.int32(1048946971);
        const flags = this.has(params.test) << 0 | this.has(params.name_requested) << 1 | this.has(params.phone_requested) << 2 | this.has(params.email_requested) << 3 | this.has(params.shipping_address_requested) << 4 | this.has(params.flexible) << 5 | this.has(params.phone_to_provider) << 6 | this.has(params.email_to_provider) << 7 | this.has(params.recurring) << 9 | this.has(params.max_tip_amount) << 8 | this.has(params.suggested_tip_amounts) << 8 | this.has(params.recurring_terms_url) << 9;
        this.int32(flags);
        this.string(params.currency);
        this.vector(this.predicate, params.prices);
        this.flag(this.long, params.max_tip_amount);
        this.flagVector(this.long, params.suggested_tip_amounts);
        this.flag(this.string, params.recurring_terms_url);
      },
      "inputMediaInvoice": function(params) {
        this.int32(-1900697899);
        const flags = this.has(params.photo) << 0 | this.has(params.start_param) << 1 | this.has(params.extended_media) << 2;
        this.int32(flags);
        this.string(params.title);
        this.string(params.description);
        this.flag(this.predicate, params.photo);
        this.predicate(params.invoice);
        this.bytes(params.payload);
        this.string(params.provider);
        this.predicate(params.provider_data);
        this.flag(this.string, params.start_param);
        this.flag(this.predicate, params.extended_media);
      },
      "paymentCharge": function(params) {
        this.int32(-368917890);
        this.string(params.id);
        this.string(params.provider_charge_id);
      },
      "messageActionPaymentSentMe": function(params) {
        this.int32(-1892568281);
        const flags = this.has(params.recurring_init) << 2 | this.has(params.recurring_used) << 3 | this.has(params.info) << 0 | this.has(params.shipping_option_id) << 1;
        this.int32(flags);
        this.string(params.currency);
        this.long(params.total_amount);
        this.bytes(params.payload);
        this.flag(this.predicate, params.info);
        this.flag(this.string, params.shipping_option_id);
        this.predicate(params.charge);
      },
      "messageMediaInvoice": function(params) {
        this.int32(-156940077);
        const flags = this.has(params.shipping_address_requested) << 1 | this.has(params.test) << 3 | this.has(params.photo) << 0 | this.has(params.receipt_msg_id) << 2 | this.has(params.extended_media) << 4;
        this.int32(flags);
        this.string(params.title);
        this.string(params.description);
        this.flag(this.predicate, params.photo);
        this.flag(this.int, params.receipt_msg_id);
        this.string(params.currency);
        this.long(params.total_amount);
        this.string(params.start_param);
        this.flag(this.predicate, params.extended_media);
      },
      "postAddress": function(params) {
        this.int32(512535275);
        this.string(params.street_line1);
        this.string(params.street_line2);
        this.string(params.city);
        this.string(params.state);
        this.string(params.country_iso2);
        this.string(params.post_code);
      },
      "paymentRequestedInfo": function(params) {
        this.int32(-1868808300);
        const flags = this.has(params.name) << 0 | this.has(params.phone) << 1 | this.has(params.email) << 2 | this.has(params.shipping_address) << 3;
        this.int32(flags);
        this.flag(this.string, params.name);
        this.flag(this.string, params.phone);
        this.flag(this.string, params.email);
        this.flag(this.predicate, params.shipping_address);
      },
      "keyboardButtonBuy": function(params) {
        this.int32(-1344716869);
        this.string(params.text);
      },
      "messageActionPaymentSent": function(params) {
        this.int32(-1776926890);
        const flags = this.has(params.recurring_init) << 2 | this.has(params.recurring_used) << 3 | this.has(params.invoice_slug) << 0;
        this.int32(flags);
        this.string(params.currency);
        this.long(params.total_amount);
        this.flag(this.string, params.invoice_slug);
      },
      "paymentSavedCredentialsCard": function(params) {
        this.int32(-842892769);
        this.string(params.id);
        this.string(params.title);
      },
      "webDocument": function(params) {
        this.int32(475467473);
        this.string(params.url);
        this.long(params.access_hash);
        this.int(params.size);
        this.string(params.mime_type);
        this.vector(this.predicate, params.attributes);
      },
      "inputWebDocument": function(params) {
        this.int32(-1678949555);
        this.string(params.url);
        this.int(params.size);
        this.string(params.mime_type);
        this.vector(this.predicate, params.attributes);
      },
      "inputWebFileLocation": function(params) {
        this.int32(-1036396922);
        this.string(params.url);
        this.long(params.access_hash);
      },
      "upload.webFile": function(params) {
        this.int32(568808380);
        this.int(params.size);
        this.string(params.mime_type);
        this.predicate(params.file_type);
        this.int(params.mtime);
        this.bytes(params.bytes);
      },
      "payments.paymentForm": function(params) {
        this.int32(-1610250415);
        const flags = this.has(params.can_save_credentials) << 2 | this.has(params.password_missing) << 3 | this.has(params.photo) << 5 | this.has(params.native_provider) << 4 | this.has(params.native_params) << 4 | this.has(params.additional_methods) << 6 | this.has(params.saved_info) << 0 | this.has(params.saved_credentials) << 1;
        this.int32(flags);
        this.long(params.form_id);
        this.long(params.bot_id);
        this.string(params.title);
        this.string(params.description);
        this.flag(this.predicate, params.photo);
        this.predicate(params.invoice);
        this.long(params.provider_id);
        this.string(params.url);
        this.flag(this.string, params.native_provider);
        this.flag(this.predicate, params.native_params);
        this.flagVector(this.predicate, params.additional_methods);
        this.flag(this.predicate, params.saved_info);
        this.flagVector(this.predicate, params.saved_credentials);
        this.vector(this.predicate, params.users);
      },
      "payments.validatedRequestedInfo": function(params) {
        this.int32(-784000893);
        const flags = this.has(params.id) << 0 | this.has(params.shipping_options) << 1;
        this.int32(flags);
        this.flag(this.string, params.id);
        this.flagVector(this.predicate, params.shipping_options);
      },
      "payments.paymentResult": function(params) {
        this.int32(1314881805);
        this.predicate(params.updates);
      },
      "payments.paymentReceipt": function(params) {
        this.int32(1891958275);
        const flags = this.has(params.photo) << 2 | this.has(params.info) << 0 | this.has(params.shipping) << 1 | this.has(params.tip_amount) << 3;
        this.int32(flags);
        this.int(params.date);
        this.long(params.bot_id);
        this.long(params.provider_id);
        this.string(params.title);
        this.string(params.description);
        this.flag(this.predicate, params.photo);
        this.predicate(params.invoice);
        this.flag(this.predicate, params.info);
        this.flag(this.predicate, params.shipping);
        this.flag(this.long, params.tip_amount);
        this.string(params.currency);
        this.long(params.total_amount);
        this.string(params.credentials_title);
        this.vector(this.predicate, params.users);
      },
      "payments.savedInfo": function(params) {
        this.int32(-74456004);
        const flags = this.has(params.has_saved_credentials) << 1 | this.has(params.saved_info) << 0;
        this.int32(flags);
        this.flag(this.predicate, params.saved_info);
      },
      "inputPaymentCredentialsSaved": function(params) {
        this.int32(-1056001329);
        this.string(params.id);
        this.bytes(params.tmp_password);
      },
      "inputPaymentCredentials": function(params) {
        this.int32(873977640);
        const flags = this.has(params.save) << 0;
        this.int32(flags);
        this.predicate(params.data);
      },
      "account.tmpPassword": function(params) {
        this.int32(-614138572);
        this.bytes(params.tmp_password);
        this.int(params.valid_until);
      },
      "shippingOption": function(params) {
        this.int32(-1239335713);
        this.string(params.id);
        this.string(params.title);
        this.vector(this.predicate, params.prices);
      },
      "updateBotShippingQuery": function(params) {
        this.int32(-1246823043);
        this.long(params.query_id);
        this.long(params.user_id);
        this.bytes(params.payload);
        this.predicate(params.shipping_address);
      },
      "updateBotPrecheckoutQuery": function(params) {
        this.int32(-1934976362);
        const flags = this.has(params.info) << 0 | this.has(params.shipping_option_id) << 1;
        this.int32(flags);
        this.long(params.query_id);
        this.long(params.user_id);
        this.bytes(params.payload);
        this.flag(this.predicate, params.info);
        this.flag(this.string, params.shipping_option_id);
        this.string(params.currency);
        this.long(params.total_amount);
      },
      "inputStickerSetItem": function(params) {
        this.int32(853188252);
        const flags = this.has(params.mask_coords) << 0 | this.has(params.keywords) << 1;
        this.int32(flags);
        this.predicate(params.document);
        this.string(params.emoji);
        this.flag(this.predicate, params.mask_coords);
        this.flag(this.string, params.keywords);
      },
      "updatePhoneCall": function(params) {
        this.int32(-1425052898);
        this.predicate(params.phone_call);
      },
      "inputPhoneCall": function(params) {
        this.int32(506920429);
        this.long(params.id);
        this.long(params.access_hash);
      },
      "phoneCallEmpty": function(params) {
        this.int32(1399245077);
        this.long(params.id);
      },
      "phoneCallWaiting": function(params) {
        this.int32(-987599081);
        const flags = this.has(params.video) << 6 | this.has(params.receive_date) << 0;
        this.int32(flags);
        this.long(params.id);
        this.long(params.access_hash);
        this.int(params.date);
        this.long(params.admin_id);
        this.long(params.participant_id);
        this.predicate(params.protocol);
        this.flag(this.int, params.receive_date);
      },
      "phoneCallRequested": function(params) {
        this.int32(347139340);
        const flags = this.has(params.video) << 6;
        this.int32(flags);
        this.long(params.id);
        this.long(params.access_hash);
        this.int(params.date);
        this.long(params.admin_id);
        this.long(params.participant_id);
        this.bytes(params.g_a_hash);
        this.predicate(params.protocol);
      },
      "phoneCallAccepted": function(params) {
        this.int32(912311057);
        const flags = this.has(params.video) << 6;
        this.int32(flags);
        this.long(params.id);
        this.long(params.access_hash);
        this.int(params.date);
        this.long(params.admin_id);
        this.long(params.participant_id);
        this.bytes(params.g_b);
        this.predicate(params.protocol);
      },
      "phoneCall": function(params) {
        this.int32(-1770029977);
        const flags = this.has(params.p2p_allowed) << 5 | this.has(params.video) << 6;
        this.int32(flags);
        this.long(params.id);
        this.long(params.access_hash);
        this.int(params.date);
        this.long(params.admin_id);
        this.long(params.participant_id);
        this.bytes(params.g_a_or_b);
        this.long(params.key_fingerprint);
        this.predicate(params.protocol);
        this.vector(this.predicate, params.connections);
        this.int(params.start_date);
      },
      "phoneCallDiscarded": function(params) {
        this.int32(1355435489);
        const flags = this.has(params.need_rating) << 2 | this.has(params.need_debug) << 3 | this.has(params.video) << 6 | this.has(params.reason) << 0 | this.has(params.duration) << 1;
        this.int32(flags);
        this.long(params.id);
        this.flag(this.predicate, params.reason);
        this.flag(this.int, params.duration);
      },
      "phoneConnection": function(params) {
        this.int32(-1665063993);
        const flags = this.has(params.tcp) << 0;
        this.int32(flags);
        this.long(params.id);
        this.string(params.ip);
        this.string(params.ipv6);
        this.int(params.port);
        this.bytes(params.peer_tag);
      },
      "phoneCallProtocol": function(params) {
        this.int32(-58224696);
        const flags = this.has(params.udp_p2p) << 0 | this.has(params.udp_reflector) << 1;
        this.int32(flags);
        this.int(params.min_layer);
        this.int(params.max_layer);
        this.vector(this.string, params.library_versions);
      },
      "phone.phoneCall": function(params) {
        this.int32(-326966976);
        this.predicate(params.phone_call);
        this.vector(this.predicate, params.users);
      },
      "inputMessagesFilterPhoneCalls": function(params) {
        this.int32(-2134272152);
        const flags = this.has(params.missed) << 0;
        this.int32(flags);
      },
      "messageActionPhoneCall": function(params) {
        this.int32(-2132731265);
        const flags = this.has(params.video) << 2 | this.has(params.reason) << 0 | this.has(params.duration) << 1;
        this.int32(flags);
        this.long(params.call_id);
        this.flag(this.predicate, params.reason);
        this.flag(this.int, params.duration);
      },
      "inputMessagesFilterRoundVoice": function(params) {
        this.int32(2054952868);
      },
      "inputMessagesFilterRoundVideo": function(params) {
        this.int32(-1253451181);
      },
      "sendMessageRecordRoundAction": function(params) {
        this.int32(-1997373508);
      },
      "sendMessageUploadRoundAction": function(params) {
        this.int32(608050278);
        this.int(params.progress);
      },
      "upload.fileCdnRedirect": function(params) {
        this.int32(-242427324);
        this.int(params.dc_id);
        this.bytes(params.file_token);
        this.bytes(params.encryption_key);
        this.bytes(params.encryption_iv);
        this.vector(this.predicate, params.file_hashes);
      },
      "upload.cdnFileReuploadNeeded": function(params) {
        this.int32(-290921362);
        this.bytes(params.request_token);
      },
      "upload.cdnFile": function(params) {
        this.int32(-1449145777);
        this.bytes(params.bytes);
      },
      "cdnPublicKey": function(params) {
        this.int32(-914167110);
        this.int(params.dc_id);
        this.string(params.public_key);
      },
      "cdnConfig": function(params) {
        this.int32(1462101002);
        this.vector(this.predicate, params.public_keys);
      },
      "pageBlockChannel": function(params) {
        this.int32(-283684427);
        this.predicate(params.channel);
      },
      "langPackString": function(params) {
        this.int32(-892239370);
        this.string(params.key);
        this.string(params.value);
      },
      "langPackStringPluralized": function(params) {
        this.int32(1816636575);
        const flags = this.has(params.zero_value) << 0 | this.has(params.one_value) << 1 | this.has(params.two_value) << 2 | this.has(params.few_value) << 3 | this.has(params.many_value) << 4;
        this.int32(flags);
        this.string(params.key);
        this.flag(this.string, params.zero_value);
        this.flag(this.string, params.one_value);
        this.flag(this.string, params.two_value);
        this.flag(this.string, params.few_value);
        this.flag(this.string, params.many_value);
        this.string(params.other_value);
      },
      "langPackStringDeleted": function(params) {
        this.int32(695856818);
        this.string(params.key);
      },
      "langPackDifference": function(params) {
        this.int32(-209337866);
        this.string(params.lang_code);
        this.int(params.from_version);
        this.int(params.version);
        this.vector(this.predicate, params.strings);
      },
      "langPackLanguage": function(params) {
        this.int32(-288727837);
        const flags = this.has(params.official) << 0 | this.has(params.rtl) << 2 | this.has(params.beta) << 3 | this.has(params.base_lang_code) << 1;
        this.int32(flags);
        this.string(params.name);
        this.string(params.native_name);
        this.string(params.lang_code);
        this.flag(this.string, params.base_lang_code);
        this.string(params.plural_code);
        this.int(params.strings_count);
        this.int(params.translated_count);
        this.string(params.translations_url);
      },
      "updateLangPackTooLong": function(params) {
        this.int32(1180041828);
        this.string(params.lang_code);
      },
      "updateLangPack": function(params) {
        this.int32(1442983757);
        this.predicate(params.difference);
      },
      "channelParticipantAdmin": function(params) {
        this.int32(885242707);
        const flags = this.has(params.can_edit) << 0 | this.has(params.self) << 1 | this.has(params.inviter_id) << 1 | this.has(params.rank) << 2;
        this.int32(flags);
        this.long(params.user_id);
        this.flag(this.long, params.inviter_id);
        this.long(params.promoted_by);
        this.int(params.date);
        this.predicate(params.admin_rights);
        this.flag(this.string, params.rank);
      },
      "channelParticipantBanned": function(params) {
        this.int32(1844969806);
        const flags = this.has(params.left) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.long(params.kicked_by);
        this.int(params.date);
        this.predicate(params.banned_rights);
      },
      "channelParticipantsBanned": function(params) {
        this.int32(338142689);
        this.string(params.q);
      },
      "channelParticipantsSearch": function(params) {
        this.int32(106343499);
        this.string(params.q);
      },
      "channelAdminLogEventActionChangeTitle": function(params) {
        this.int32(-421545947);
        this.string(params.prev_value);
        this.string(params.new_value);
      },
      "channelAdminLogEventActionChangeAbout": function(params) {
        this.int32(1427671598);
        this.string(params.prev_value);
        this.string(params.new_value);
      },
      "channelAdminLogEventActionChangeUsername": function(params) {
        this.int32(1783299128);
        this.string(params.prev_value);
        this.string(params.new_value);
      },
      "channelAdminLogEventActionChangePhoto": function(params) {
        this.int32(1129042607);
        this.predicate(params.prev_photo);
        this.predicate(params.new_photo);
      },
      "channelAdminLogEventActionToggleInvites": function(params) {
        this.int32(460916654);
        this.Bool(params.new_value);
      },
      "channelAdminLogEventActionToggleSignatures": function(params) {
        this.int32(648939889);
        this.Bool(params.new_value);
      },
      "channelAdminLogEventActionUpdatePinned": function(params) {
        this.int32(-370660328);
        this.predicate(params.message);
      },
      "channelAdminLogEventActionEditMessage": function(params) {
        this.int32(1889215493);
        this.predicate(params.prev_message);
        this.predicate(params.new_message);
      },
      "channelAdminLogEventActionDeleteMessage": function(params) {
        this.int32(1121994683);
        this.predicate(params.message);
      },
      "channelAdminLogEventActionParticipantJoin": function(params) {
        this.int32(405815507);
      },
      "channelAdminLogEventActionParticipantLeave": function(params) {
        this.int32(-124291086);
      },
      "channelAdminLogEventActionParticipantInvite": function(params) {
        this.int32(-484690728);
        this.predicate(params.participant);
      },
      "channelAdminLogEventActionParticipantToggleBan": function(params) {
        this.int32(-422036098);
        this.predicate(params.prev_participant);
        this.predicate(params.new_participant);
      },
      "channelAdminLogEventActionParticipantToggleAdmin": function(params) {
        this.int32(-714643696);
        this.predicate(params.prev_participant);
        this.predicate(params.new_participant);
      },
      "channelAdminLogEvent": function(params) {
        this.int32(531458253);
        this.long(params.id);
        this.int(params.date);
        this.long(params.user_id);
        this.predicate(params.action);
      },
      "channels.adminLogResults": function(params) {
        this.int32(-309659827);
        this.vector(this.predicate, params.events);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "channelAdminLogEventsFilter": function(params) {
        this.int32(-368018716);
        const flags = this.has(params.join) << 0 | this.has(params.leave) << 1 | this.has(params.invite) << 2 | this.has(params.ban) << 3 | this.has(params.unban) << 4 | this.has(params.kick) << 5 | this.has(params.unkick) << 6 | this.has(params.promote) << 7 | this.has(params.demote) << 8 | this.has(params.info) << 9 | this.has(params.settings) << 10 | this.has(params.pinned) << 11 | this.has(params.edit) << 12 | this.has(params.delete) << 13 | this.has(params.group_call) << 14 | this.has(params.invites) << 15 | this.has(params.send) << 16 | this.has(params.forums) << 17;
        this.int32(flags);
      },
      "topPeerCategoryPhoneCalls": function(params) {
        this.int32(511092620);
      },
      "pageBlockAudio": function(params) {
        this.int32(-2143067670);
        this.long(params.audio_id);
        this.predicate(params.caption);
      },
      "popularContact": function(params) {
        this.int32(1558266229);
        this.long(params.client_id);
        this.int(params.importers);
      },
      "messageActionScreenshotTaken": function(params) {
        this.int32(1200788123);
      },
      "messages.favedStickersNotModified": function(params) {
        this.int32(-1634752813);
      },
      "messages.favedStickers": function(params) {
        this.int32(750063767);
        this.long(params.hash);
        this.vector(this.predicate, params.packs);
        this.vector(this.predicate, params.stickers);
      },
      "updateFavedStickers": function(params) {
        this.int32(-451831443);
      },
      "updateChannelReadMessagesContents": function(params) {
        this.int32(-366410403);
        const flags = this.has(params.top_msg_id) << 0;
        this.int32(flags);
        this.long(params.channel_id);
        this.flag(this.int, params.top_msg_id);
        this.vector(this.int, params.messages);
      },
      "inputMessagesFilterMyMentions": function(params) {
        this.int32(-1040652646);
      },
      "updateContactsReset": function(params) {
        this.int32(1887741886);
      },
      "channelAdminLogEventActionChangeStickerSet": function(params) {
        this.int32(-1312568665);
        this.predicate(params.prev_stickerset);
        this.predicate(params.new_stickerset);
      },
      "messageActionCustomAction": function(params) {
        this.int32(-85549226);
        this.string(params.message);
      },
      "inputPaymentCredentialsApplePay": function(params) {
        this.int32(178373535);
        this.predicate(params.payment_data);
      },
      "inputMessagesFilterGeo": function(params) {
        this.int32(-419271411);
      },
      "inputMessagesFilterContacts": function(params) {
        this.int32(-530392189);
      },
      "updateChannelAvailableMessages": function(params) {
        this.int32(-1304443240);
        this.long(params.channel_id);
        this.int(params.available_min_id);
      },
      "channelAdminLogEventActionTogglePreHistoryHidden": function(params) {
        this.int32(1599903217);
        this.Bool(params.new_value);
      },
      "inputMediaGeoLive": function(params) {
        this.int32(-1759532989);
        const flags = this.has(params.stopped) << 0 | this.has(params.heading) << 2 | this.has(params.period) << 1 | this.has(params.proximity_notification_radius) << 3;
        this.int32(flags);
        this.predicate(params.geo_point);
        this.flag(this.int, params.heading);
        this.flag(this.int, params.period);
        this.flag(this.int, params.proximity_notification_radius);
      },
      "messageMediaGeoLive": function(params) {
        this.int32(-1186937242);
        const flags = this.has(params.heading) << 0 | this.has(params.proximity_notification_radius) << 1;
        this.int32(flags);
        this.predicate(params.geo);
        this.flag(this.int, params.heading);
        this.int(params.period);
        this.flag(this.int, params.proximity_notification_radius);
      },
      "recentMeUrlUnknown": function(params) {
        this.int32(1189204285);
        this.string(params.url);
      },
      "recentMeUrlUser": function(params) {
        this.int32(-1188296222);
        this.string(params.url);
        this.long(params.user_id);
      },
      "recentMeUrlChat": function(params) {
        this.int32(-1294306862);
        this.string(params.url);
        this.long(params.chat_id);
      },
      "recentMeUrlChatInvite": function(params) {
        this.int32(-347535331);
        this.string(params.url);
        this.predicate(params.chat_invite);
      },
      "recentMeUrlStickerSet": function(params) {
        this.int32(-1140172836);
        this.string(params.url);
        this.predicate(params.set);
      },
      "help.recentMeUrls": function(params) {
        this.int32(235081943);
        this.vector(this.predicate, params.urls);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "channels.channelParticipantsNotModified": function(params) {
        this.int32(-266911767);
      },
      "messages.messagesNotModified": function(params) {
        this.int32(1951620897);
        this.int(params.count);
      },
      "inputSingleMedia": function(params) {
        this.int32(482797855);
        const flags = this.has(params.entities) << 0;
        this.int32(flags);
        this.predicate(params.media);
        this.long(params.random_id);
        this.string(params.message);
        this.flagVector(this.predicate, params.entities);
      },
      "webAuthorization": function(params) {
        this.int32(-1493633966);
        this.long(params.hash);
        this.long(params.bot_id);
        this.string(params.domain);
        this.string(params.browser);
        this.string(params.platform);
        this.int(params.date_created);
        this.int(params.date_active);
        this.string(params.ip);
        this.string(params.region);
      },
      "account.webAuthorizations": function(params) {
        this.int32(-313079300);
        this.vector(this.predicate, params.authorizations);
        this.vector(this.predicate, params.users);
      },
      "inputMessageID": function(params) {
        this.int32(-1502174430);
        this.int(params.id);
      },
      "inputMessageReplyTo": function(params) {
        this.int32(-1160215659);
        this.int(params.id);
      },
      "inputMessagePinned": function(params) {
        this.int32(-2037963464);
      },
      "messageEntityPhone": function(params) {
        this.int32(-1687559349);
        this.int(params.offset);
        this.int(params.length);
      },
      "messageEntityCashtag": function(params) {
        this.int32(1280209983);
        this.int(params.offset);
        this.int(params.length);
      },
      "messageActionBotAllowed": function(params) {
        this.int32(-988359047);
        const flags = this.has(params.attach_menu) << 1 | this.has(params.domain) << 0 | this.has(params.app) << 2;
        this.int32(flags);
        this.flag(this.string, params.domain);
        this.flag(this.predicate, params.app);
      },
      "inputDialogPeer": function(params) {
        this.int32(-55902537);
        this.predicate(params.peer);
      },
      "dialogPeer": function(params) {
        this.int32(-445792507);
        this.predicate(params.peer);
      },
      "messages.foundStickerSetsNotModified": function(params) {
        this.int32(223655517);
      },
      "messages.foundStickerSets": function(params) {
        this.int32(-1963942446);
        this.long(params.hash);
        this.vector(this.predicate, params.sets);
      },
      "fileHash": function(params) {
        this.int32(-207944868);
        this.long(params.offset);
        this.int(params.limit);
        this.bytes(params.hash);
      },
      "webDocumentNoProxy": function(params) {
        this.int32(-104284986);
        this.string(params.url);
        this.int(params.size);
        this.string(params.mime_type);
        this.vector(this.predicate, params.attributes);
      },
      "inputClientProxy": function(params) {
        this.int32(1968737087);
        this.string(params.address);
        this.int(params.port);
      },
      "help.termsOfServiceUpdateEmpty": function(params) {
        this.int32(-483352705);
        this.int(params.expires);
      },
      "help.termsOfServiceUpdate": function(params) {
        this.int32(686618977);
        this.int(params.expires);
        this.predicate(params.terms_of_service);
      },
      "inputSecureFileUploaded": function(params) {
        this.int32(859091184);
        this.long(params.id);
        this.int(params.parts);
        this.string(params.md5_checksum);
        this.bytes(params.file_hash);
        this.bytes(params.secret);
      },
      "inputSecureFile": function(params) {
        this.int32(1399317950);
        this.long(params.id);
        this.long(params.access_hash);
      },
      "inputSecureFileLocation": function(params) {
        this.int32(-876089816);
        this.long(params.id);
        this.long(params.access_hash);
      },
      "secureFileEmpty": function(params) {
        this.int32(1679398724);
      },
      "secureFile": function(params) {
        this.int32(2097791614);
        this.long(params.id);
        this.long(params.access_hash);
        this.long(params.size);
        this.int(params.dc_id);
        this.int(params.date);
        this.bytes(params.file_hash);
        this.bytes(params.secret);
      },
      "secureData": function(params) {
        this.int32(-1964327229);
        this.bytes(params.data);
        this.bytes(params.data_hash);
        this.bytes(params.secret);
      },
      "securePlainPhone": function(params) {
        this.int32(2103482845);
        this.string(params.phone);
      },
      "securePlainEmail": function(params) {
        this.int32(569137759);
        this.string(params.email);
      },
      "secureValueTypePersonalDetails": function(params) {
        this.int32(-1658158621);
      },
      "secureValueTypePassport": function(params) {
        this.int32(1034709504);
      },
      "secureValueTypeDriverLicense": function(params) {
        this.int32(115615172);
      },
      "secureValueTypeIdentityCard": function(params) {
        this.int32(-1596951477);
      },
      "secureValueTypeInternalPassport": function(params) {
        this.int32(-1717268701);
      },
      "secureValueTypeAddress": function(params) {
        this.int32(-874308058);
      },
      "secureValueTypeUtilityBill": function(params) {
        this.int32(-63531698);
      },
      "secureValueTypeBankStatement": function(params) {
        this.int32(-1995211763);
      },
      "secureValueTypeRentalAgreement": function(params) {
        this.int32(-1954007928);
      },
      "secureValueTypePassportRegistration": function(params) {
        this.int32(-1713143702);
      },
      "secureValueTypeTemporaryRegistration": function(params) {
        this.int32(-368907213);
      },
      "secureValueTypePhone": function(params) {
        this.int32(-1289704741);
      },
      "secureValueTypeEmail": function(params) {
        this.int32(-1908627474);
      },
      "secureValue": function(params) {
        this.int32(411017418);
        const flags = this.has(params.data) << 0 | this.has(params.front_side) << 1 | this.has(params.reverse_side) << 2 | this.has(params.selfie) << 3 | this.has(params.translation) << 6 | this.has(params.files) << 4 | this.has(params.plain_data) << 5;
        this.int32(flags);
        this.predicate(params.type);
        this.flag(this.predicate, params.data);
        this.flag(this.predicate, params.front_side);
        this.flag(this.predicate, params.reverse_side);
        this.flag(this.predicate, params.selfie);
        this.flagVector(this.predicate, params.translation);
        this.flagVector(this.predicate, params.files);
        this.flag(this.predicate, params.plain_data);
        this.bytes(params.hash);
      },
      "inputSecureValue": function(params) {
        this.int32(-618540889);
        const flags = this.has(params.data) << 0 | this.has(params.front_side) << 1 | this.has(params.reverse_side) << 2 | this.has(params.selfie) << 3 | this.has(params.translation) << 6 | this.has(params.files) << 4 | this.has(params.plain_data) << 5;
        this.int32(flags);
        this.predicate(params.type);
        this.flag(this.predicate, params.data);
        this.flag(this.predicate, params.front_side);
        this.flag(this.predicate, params.reverse_side);
        this.flag(this.predicate, params.selfie);
        this.flagVector(this.predicate, params.translation);
        this.flagVector(this.predicate, params.files);
        this.flag(this.predicate, params.plain_data);
      },
      "secureValueHash": function(params) {
        this.int32(-316748368);
        this.predicate(params.type);
        this.bytes(params.hash);
      },
      "secureValueErrorData": function(params) {
        this.int32(-391902247);
        this.predicate(params.type);
        this.bytes(params.data_hash);
        this.string(params.field);
        this.string(params.text);
      },
      "secureValueErrorFrontSide": function(params) {
        this.int32(12467706);
        this.predicate(params.type);
        this.bytes(params.file_hash);
        this.string(params.text);
      },
      "secureValueErrorReverseSide": function(params) {
        this.int32(-2037765467);
        this.predicate(params.type);
        this.bytes(params.file_hash);
        this.string(params.text);
      },
      "secureValueErrorSelfie": function(params) {
        this.int32(-449327402);
        this.predicate(params.type);
        this.bytes(params.file_hash);
        this.string(params.text);
      },
      "secureValueErrorFile": function(params) {
        this.int32(2054162547);
        this.predicate(params.type);
        this.bytes(params.file_hash);
        this.string(params.text);
      },
      "secureValueErrorFiles": function(params) {
        this.int32(1717706985);
        this.predicate(params.type);
        this.vector(this.bytes, params.file_hash);
        this.string(params.text);
      },
      "secureCredentialsEncrypted": function(params) {
        this.int32(871426631);
        this.bytes(params.data);
        this.bytes(params.hash);
        this.bytes(params.secret);
      },
      "account.authorizationForm": function(params) {
        this.int32(-1389486888);
        const flags = this.has(params.privacy_policy_url) << 0;
        this.int32(flags);
        this.vector(this.predicate, params.required_types);
        this.vector(this.predicate, params.values);
        this.vector(this.predicate, params.errors);
        this.vector(this.predicate, params.users);
        this.flag(this.string, params.privacy_policy_url);
      },
      "account.sentEmailCode": function(params) {
        this.int32(-2128640689);
        this.string(params.email_pattern);
        this.int(params.length);
      },
      "messageActionSecureValuesSentMe": function(params) {
        this.int32(455635795);
        this.vector(this.predicate, params.values);
        this.predicate(params.credentials);
      },
      "messageActionSecureValuesSent": function(params) {
        this.int32(-648257196);
        this.vector(this.predicate, params.types);
      },
      "help.deepLinkInfoEmpty": function(params) {
        this.int32(1722786150);
      },
      "help.deepLinkInfo": function(params) {
        this.int32(1783556146);
        const flags = this.has(params.update_app) << 0 | this.has(params.entities) << 1;
        this.int32(flags);
        this.string(params.message);
        this.flagVector(this.predicate, params.entities);
      },
      "savedPhoneContact": function(params) {
        this.int32(289586518);
        this.string(params.phone);
        this.string(params.first_name);
        this.string(params.last_name);
        this.int(params.date);
      },
      "account.takeout": function(params) {
        this.int32(1304052993);
        this.long(params.id);
      },
      "inputTakeoutFileLocation": function(params) {
        this.int32(700340377);
      },
      "updateDialogUnreadMark": function(params) {
        this.int32(-513517117);
        const flags = this.has(params.unread) << 0;
        this.int32(flags);
        this.predicate(params.peer);
      },
      "messages.dialogsNotModified": function(params) {
        this.int32(-253500010);
        this.int(params.count);
      },
      "inputWebFileGeoPointLocation": function(params) {
        this.int32(-1625153079);
        this.predicate(params.geo_point);
        this.long(params.access_hash);
        this.int(params.w);
        this.int(params.h);
        this.int(params.zoom);
        this.int(params.scale);
      },
      "contacts.topPeersDisabled": function(params) {
        this.int32(-1255369827);
      },
      "inputReportReasonCopyright": function(params) {
        this.int32(-1685456582);
      },
      "passwordKdfAlgoUnknown": function(params) {
        this.int32(-732254058);
      },
      "securePasswordKdfAlgoUnknown": function(params) {
        this.int32(4883767);
      },
      "securePasswordKdfAlgoPBKDF2HMACSHA512iter100000": function(params) {
        this.int32(-1141711456);
        this.bytes(params.salt);
      },
      "securePasswordKdfAlgoSHA512": function(params) {
        this.int32(-2042159726);
        this.bytes(params.salt);
      },
      "secureSecretSettings": function(params) {
        this.int32(354925740);
        this.predicate(params.secure_algo);
        this.bytes(params.secure_secret);
        this.long(params.secure_secret_id);
      },
      "passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow": function(params) {
        this.int32(982592842);
        this.bytes(params.salt1);
        this.bytes(params.salt2);
        this.int(params.g);
        this.bytes(params.p);
      },
      "inputCheckPasswordEmpty": function(params) {
        this.int32(-1736378792);
      },
      "inputCheckPasswordSRP": function(params) {
        this.int32(-763367294);
        this.long(params.srp_id);
        this.bytes(params.A);
        this.bytes(params.M1);
      },
      "secureValueError": function(params) {
        this.int32(-2036501105);
        this.predicate(params.type);
        this.bytes(params.hash);
        this.string(params.text);
      },
      "secureValueErrorTranslationFile": function(params) {
        this.int32(-1592506512);
        this.predicate(params.type);
        this.bytes(params.file_hash);
        this.string(params.text);
      },
      "secureValueErrorTranslationFiles": function(params) {
        this.int32(878931416);
        this.predicate(params.type);
        this.vector(this.bytes, params.file_hash);
        this.string(params.text);
      },
      "secureRequiredType": function(params) {
        this.int32(-2103600678);
        const flags = this.has(params.native_names) << 0 | this.has(params.selfie_required) << 1 | this.has(params.translation_required) << 2;
        this.int32(flags);
        this.predicate(params.type);
      },
      "secureRequiredTypeOneOf": function(params) {
        this.int32(41187252);
        this.vector(this.predicate, params.types);
      },
      "help.passportConfigNotModified": function(params) {
        this.int32(-1078332329);
      },
      "help.passportConfig": function(params) {
        this.int32(-1600596305);
        this.int(params.hash);
        this.predicate(params.countries_langs);
      },
      "inputAppEvent": function(params) {
        this.int32(488313413);
        this.double(params.time);
        this.string(params.type);
        this.long(params.peer);
        this.predicate(params.data);
      },
      "jsonObjectValue": function(params) {
        this.int32(-1059185703);
        this.string(params.key);
        this.predicate(params.value);
      },
      "jsonNull": function(params) {
        this.int32(1064139624);
      },
      "jsonBool": function(params) {
        this.int32(-952869270);
        this.Bool(params.value);
      },
      "jsonNumber": function(params) {
        this.int32(736157604);
        this.double(params.value);
      },
      "jsonString": function(params) {
        this.int32(-1222740358);
        this.string(params.value);
      },
      "jsonArray": function(params) {
        this.int32(-146520221);
        this.vector(this.predicate, params.value);
      },
      "jsonObject": function(params) {
        this.int32(-1715350371);
        this.vector(this.predicate, params.value);
      },
      "inputNotifyBroadcasts": function(params) {
        this.int32(-1311015810);
      },
      "notifyBroadcasts": function(params) {
        this.int32(-703403793);
      },
      "textSubscript": function(params) {
        this.int32(-311786236);
        this.predicate(params.text);
      },
      "textSuperscript": function(params) {
        this.int32(-939827711);
        this.predicate(params.text);
      },
      "textMarked": function(params) {
        this.int32(55281185);
        this.predicate(params.text);
      },
      "textPhone": function(params) {
        this.int32(483104362);
        this.predicate(params.text);
        this.string(params.phone);
      },
      "textImage": function(params) {
        this.int32(136105807);
        this.long(params.document_id);
        this.int(params.w);
        this.int(params.h);
      },
      "pageBlockKicker": function(params) {
        this.int32(504660880);
        this.predicate(params.text);
      },
      "pageTableCell": function(params) {
        this.int32(878078826);
        const flags = this.has(params.header) << 0 | this.has(params.align_center) << 3 | this.has(params.align_right) << 4 | this.has(params.valign_middle) << 5 | this.has(params.valign_bottom) << 6 | this.has(params.text) << 7 | this.has(params.colspan) << 1 | this.has(params.rowspan) << 2;
        this.int32(flags);
        this.flag(this.predicate, params.text);
        this.flag(this.int, params.colspan);
        this.flag(this.int, params.rowspan);
      },
      "pageTableRow": function(params) {
        this.int32(-524237339);
        this.vector(this.predicate, params.cells);
      },
      "pageBlockTable": function(params) {
        this.int32(-1085412734);
        const flags = this.has(params.bordered) << 0 | this.has(params.striped) << 1;
        this.int32(flags);
        this.predicate(params.title);
        this.vector(this.predicate, params.rows);
      },
      "pageCaption": function(params) {
        this.int32(1869903447);
        this.predicate(params.text);
        this.predicate(params.credit);
      },
      "pageListItemText": function(params) {
        this.int32(-1188055347);
        this.predicate(params.text);
      },
      "pageListItemBlocks": function(params) {
        this.int32(635466748);
        this.vector(this.predicate, params.blocks);
      },
      "pageListOrderedItemText": function(params) {
        this.int32(1577484359);
        this.string(params.num);
        this.predicate(params.text);
      },
      "pageListOrderedItemBlocks": function(params) {
        this.int32(-1730311882);
        this.string(params.num);
        this.vector(this.predicate, params.blocks);
      },
      "pageBlockOrderedList": function(params) {
        this.int32(-1702174239);
        this.vector(this.predicate, params.items);
      },
      "pageBlockDetails": function(params) {
        this.int32(1987480557);
        const flags = this.has(params.open) << 0;
        this.int32(flags);
        this.vector(this.predicate, params.blocks);
        this.predicate(params.title);
      },
      "pageRelatedArticle": function(params) {
        this.int32(-1282352120);
        const flags = this.has(params.title) << 0 | this.has(params.description) << 1 | this.has(params.photo_id) << 2 | this.has(params.author) << 3 | this.has(params.published_date) << 4;
        this.int32(flags);
        this.string(params.url);
        this.long(params.webpage_id);
        this.flag(this.string, params.title);
        this.flag(this.string, params.description);
        this.flag(this.long, params.photo_id);
        this.flag(this.string, params.author);
        this.flag(this.int, params.published_date);
      },
      "pageBlockRelatedArticles": function(params) {
        this.int32(370236054);
        this.predicate(params.title);
        this.vector(this.predicate, params.articles);
      },
      "pageBlockMap": function(params) {
        this.int32(-1538310410);
        this.predicate(params.geo);
        this.int(params.zoom);
        this.int(params.w);
        this.int(params.h);
        this.predicate(params.caption);
      },
      "page": function(params) {
        this.int32(-1738178803);
        const flags = this.has(params.part) << 0 | this.has(params.rtl) << 1 | this.has(params.v2) << 2 | this.has(params.views) << 3;
        this.int32(flags);
        this.string(params.url);
        this.vector(this.predicate, params.blocks);
        this.vector(this.predicate, params.photos);
        this.vector(this.predicate, params.documents);
        this.flag(this.int, params.views);
      },
      "inputPrivacyKeyPhoneP2P": function(params) {
        this.int32(-610373422);
      },
      "privacyKeyPhoneP2P": function(params) {
        this.int32(961092808);
      },
      "textAnchor": function(params) {
        this.int32(894777186);
        this.predicate(params.text);
        this.string(params.name);
      },
      "help.supportName": function(params) {
        this.int32(-1945767479);
        this.string(params.name);
      },
      "help.userInfoEmpty": function(params) {
        this.int32(-206688531);
      },
      "help.userInfo": function(params) {
        this.int32(32192344);
        this.string(params.message);
        this.vector(this.predicate, params.entities);
        this.string(params.author);
        this.int(params.date);
      },
      "messageActionContactSignUp": function(params) {
        this.int32(-202219658);
      },
      "updateMessagePoll": function(params) {
        this.int32(-1398708869);
        const flags = this.has(params.poll) << 0;
        this.int32(flags);
        this.long(params.poll_id);
        this.flag(this.predicate, params.poll);
        this.predicate(params.results);
      },
      "pollAnswer": function(params) {
        this.int32(1823064809);
        this.string(params.text);
        this.bytes(params.option);
      },
      "poll": function(params) {
        this.int32(-2032041631);
        this.long(params.id);
        const flags = this.has(params.closed) << 0 | this.has(params.public_voters) << 1 | this.has(params.multiple_choice) << 2 | this.has(params.quiz) << 3 | this.has(params.close_period) << 4 | this.has(params.close_date) << 5;
        this.int32(flags);
        this.string(params.question);
        this.vector(this.predicate, params.answers);
        this.flag(this.int, params.close_period);
        this.flag(this.int, params.close_date);
      },
      "pollAnswerVoters": function(params) {
        this.int32(997055186);
        const flags = this.has(params.chosen) << 0 | this.has(params.correct) << 1;
        this.int32(flags);
        this.bytes(params.option);
        this.int(params.voters);
      },
      "pollResults": function(params) {
        this.int32(-591909213);
        const flags = this.has(params.min) << 0 | this.has(params.results) << 1 | this.has(params.total_voters) << 2 | this.has(params.recent_voters) << 3 | this.has(params.solution) << 4 | this.has(params.solution_entities) << 4;
        this.int32(flags);
        this.flagVector(this.predicate, params.results);
        this.flag(this.int, params.total_voters);
        this.flagVector(this.long, params.recent_voters);
        this.flag(this.string, params.solution);
        this.flagVector(this.predicate, params.solution_entities);
      },
      "inputMediaPoll": function(params) {
        this.int32(261416433);
        const flags = this.has(params.correct_answers) << 0 | this.has(params.solution) << 1 | this.has(params.solution_entities) << 1;
        this.int32(flags);
        this.predicate(params.poll);
        this.flagVector(this.bytes, params.correct_answers);
        this.flag(this.string, params.solution);
        this.flagVector(this.predicate, params.solution_entities);
      },
      "messageMediaPoll": function(params) {
        this.int32(1272375192);
        this.predicate(params.poll);
        this.predicate(params.results);
      },
      "chatOnlines": function(params) {
        this.int32(-264117680);
        this.int(params.onlines);
      },
      "statsURL": function(params) {
        this.int32(1202287072);
        this.string(params.url);
      },
      "photoStrippedSize": function(params) {
        this.int32(-525288402);
        this.string(params.type);
        this.bytes(params.bytes);
      },
      "chatAdminRights": function(params) {
        this.int32(1605510357);
        const flags = this.has(params.change_info) << 0 | this.has(params.post_messages) << 1 | this.has(params.edit_messages) << 2 | this.has(params.delete_messages) << 3 | this.has(params.ban_users) << 4 | this.has(params.invite_users) << 5 | this.has(params.pin_messages) << 7 | this.has(params.add_admins) << 9 | this.has(params.anonymous) << 10 | this.has(params.manage_call) << 11 | this.has(params.other) << 12 | this.has(params.manage_topics) << 13;
        this.int32(flags);
      },
      "chatBannedRights": function(params) {
        this.int32(-1626209256);
        const flags = this.has(params.view_messages) << 0 | this.has(params.send_messages) << 1 | this.has(params.send_media) << 2 | this.has(params.send_stickers) << 3 | this.has(params.send_gifs) << 4 | this.has(params.send_games) << 5 | this.has(params.send_inline) << 6 | this.has(params.embed_links) << 7 | this.has(params.send_polls) << 8 | this.has(params.change_info) << 10 | this.has(params.invite_users) << 15 | this.has(params.pin_messages) << 17 | this.has(params.manage_topics) << 18 | this.has(params.send_photos) << 19 | this.has(params.send_videos) << 20 | this.has(params.send_roundvideos) << 21 | this.has(params.send_audios) << 22 | this.has(params.send_voices) << 23 | this.has(params.send_docs) << 24 | this.has(params.send_plain) << 25;
        this.int32(flags);
        this.int(params.until_date);
      },
      "updateChatDefaultBannedRights": function(params) {
        this.int32(1421875280);
        this.predicate(params.peer);
        this.predicate(params.default_banned_rights);
        this.int(params.version);
      },
      "inputWallPaper": function(params) {
        this.int32(-433014407);
        this.long(params.id);
        this.long(params.access_hash);
      },
      "inputWallPaperSlug": function(params) {
        this.int32(1913199744);
        this.string(params.slug);
      },
      "channelParticipantsContacts": function(params) {
        this.int32(-1150621555);
        this.string(params.q);
      },
      "channelAdminLogEventActionDefaultBannedRights": function(params) {
        this.int32(771095562);
        this.predicate(params.prev_banned_rights);
        this.predicate(params.new_banned_rights);
      },
      "channelAdminLogEventActionStopPoll": function(params) {
        this.int32(-1895328189);
        this.predicate(params.message);
      },
      "account.wallPapersNotModified": function(params) {
        this.int32(471437699);
      },
      "account.wallPapers": function(params) {
        this.int32(-842824308);
        this.long(params.hash);
        this.vector(this.predicate, params.wallpapers);
      },
      "codeSettings": function(params) {
        this.int32(-1390068360);
        const flags = this.has(params.allow_flashcall) << 0 | this.has(params.current_number) << 1 | this.has(params.allow_app_hash) << 4 | this.has(params.allow_missed_call) << 5 | this.has(params.allow_firebase) << 7 | this.has(params.logout_tokens) << 6 | this.has(params.token) << 8 | this.has(params.app_sandbox) << 8;
        this.int32(flags);
        this.flagVector(this.bytes, params.logout_tokens);
        this.flag(this.string, params.token);
        this.flag(this.Bool, params.app_sandbox);
      },
      "wallPaperSettings": function(params) {
        this.int32(499236004);
        const flags = this.has(params.blur) << 1 | this.has(params.motion) << 2 | this.has(params.background_color) << 0 | this.has(params.second_background_color) << 4 | this.has(params.third_background_color) << 5 | this.has(params.fourth_background_color) << 6 | this.has(params.intensity) << 3 | this.has(params.rotation) << 4;
        this.int32(flags);
        this.flag(this.int, params.background_color);
        this.flag(this.int, params.second_background_color);
        this.flag(this.int, params.third_background_color);
        this.flag(this.int, params.fourth_background_color);
        this.flag(this.int, params.intensity);
        this.flag(this.int, params.rotation);
      },
      "autoDownloadSettings": function(params) {
        this.int32(-1896171181);
        const flags = this.has(params.disabled) << 0 | this.has(params.video_preload_large) << 1 | this.has(params.audio_preload_next) << 2 | this.has(params.phonecalls_less_data) << 3;
        this.int32(flags);
        this.int(params.photo_size_max);
        this.long(params.video_size_max);
        this.long(params.file_size_max);
        this.int(params.video_upload_maxbitrate);
      },
      "account.autoDownloadSettings": function(params) {
        this.int32(1674235686);
        this.predicate(params.low);
        this.predicate(params.medium);
        this.predicate(params.high);
      },
      "emojiKeyword": function(params) {
        this.int32(-709641735);
        this.string(params.keyword);
        this.vector(this.string, params.emoticons);
      },
      "emojiKeywordDeleted": function(params) {
        this.int32(594408994);
        this.string(params.keyword);
        this.vector(this.string, params.emoticons);
      },
      "emojiKeywordsDifference": function(params) {
        this.int32(1556570557);
        this.string(params.lang_code);
        this.int(params.from_version);
        this.int(params.version);
        this.vector(this.predicate, params.keywords);
      },
      "emojiURL": function(params) {
        this.int32(-1519029347);
        this.string(params.url);
      },
      "emojiLanguage": function(params) {
        this.int32(-1275374751);
        this.string(params.lang_code);
      },
      "inputPrivacyKeyForwards": function(params) {
        this.int32(-1529000952);
      },
      "privacyKeyForwards": function(params) {
        this.int32(1777096355);
      },
      "inputPrivacyKeyProfilePhoto": function(params) {
        this.int32(1461304012);
      },
      "privacyKeyProfilePhoto": function(params) {
        this.int32(-1777000467);
      },
      "inputPhotoFileLocation": function(params) {
        this.int32(1075322878);
        this.long(params.id);
        this.long(params.access_hash);
        this.bytes(params.file_reference);
        this.string(params.thumb_size);
      },
      "inputPhotoLegacyFileLocation": function(params) {
        this.int32(-667654413);
        this.long(params.id);
        this.long(params.access_hash);
        this.bytes(params.file_reference);
        this.long(params.volume_id);
        this.int(params.local_id);
        this.long(params.secret);
      },
      "inputPeerPhotoFileLocation": function(params) {
        this.int32(925204121);
        const flags = this.has(params.big) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.long(params.photo_id);
      },
      "inputStickerSetThumb": function(params) {
        this.int32(-1652231205);
        this.predicate(params.stickerset);
        this.int(params.thumb_version);
      },
      "folder": function(params) {
        this.int32(-11252123);
        const flags = this.has(params.autofill_new_broadcasts) << 0 | this.has(params.autofill_public_groups) << 1 | this.has(params.autofill_new_correspondents) << 2 | this.has(params.photo) << 3;
        this.int32(flags);
        this.int(params.id);
        this.string(params.title);
        this.flag(this.predicate, params.photo);
      },
      "dialogFolder": function(params) {
        this.int32(1908216652);
        const flags = this.has(params.pinned) << 2;
        this.int32(flags);
        this.predicate(params.folder);
        this.predicate(params.peer);
        this.int(params.top_message);
        this.int(params.unread_muted_peers_count);
        this.int(params.unread_unmuted_peers_count);
        this.int(params.unread_muted_messages_count);
        this.int(params.unread_unmuted_messages_count);
      },
      "inputDialogPeerFolder": function(params) {
        this.int32(1684014375);
        this.int(params.folder_id);
      },
      "dialogPeerFolder": function(params) {
        this.int32(1363483106);
        this.int(params.folder_id);
      },
      "inputFolderPeer": function(params) {
        this.int32(-70073706);
        this.predicate(params.peer);
        this.int(params.folder_id);
      },
      "folderPeer": function(params) {
        this.int32(-373643672);
        this.predicate(params.peer);
        this.int(params.folder_id);
      },
      "updateFolderPeers": function(params) {
        this.int32(422972864);
        this.vector(this.predicate, params.folder_peers);
        this.int(params.pts);
        this.int(params.pts_count);
      },
      "inputUserFromMessage": function(params) {
        this.int32(497305826);
        this.predicate(params.peer);
        this.int(params.msg_id);
        this.long(params.user_id);
      },
      "inputChannelFromMessage": function(params) {
        this.int32(1536380829);
        this.predicate(params.peer);
        this.int(params.msg_id);
        this.long(params.channel_id);
      },
      "inputPeerUserFromMessage": function(params) {
        this.int32(-1468331492);
        this.predicate(params.peer);
        this.int(params.msg_id);
        this.long(params.user_id);
      },
      "inputPeerChannelFromMessage": function(params) {
        this.int32(-1121318848);
        this.predicate(params.peer);
        this.int(params.msg_id);
        this.long(params.channel_id);
      },
      "inputPrivacyKeyPhoneNumber": function(params) {
        this.int32(55761658);
      },
      "privacyKeyPhoneNumber": function(params) {
        this.int32(-778378131);
      },
      "topPeerCategoryForwardUsers": function(params) {
        this.int32(-1472172887);
      },
      "topPeerCategoryForwardChats": function(params) {
        this.int32(-68239120);
      },
      "channelAdminLogEventActionChangeLinkedChat": function(params) {
        this.int32(84703944);
        this.long(params.prev_value);
        this.long(params.new_value);
      },
      "messages.searchCounter": function(params) {
        this.int32(-398136321);
        const flags = this.has(params.inexact) << 1;
        this.int32(flags);
        this.predicate(params.filter);
        this.int(params.count);
      },
      "keyboardButtonUrlAuth": function(params) {
        this.int32(280464681);
        const flags = this.has(params.fwd_text) << 0;
        this.int32(flags);
        this.string(params.text);
        this.flag(this.string, params.fwd_text);
        this.string(params.url);
        this.int(params.button_id);
      },
      "inputKeyboardButtonUrlAuth": function(params) {
        this.int32(-802258988);
        const flags = this.has(params.request_write_access) << 0 | this.has(params.fwd_text) << 1;
        this.int32(flags);
        this.string(params.text);
        this.flag(this.string, params.fwd_text);
        this.string(params.url);
        this.predicate(params.bot);
      },
      "urlAuthResultRequest": function(params) {
        this.int32(-1831650802);
        const flags = this.has(params.request_write_access) << 0;
        this.int32(flags);
        this.predicate(params.bot);
        this.string(params.domain);
      },
      "urlAuthResultAccepted": function(params) {
        this.int32(-1886646706);
        this.string(params.url);
      },
      "urlAuthResultDefault": function(params) {
        this.int32(-1445536993);
      },
      "inputPrivacyValueAllowChatParticipants": function(params) {
        this.int32(-2079962673);
        this.vector(this.long, params.chats);
      },
      "inputPrivacyValueDisallowChatParticipants": function(params) {
        this.int32(-380694650);
        this.vector(this.long, params.chats);
      },
      "privacyValueAllowChatParticipants": function(params) {
        this.int32(1796427406);
        this.vector(this.long, params.chats);
      },
      "privacyValueDisallowChatParticipants": function(params) {
        this.int32(1103656293);
        this.vector(this.long, params.chats);
      },
      "messageEntityUnderline": function(params) {
        this.int32(-1672577397);
        this.int(params.offset);
        this.int(params.length);
      },
      "messageEntityStrike": function(params) {
        this.int32(-1090087980);
        this.int(params.offset);
        this.int(params.length);
      },
      "messageEntityBlockquote": function(params) {
        this.int32(34469328);
        this.int(params.offset);
        this.int(params.length);
      },
      "updatePeerSettings": function(params) {
        this.int32(1786671974);
        this.predicate(params.peer);
        this.predicate(params.settings);
      },
      "channelLocationEmpty": function(params) {
        this.int32(-1078612597);
      },
      "channelLocation": function(params) {
        this.int32(547062491);
        this.predicate(params.geo_point);
        this.string(params.address);
      },
      "peerLocated": function(params) {
        this.int32(-901375139);
        this.predicate(params.peer);
        this.int(params.expires);
        this.int(params.distance);
      },
      "updatePeerLocated": function(params) {
        this.int32(-1263546448);
        this.vector(this.predicate, params.peers);
      },
      "channelAdminLogEventActionChangeLocation": function(params) {
        this.int32(241923758);
        this.predicate(params.prev_value);
        this.predicate(params.new_value);
      },
      "inputReportReasonGeoIrrelevant": function(params) {
        this.int32(-606798099);
      },
      "channelAdminLogEventActionToggleSlowMode": function(params) {
        this.int32(1401984889);
        this.int(params.prev_value);
        this.int(params.new_value);
      },
      "auth.authorizationSignUpRequired": function(params) {
        this.int32(1148485274);
        const flags = this.has(params.terms_of_service) << 0;
        this.int32(flags);
        this.flag(this.predicate, params.terms_of_service);
      },
      "payments.paymentVerificationNeeded": function(params) {
        this.int32(-666824391);
        this.string(params.url);
      },
      "inputStickerSetAnimatedEmoji": function(params) {
        this.int32(42402760);
      },
      "updateNewScheduledMessage": function(params) {
        this.int32(967122427);
        this.predicate(params.message);
      },
      "updateDeleteScheduledMessages": function(params) {
        this.int32(-1870238482);
        this.predicate(params.peer);
        this.vector(this.int, params.messages);
      },
      "restrictionReason": function(params) {
        this.int32(-797791052);
        this.string(params.platform);
        this.string(params.reason);
        this.string(params.text);
      },
      "inputTheme": function(params) {
        this.int32(1012306921);
        this.long(params.id);
        this.long(params.access_hash);
      },
      "inputThemeSlug": function(params) {
        this.int32(-175567375);
        this.string(params.slug);
      },
      "theme": function(params) {
        this.int32(-1609668650);
        const flags = this.has(params.creator) << 0 | this.has(params.default) << 1 | this.has(params.for_chat) << 5 | this.has(params.document) << 2 | this.has(params.settings) << 3 | this.has(params.emoticon) << 6 | this.has(params.installs_count) << 4;
        this.int32(flags);
        this.long(params.id);
        this.long(params.access_hash);
        this.string(params.slug);
        this.string(params.title);
        this.flag(this.predicate, params.document);
        this.flagVector(this.predicate, params.settings);
        this.flag(this.string, params.emoticon);
        this.flag(this.int, params.installs_count);
      },
      "account.themesNotModified": function(params) {
        this.int32(-199313886);
      },
      "account.themes": function(params) {
        this.int32(-1707242387);
        this.long(params.hash);
        this.vector(this.predicate, params.themes);
      },
      "updateTheme": function(params) {
        this.int32(-2112423005);
        this.predicate(params.theme);
      },
      "inputPrivacyKeyAddedByPhone": function(params) {
        this.int32(-786326563);
      },
      "privacyKeyAddedByPhone": function(params) {
        this.int32(1124062251);
      },
      "updateGeoLiveViewed": function(params) {
        this.int32(-2027964103);
        this.predicate(params.peer);
        this.int(params.msg_id);
      },
      "updateLoginToken": function(params) {
        this.int32(1448076945);
      },
      "auth.loginToken": function(params) {
        this.int32(1654593920);
        this.int(params.expires);
        this.bytes(params.token);
      },
      "auth.loginTokenMigrateTo": function(params) {
        this.int32(110008598);
        this.int(params.dc_id);
        this.bytes(params.token);
      },
      "auth.loginTokenSuccess": function(params) {
        this.int32(957176926);
        this.predicate(params.authorization);
      },
      "account.contentSettings": function(params) {
        this.int32(1474462241);
        const flags = this.has(params.sensitive_enabled) << 0 | this.has(params.sensitive_can_change) << 1;
        this.int32(flags);
      },
      "messages.inactiveChats": function(params) {
        this.int32(-1456996667);
        this.vector(this.int, params.dates);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "baseThemeClassic": function(params) {
        this.int32(-1012849566);
      },
      "baseThemeDay": function(params) {
        this.int32(-69724536);
      },
      "baseThemeNight": function(params) {
        this.int32(-1212997976);
      },
      "baseThemeTinted": function(params) {
        this.int32(1834973166);
      },
      "baseThemeArctic": function(params) {
        this.int32(1527845466);
      },
      "inputWallPaperNoFile": function(params) {
        this.int32(-1770371538);
        this.long(params.id);
      },
      "wallPaperNoFile": function(params) {
        this.int32(-528465642);
        this.long(params.id);
        const flags = this.has(params.default) << 1 | this.has(params.dark) << 4 | this.has(params.settings) << 2;
        this.int32(flags);
        this.flag(this.predicate, params.settings);
      },
      "inputThemeSettings": function(params) {
        this.int32(-1881255857);
        const flags = this.has(params.message_colors_animated) << 2 | this.has(params.outbox_accent_color) << 3 | this.has(params.message_colors) << 0 | this.has(params.wallpaper) << 1 | this.has(params.wallpaper_settings) << 1;
        this.int32(flags);
        this.predicate(params.base_theme);
        this.int(params.accent_color);
        this.flag(this.int, params.outbox_accent_color);
        this.flagVector(this.int, params.message_colors);
        this.flag(this.predicate, params.wallpaper);
        this.flag(this.predicate, params.wallpaper_settings);
      },
      "themeSettings": function(params) {
        this.int32(-94849324);
        const flags = this.has(params.message_colors_animated) << 2 | this.has(params.outbox_accent_color) << 3 | this.has(params.message_colors) << 0 | this.has(params.wallpaper) << 1;
        this.int32(flags);
        this.predicate(params.base_theme);
        this.int(params.accent_color);
        this.flag(this.int, params.outbox_accent_color);
        this.flagVector(this.int, params.message_colors);
        this.flag(this.predicate, params.wallpaper);
      },
      "webPageAttributeTheme": function(params) {
        this.int32(1421174295);
        const flags = this.has(params.documents) << 0 | this.has(params.settings) << 1;
        this.int32(flags);
        this.flagVector(this.predicate, params.documents);
        this.flag(this.predicate, params.settings);
      },
      "updateMessagePollVote": function(params) {
        this.int32(274961865);
        this.long(params.poll_id);
        this.long(params.user_id);
        this.vector(this.bytes, params.options);
        this.int(params.qts);
      },
      "messageUserVote": function(params) {
        this.int32(886196148);
        this.long(params.user_id);
        this.bytes(params.option);
        this.int(params.date);
      },
      "messageUserVoteInputOption": function(params) {
        this.int32(1017491692);
        this.long(params.user_id);
        this.int(params.date);
      },
      "messageUserVoteMultiple": function(params) {
        this.int32(-1973033641);
        this.long(params.user_id);
        this.vector(this.bytes, params.options);
        this.int(params.date);
      },
      "messages.votesList": function(params) {
        this.int32(136574537);
        const flags = this.has(params.next_offset) << 0;
        this.int32(flags);
        this.int(params.count);
        this.vector(this.predicate, params.votes);
        this.vector(this.predicate, params.users);
        this.flag(this.string, params.next_offset);
      },
      "keyboardButtonRequestPoll": function(params) {
        this.int32(-1144565411);
        const flags = this.has(params.quiz) << 0;
        this.int32(flags);
        this.flag(this.Bool, params.quiz);
        this.string(params.text);
      },
      "messageEntityBankCard": function(params) {
        this.int32(1981704948);
        this.int(params.offset);
        this.int(params.length);
      },
      "bankCardOpenUrl": function(params) {
        this.int32(-177732982);
        this.string(params.url);
        this.string(params.name);
      },
      "payments.bankCardData": function(params) {
        this.int32(1042605427);
        this.string(params.title);
        this.vector(this.predicate, params.open_urls);
      },
      "peerSelfLocated": function(params) {
        this.int32(-118740917);
        this.int(params.expires);
      },
      "dialogFilter": function(params) {
        this.int32(1949890536);
        const flags = this.has(params.contacts) << 0 | this.has(params.non_contacts) << 1 | this.has(params.groups) << 2 | this.has(params.broadcasts) << 3 | this.has(params.bots) << 4 | this.has(params.exclude_muted) << 11 | this.has(params.exclude_read) << 12 | this.has(params.exclude_archived) << 13 | this.has(params.emoticon) << 25;
        this.int32(flags);
        this.int(params.id);
        this.string(params.title);
        this.flag(this.string, params.emoticon);
        this.vector(this.predicate, params.pinned_peers);
        this.vector(this.predicate, params.include_peers);
        this.vector(this.predicate, params.exclude_peers);
      },
      "dialogFilterSuggested": function(params) {
        this.int32(2004110666);
        this.predicate(params.filter);
        this.string(params.description);
      },
      "updateDialogFilter": function(params) {
        this.int32(654302845);
        const flags = this.has(params.filter) << 0;
        this.int32(flags);
        this.int(params.id);
        this.flag(this.predicate, params.filter);
      },
      "updateDialogFilterOrder": function(params) {
        this.int32(-1512627963);
        this.vector(this.int, params.order);
      },
      "updateDialogFilters": function(params) {
        this.int32(889491791);
      },
      "statsDateRangeDays": function(params) {
        this.int32(-1237848657);
        this.int(params.min_date);
        this.int(params.max_date);
      },
      "statsAbsValueAndPrev": function(params) {
        this.int32(-884757282);
        this.double(params.current);
        this.double(params.previous);
      },
      "statsPercentValue": function(params) {
        this.int32(-875679776);
        this.double(params.part);
        this.double(params.total);
      },
      "statsGraphAsync": function(params) {
        this.int32(1244130093);
        this.string(params.token);
      },
      "statsGraphError": function(params) {
        this.int32(-1092839390);
        this.string(params.error);
      },
      "statsGraph": function(params) {
        this.int32(-1901828938);
        const flags = this.has(params.zoom_token) << 0;
        this.int32(flags);
        this.predicate(params.json);
        this.flag(this.string, params.zoom_token);
      },
      "messageInteractionCounters": function(params) {
        this.int32(-1387279939);
        this.int(params.msg_id);
        this.int(params.views);
        this.int(params.forwards);
      },
      "stats.broadcastStats": function(params) {
        this.int32(-1107852396);
        this.predicate(params.period);
        this.predicate(params.followers);
        this.predicate(params.views_per_post);
        this.predicate(params.shares_per_post);
        this.predicate(params.enabled_notifications);
        this.predicate(params.growth_graph);
        this.predicate(params.followers_graph);
        this.predicate(params.mute_graph);
        this.predicate(params.top_hours_graph);
        this.predicate(params.interactions_graph);
        this.predicate(params.iv_interactions_graph);
        this.predicate(params.views_by_source_graph);
        this.predicate(params.new_followers_by_source_graph);
        this.predicate(params.languages_graph);
        this.vector(this.predicate, params.recent_message_interactions);
      },
      "inputMediaDice": function(params) {
        this.int32(-428884101);
        this.string(params.emoticon);
      },
      "messageMediaDice": function(params) {
        this.int32(1065280907);
        this.int(params.value);
        this.string(params.emoticon);
      },
      "inputStickerSetDice": function(params) {
        this.int32(-427863538);
        this.string(params.emoticon);
      },
      "help.promoDataEmpty": function(params) {
        this.int32(-1728664459);
        this.int(params.expires);
      },
      "help.promoData": function(params) {
        this.int32(-1942390465);
        const flags = this.has(params.proxy) << 0 | this.has(params.psa_type) << 1 | this.has(params.psa_message) << 2;
        this.int32(flags);
        this.int(params.expires);
        this.predicate(params.peer);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
        this.flag(this.string, params.psa_type);
        this.flag(this.string, params.psa_message);
      },
      "videoSize": function(params) {
        this.int32(-567037804);
        const flags = this.has(params.video_start_ts) << 0;
        this.int32(flags);
        this.string(params.type);
        this.int(params.w);
        this.int(params.h);
        this.int(params.size);
        this.flag(this.double, params.video_start_ts);
      },
      "updatePhoneCallSignalingData": function(params) {
        this.int32(643940105);
        this.long(params.phone_call_id);
        this.bytes(params.data);
      },
      "chatInvitePeek": function(params) {
        this.int32(1634294960);
        this.predicate(params.chat);
        this.int(params.expires);
      },
      "statsGroupTopPoster": function(params) {
        this.int32(-1660637285);
        this.long(params.user_id);
        this.int(params.messages);
        this.int(params.avg_chars);
      },
      "statsGroupTopAdmin": function(params) {
        this.int32(-682079097);
        this.long(params.user_id);
        this.int(params.deleted);
        this.int(params.kicked);
        this.int(params.banned);
      },
      "statsGroupTopInviter": function(params) {
        this.int32(1398765469);
        this.long(params.user_id);
        this.int(params.invitations);
      },
      "stats.megagroupStats": function(params) {
        this.int32(-276825834);
        this.predicate(params.period);
        this.predicate(params.members);
        this.predicate(params.messages);
        this.predicate(params.viewers);
        this.predicate(params.posters);
        this.predicate(params.growth_graph);
        this.predicate(params.members_graph);
        this.predicate(params.new_members_by_source_graph);
        this.predicate(params.languages_graph);
        this.predicate(params.messages_graph);
        this.predicate(params.actions_graph);
        this.predicate(params.top_hours_graph);
        this.predicate(params.weekdays_graph);
        this.vector(this.predicate, params.top_posters);
        this.vector(this.predicate, params.top_admins);
        this.vector(this.predicate, params.top_inviters);
        this.vector(this.predicate, params.users);
      },
      "globalPrivacySettings": function(params) {
        this.int32(-1096616924);
        const flags = this.has(params.archive_and_mute_new_noncontact_peers) << 0;
        this.int32(flags);
        this.flag(this.Bool, params.archive_and_mute_new_noncontact_peers);
      },
      "phoneConnectionWebrtc": function(params) {
        this.int32(1667228533);
        const flags = this.has(params.turn) << 0 | this.has(params.stun) << 1;
        this.int32(flags);
        this.long(params.id);
        this.string(params.ip);
        this.string(params.ipv6);
        this.int(params.port);
        this.string(params.username);
        this.string(params.password);
      },
      "help.countryCode": function(params) {
        this.int32(1107543535);
        const flags = this.has(params.prefixes) << 0 | this.has(params.patterns) << 1;
        this.int32(flags);
        this.string(params.country_code);
        this.flagVector(this.string, params.prefixes);
        this.flagVector(this.string, params.patterns);
      },
      "help.country": function(params) {
        this.int32(-1014526429);
        const flags = this.has(params.hidden) << 0 | this.has(params.name) << 1;
        this.int32(flags);
        this.string(params.iso2);
        this.string(params.default_name);
        this.flag(this.string, params.name);
        this.vector(this.predicate, params.country_codes);
      },
      "help.countriesListNotModified": function(params) {
        this.int32(-1815339214);
      },
      "help.countriesList": function(params) {
        this.int32(-2016381538);
        this.vector(this.predicate, params.countries);
        this.int(params.hash);
      },
      "messageViews": function(params) {
        this.int32(1163625789);
        const flags = this.has(params.views) << 0 | this.has(params.forwards) << 1 | this.has(params.replies) << 2;
        this.int32(flags);
        this.flag(this.int, params.views);
        this.flag(this.int, params.forwards);
        this.flag(this.predicate, params.replies);
      },
      "updateChannelMessageForwards": function(params) {
        this.int32(-761649164);
        this.long(params.channel_id);
        this.int(params.id);
        this.int(params.forwards);
      },
      "photoSizeProgressive": function(params) {
        this.int32(-96535659);
        this.string(params.type);
        this.int(params.w);
        this.int(params.h);
        this.vector(this.int, params.sizes);
      },
      "messages.messageViews": function(params) {
        this.int32(-1228606141);
        this.vector(this.predicate, params.views);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "updateReadChannelDiscussionInbox": function(params) {
        this.int32(-693004986);
        const flags = this.has(params.broadcast_id) << 0 | this.has(params.broadcast_post) << 0;
        this.int32(flags);
        this.long(params.channel_id);
        this.int(params.top_msg_id);
        this.int(params.read_max_id);
        this.flag(this.long, params.broadcast_id);
        this.flag(this.int, params.broadcast_post);
      },
      "updateReadChannelDiscussionOutbox": function(params) {
        this.int32(1767677564);
        this.long(params.channel_id);
        this.int(params.top_msg_id);
        this.int(params.read_max_id);
      },
      "messages.discussionMessage": function(params) {
        this.int32(-1506535550);
        const flags = this.has(params.max_id) << 0 | this.has(params.read_inbox_max_id) << 1 | this.has(params.read_outbox_max_id) << 2;
        this.int32(flags);
        this.vector(this.predicate, params.messages);
        this.flag(this.int, params.max_id);
        this.flag(this.int, params.read_inbox_max_id);
        this.flag(this.int, params.read_outbox_max_id);
        this.int(params.unread_count);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "messageReplyHeader": function(params) {
        this.int32(-1495959709);
        const flags = this.has(params.reply_to_scheduled) << 2 | this.has(params.forum_topic) << 3 | this.has(params.reply_to_peer_id) << 0 | this.has(params.reply_to_top_id) << 1;
        this.int32(flags);
        this.int(params.reply_to_msg_id);
        this.flag(this.predicate, params.reply_to_peer_id);
        this.flag(this.int, params.reply_to_top_id);
      },
      "messageReplies": function(params) {
        this.int32(-2083123262);
        const flags = this.has(params.comments) << 0 | this.has(params.recent_repliers) << 1 | this.has(params.channel_id) << 0 | this.has(params.max_id) << 2 | this.has(params.read_max_id) << 3;
        this.int32(flags);
        this.int(params.replies);
        this.int(params.replies_pts);
        this.flagVector(this.predicate, params.recent_repliers);
        this.flag(this.long, params.channel_id);
        this.flag(this.int, params.max_id);
        this.flag(this.int, params.read_max_id);
      },
      "updatePeerBlocked": function(params) {
        this.int32(610945826);
        this.predicate(params.peer_id);
        this.Bool(params.blocked);
      },
      "peerBlocked": function(params) {
        this.int32(-386039788);
        this.predicate(params.peer_id);
        this.int(params.date);
      },
      "updateChannelUserTyping": function(params) {
        this.int32(-1937192669);
        const flags = this.has(params.top_msg_id) << 0;
        this.int32(flags);
        this.long(params.channel_id);
        this.flag(this.int, params.top_msg_id);
        this.predicate(params.from_id);
        this.predicate(params.action);
      },
      "inputMessageCallbackQuery": function(params) {
        this.int32(-1392895362);
        this.int(params.id);
        this.long(params.query_id);
      },
      "channelParticipantLeft": function(params) {
        this.int32(453242886);
        this.predicate(params.peer);
      },
      "channelParticipantsMentions": function(params) {
        this.int32(-531931925);
        const flags = this.has(params.q) << 0 | this.has(params.top_msg_id) << 1;
        this.int32(flags);
        this.flag(this.string, params.q);
        this.flag(this.int, params.top_msg_id);
      },
      "updatePinnedMessages": function(params) {
        this.int32(-309990731);
        const flags = this.has(params.pinned) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.vector(this.int, params.messages);
        this.int(params.pts);
        this.int(params.pts_count);
      },
      "updatePinnedChannelMessages": function(params) {
        this.int32(1538885128);
        const flags = this.has(params.pinned) << 0;
        this.int32(flags);
        this.long(params.channel_id);
        this.vector(this.int, params.messages);
        this.int(params.pts);
        this.int(params.pts_count);
      },
      "inputMessagesFilterPinned": function(params) {
        this.int32(464520273);
      },
      "stats.messageStats": function(params) {
        this.int32(-1986399595);
        this.predicate(params.views_graph);
      },
      "messageActionGeoProximityReached": function(params) {
        this.int32(-1730095465);
        this.predicate(params.from_id);
        this.predicate(params.to_id);
        this.int(params.distance);
      },
      "photoPathSize": function(params) {
        this.int32(-668906175);
        this.string(params.type);
        this.bytes(params.bytes);
      },
      "speakingInGroupCallAction": function(params) {
        this.int32(-651419003);
      },
      "groupCallDiscarded": function(params) {
        this.int32(2004925620);
        this.long(params.id);
        this.long(params.access_hash);
        this.int(params.duration);
      },
      "groupCall": function(params) {
        this.int32(-711498484);
        const flags = this.has(params.join_muted) << 1 | this.has(params.can_change_join_muted) << 2 | this.has(params.join_date_asc) << 6 | this.has(params.schedule_start_subscribed) << 8 | this.has(params.can_start_video) << 9 | this.has(params.record_video_active) << 11 | this.has(params.rtmp_stream) << 12 | this.has(params.listeners_hidden) << 13 | this.has(params.title) << 3 | this.has(params.stream_dc_id) << 4 | this.has(params.record_start_date) << 5 | this.has(params.schedule_date) << 7 | this.has(params.unmuted_video_count) << 10;
        this.int32(flags);
        this.long(params.id);
        this.long(params.access_hash);
        this.int(params.participants_count);
        this.flag(this.string, params.title);
        this.flag(this.int, params.stream_dc_id);
        this.flag(this.int, params.record_start_date);
        this.flag(this.int, params.schedule_date);
        this.flag(this.int, params.unmuted_video_count);
        this.int(params.unmuted_video_limit);
        this.int(params.version);
      },
      "inputGroupCall": function(params) {
        this.int32(-659913713);
        this.long(params.id);
        this.long(params.access_hash);
      },
      "messageActionGroupCall": function(params) {
        this.int32(2047704898);
        const flags = this.has(params.duration) << 0;
        this.int32(flags);
        this.predicate(params.call);
        this.flag(this.int, params.duration);
      },
      "messageActionInviteToGroupCall": function(params) {
        this.int32(1345295095);
        this.predicate(params.call);
        this.vector(this.long, params.users);
      },
      "groupCallParticipant": function(params) {
        this.int32(-341428482);
        const flags = this.has(params.muted) << 0 | this.has(params.left) << 1 | this.has(params.can_self_unmute) << 2 | this.has(params.just_joined) << 4 | this.has(params.versioned) << 5 | this.has(params.min) << 8 | this.has(params.muted_by_you) << 9 | this.has(params.volume_by_admin) << 10 | this.has(params.self) << 12 | this.has(params.video_joined) << 15 | this.has(params.active_date) << 3 | this.has(params.volume) << 7 | this.has(params.about) << 11 | this.has(params.raise_hand_rating) << 13 | this.has(params.video) << 6 | this.has(params.presentation) << 14;
        this.int32(flags);
        this.predicate(params.peer);
        this.int(params.date);
        this.flag(this.int, params.active_date);
        this.int(params.source);
        this.flag(this.int, params.volume);
        this.flag(this.string, params.about);
        this.flag(this.long, params.raise_hand_rating);
        this.flag(this.predicate, params.video);
        this.flag(this.predicate, params.presentation);
      },
      "updateChat": function(params) {
        this.int32(-124097970);
        this.long(params.chat_id);
      },
      "updateGroupCallParticipants": function(params) {
        this.int32(-219423922);
        this.predicate(params.call);
        this.vector(this.predicate, params.participants);
        this.int(params.version);
      },
      "updateGroupCall": function(params) {
        this.int32(347227392);
        this.long(params.chat_id);
        this.predicate(params.call);
      },
      "phone.groupCall": function(params) {
        this.int32(-1636664659);
        this.predicate(params.call);
        this.vector(this.predicate, params.participants);
        this.string(params.participants_next_offset);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "phone.groupParticipants": function(params) {
        this.int32(-193506890);
        this.int(params.count);
        this.vector(this.predicate, params.participants);
        this.string(params.next_offset);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
        this.int(params.version);
      },
      "inlineQueryPeerTypeSameBotPM": function(params) {
        this.int32(813821341);
      },
      "inlineQueryPeerTypePM": function(params) {
        this.int32(-2093215828);
      },
      "inlineQueryPeerTypeChat": function(params) {
        this.int32(-681130742);
      },
      "inlineQueryPeerTypeMegagroup": function(params) {
        this.int32(1589952067);
      },
      "inlineQueryPeerTypeBroadcast": function(params) {
        this.int32(1664413338);
      },
      "channelAdminLogEventActionStartGroupCall": function(params) {
        this.int32(589338437);
        this.predicate(params.call);
      },
      "channelAdminLogEventActionDiscardGroupCall": function(params) {
        this.int32(-610299584);
        this.predicate(params.call);
      },
      "channelAdminLogEventActionParticipantMute": function(params) {
        this.int32(-115071790);
        this.predicate(params.participant);
      },
      "channelAdminLogEventActionParticipantUnmute": function(params) {
        this.int32(-431740480);
        this.predicate(params.participant);
      },
      "channelAdminLogEventActionToggleGroupCallSetting": function(params) {
        this.int32(1456906823);
        this.Bool(params.join_muted);
      },
      "inputPaymentCredentialsGooglePay": function(params) {
        this.int32(-1966921727);
        this.predicate(params.payment_token);
      },
      "messages.historyImport": function(params) {
        this.int32(375566091);
        this.long(params.id);
      },
      "sendMessageHistoryImportAction": function(params) {
        this.int32(-606432698);
        this.int(params.progress);
      },
      "messages.historyImportParsed": function(params) {
        this.int32(1578088377);
        const flags = this.has(params.pm) << 0 | this.has(params.group) << 1 | this.has(params.title) << 2;
        this.int32(flags);
        this.flag(this.string, params.title);
      },
      "inputReportReasonFake": function(params) {
        this.int32(-170010905);
      },
      "messages.affectedFoundMessages": function(params) {
        this.int32(-275956116);
        this.int(params.pts);
        this.int(params.pts_count);
        this.int(params.offset);
        this.vector(this.int, params.messages);
      },
      "messageActionSetMessagesTTL": function(params) {
        this.int32(1007897979);
        const flags = this.has(params.auto_setting_from) << 0;
        this.int32(flags);
        this.int(params.period);
        this.flag(this.long, params.auto_setting_from);
      },
      "updatePeerHistoryTTL": function(params) {
        this.int32(-1147422299);
        const flags = this.has(params.ttl_period) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.flag(this.int, params.ttl_period);
      },
      "updateChatParticipant": function(params) {
        this.int32(-796432838);
        const flags = this.has(params.prev_participant) << 0 | this.has(params.new_participant) << 1 | this.has(params.invite) << 2;
        this.int32(flags);
        this.long(params.chat_id);
        this.int(params.date);
        this.long(params.actor_id);
        this.long(params.user_id);
        this.flag(this.predicate, params.prev_participant);
        this.flag(this.predicate, params.new_participant);
        this.flag(this.predicate, params.invite);
        this.int(params.qts);
      },
      "updateChannelParticipant": function(params) {
        this.int32(-1738720581);
        const flags = this.has(params.via_chatlist) << 3 | this.has(params.prev_participant) << 0 | this.has(params.new_participant) << 1 | this.has(params.invite) << 2;
        this.int32(flags);
        this.long(params.channel_id);
        this.int(params.date);
        this.long(params.actor_id);
        this.long(params.user_id);
        this.flag(this.predicate, params.prev_participant);
        this.flag(this.predicate, params.new_participant);
        this.flag(this.predicate, params.invite);
        this.int(params.qts);
      },
      "updateBotStopped": function(params) {
        this.int32(-997782967);
        this.long(params.user_id);
        this.int(params.date);
        this.Bool(params.stopped);
        this.int(params.qts);
      },
      "chatInviteImporter": function(params) {
        this.int32(-1940201511);
        const flags = this.has(params.requested) << 0 | this.has(params.via_chatlist) << 3 | this.has(params.about) << 2 | this.has(params.approved_by) << 1;
        this.int32(flags);
        this.long(params.user_id);
        this.int(params.date);
        this.flag(this.string, params.about);
        this.flag(this.long, params.approved_by);
      },
      "messages.exportedChatInvites": function(params) {
        this.int32(-1111085620);
        this.int(params.count);
        this.vector(this.predicate, params.invites);
        this.vector(this.predicate, params.users);
      },
      "messages.exportedChatInvite": function(params) {
        this.int32(410107472);
        this.predicate(params.invite);
        this.vector(this.predicate, params.users);
      },
      "messages.exportedChatInviteReplaced": function(params) {
        this.int32(572915951);
        this.predicate(params.invite);
        this.predicate(params.new_invite);
        this.vector(this.predicate, params.users);
      },
      "messages.chatInviteImporters": function(params) {
        this.int32(-2118733814);
        this.int(params.count);
        this.vector(this.predicate, params.importers);
        this.vector(this.predicate, params.users);
      },
      "chatAdminWithInvites": function(params) {
        this.int32(-219353309);
        this.long(params.admin_id);
        this.int(params.invites_count);
        this.int(params.revoked_invites_count);
      },
      "messages.chatAdminsWithInvites": function(params) {
        this.int32(-1231326505);
        this.vector(this.predicate, params.admins);
        this.vector(this.predicate, params.users);
      },
      "channelAdminLogEventActionParticipantJoinByInvite": function(params) {
        this.int32(-23084712);
        const flags = this.has(params.via_chatlist) << 0;
        this.int32(flags);
        this.predicate(params.invite);
      },
      "channelAdminLogEventActionExportedInviteDelete": function(params) {
        this.int32(1515256996);
        this.predicate(params.invite);
      },
      "channelAdminLogEventActionExportedInviteRevoke": function(params) {
        this.int32(1091179342);
        this.predicate(params.invite);
      },
      "channelAdminLogEventActionExportedInviteEdit": function(params) {
        this.int32(-384910503);
        this.predicate(params.prev_invite);
        this.predicate(params.new_invite);
      },
      "channelAdminLogEventActionParticipantVolume": function(params) {
        this.int32(1048537159);
        this.predicate(params.participant);
      },
      "channelAdminLogEventActionChangeHistoryTTL": function(params) {
        this.int32(1855199800);
        this.int(params.prev_value);
        this.int(params.new_value);
      },
      "messages.checkedHistoryImportPeer": function(params) {
        this.int32(-1571952873);
        this.string(params.confirm_text);
      },
      "inputGroupCallStream": function(params) {
        this.int32(93890858);
        const flags = this.has(params.video_channel) << 0 | this.has(params.video_quality) << 0;
        this.int32(flags);
        this.predicate(params.call);
        this.long(params.time_ms);
        this.int(params.scale);
        this.flag(this.int, params.video_channel);
        this.flag(this.int, params.video_quality);
      },
      "phone.joinAsPeers": function(params) {
        this.int32(-1343921601);
        this.vector(this.predicate, params.peers);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "phone.exportedGroupCallInvite": function(params) {
        this.int32(541839704);
        this.string(params.link);
      },
      "inputBotInlineMessageMediaInvoice": function(params) {
        this.int32(-672693723);
        const flags = this.has(params.photo) << 0 | this.has(params.reply_markup) << 2;
        this.int32(flags);
        this.string(params.title);
        this.string(params.description);
        this.flag(this.predicate, params.photo);
        this.predicate(params.invoice);
        this.bytes(params.payload);
        this.string(params.provider);
        this.predicate(params.provider_data);
        this.flag(this.predicate, params.reply_markup);
      },
      "botInlineMessageMediaInvoice": function(params) {
        this.int32(894081801);
        const flags = this.has(params.shipping_address_requested) << 1 | this.has(params.test) << 3 | this.has(params.photo) << 0 | this.has(params.reply_markup) << 2;
        this.int32(flags);
        this.string(params.title);
        this.string(params.description);
        this.flag(this.predicate, params.photo);
        this.string(params.currency);
        this.long(params.total_amount);
        this.flag(this.predicate, params.reply_markup);
      },
      "messageActionGroupCallScheduled": function(params) {
        this.int32(-1281329567);
        this.predicate(params.call);
        this.int(params.schedule_date);
      },
      "groupCallParticipantVideoSourceGroup": function(params) {
        this.int32(-592373577);
        this.string(params.semantics);
        this.vector(this.int, params.sources);
      },
      "groupCallParticipantVideo": function(params) {
        this.int32(1735736008);
        const flags = this.has(params.paused) << 0 | this.has(params.audio_source) << 1;
        this.int32(flags);
        this.string(params.endpoint);
        this.vector(this.predicate, params.source_groups);
        this.flag(this.int, params.audio_source);
      },
      "updateGroupCallConnection": function(params) {
        this.int32(192428418);
        const flags = this.has(params.presentation) << 0;
        this.int32(flags);
        this.predicate(params.params);
      },
      "stickers.suggestedShortName": function(params) {
        this.int32(-2046910401);
        this.string(params.short_name);
      },
      "botCommandScopeDefault": function(params) {
        this.int32(795652779);
      },
      "botCommandScopeUsers": function(params) {
        this.int32(1011811544);
      },
      "botCommandScopeChats": function(params) {
        this.int32(1877059713);
      },
      "botCommandScopeChatAdmins": function(params) {
        this.int32(-1180016534);
      },
      "botCommandScopePeer": function(params) {
        this.int32(-610432643);
        this.predicate(params.peer);
      },
      "botCommandScopePeerAdmins": function(params) {
        this.int32(1071145937);
        this.predicate(params.peer);
      },
      "botCommandScopePeerUser": function(params) {
        this.int32(169026035);
        this.predicate(params.peer);
        this.predicate(params.user_id);
      },
      "account.resetPasswordFailedWait": function(params) {
        this.int32(-478701471);
        this.int(params.retry_date);
      },
      "account.resetPasswordRequestedWait": function(params) {
        this.int32(-370148227);
        this.int(params.until_date);
      },
      "account.resetPasswordOk": function(params) {
        this.int32(-383330754);
      },
      "updateBotCommands": function(params) {
        this.int32(1299263278);
        this.predicate(params.peer);
        this.long(params.bot_id);
        this.vector(this.predicate, params.commands);
      },
      "messageActionSetChatTheme": function(params) {
        this.int32(-1434950843);
        this.string(params.emoticon);
      },
      "sendMessageChooseStickerAction": function(params) {
        this.int32(-1336228175);
      },
      "sponsoredMessage": function(params) {
        this.int32(-64636888);
        const flags = this.has(params.recommended) << 5 | this.has(params.show_peer_photo) << 6 | this.has(params.from_id) << 3 | this.has(params.chat_invite) << 4 | this.has(params.chat_invite_hash) << 4 | this.has(params.channel_post) << 2 | this.has(params.start_param) << 0 | this.has(params.entities) << 1 | this.has(params.sponsor_info) << 7 | this.has(params.additional_info) << 8;
        this.int32(flags);
        this.bytes(params.random_id);
        this.flag(this.predicate, params.from_id);
        this.flag(this.predicate, params.chat_invite);
        this.flag(this.string, params.chat_invite_hash);
        this.flag(this.int, params.channel_post);
        this.flag(this.string, params.start_param);
        this.string(params.message);
        this.flagVector(this.predicate, params.entities);
        this.flag(this.string, params.sponsor_info);
        this.flag(this.string, params.additional_info);
      },
      "messages.sponsoredMessages": function(params) {
        this.int32(-907141753);
        const flags = this.has(params.posts_between) << 0;
        this.int32(flags);
        this.flag(this.int, params.posts_between);
        this.vector(this.predicate, params.messages);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "inputStickerSetAnimatedEmojiAnimations": function(params) {
        this.int32(215889721);
      },
      "sendMessageEmojiInteraction": function(params) {
        this.int32(630664139);
        this.string(params.emoticon);
        this.int(params.msg_id);
        this.predicate(params.interaction);
      },
      "sendMessageEmojiInteractionSeen": function(params) {
        this.int32(-1234857938);
        this.string(params.emoticon);
      },
      "inputBotInlineMessageID64": function(params) {
        this.int32(-1227287081);
        this.int(params.dc_id);
        this.long(params.owner_id);
        this.int(params.id);
        this.long(params.access_hash);
      },
      "searchResultsCalendarPeriod": function(params) {
        this.int32(-911191137);
        this.int(params.date);
        this.int(params.min_msg_id);
        this.int(params.max_msg_id);
        this.int(params.count);
      },
      "messages.searchResultsCalendar": function(params) {
        this.int32(343859772);
        const flags = this.has(params.inexact) << 0 | this.has(params.offset_id_offset) << 1;
        this.int32(flags);
        this.int(params.count);
        this.int(params.min_date);
        this.int(params.min_msg_id);
        this.flag(this.int, params.offset_id_offset);
        this.vector(this.predicate, params.periods);
        this.vector(this.predicate, params.messages);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "searchResultPosition": function(params) {
        this.int32(2137295719);
        this.int(params.msg_id);
        this.int(params.date);
        this.int(params.offset);
      },
      "messages.searchResultsPositions": function(params) {
        this.int32(1404185519);
        this.int(params.count);
        this.vector(this.predicate, params.positions);
      },
      "messageActionChatJoinedByRequest": function(params) {
        this.int32(-339958837);
      },
      "updatePendingJoinRequests": function(params) {
        this.int32(1885586395);
        this.predicate(params.peer);
        this.int(params.requests_pending);
        this.vector(this.long, params.recent_requesters);
      },
      "updateBotChatInviteRequester": function(params) {
        this.int32(299870598);
        this.predicate(params.peer);
        this.int(params.date);
        this.long(params.user_id);
        this.string(params.about);
        this.predicate(params.invite);
        this.int(params.qts);
      },
      "channelAdminLogEventActionParticipantJoinByRequest": function(params) {
        this.int32(-1347021750);
        this.predicate(params.invite);
        this.long(params.approved_by);
      },
      "inputKeyboardButtonUserProfile": function(params) {
        this.int32(-376962181);
        this.string(params.text);
        this.predicate(params.user_id);
      },
      "keyboardButtonUserProfile": function(params) {
        this.int32(814112961);
        this.string(params.text);
        this.long(params.user_id);
      },
      "channels.sendAsPeers": function(params) {
        this.int32(-191450938);
        this.vector(this.predicate, params.peers);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "channelAdminLogEventActionToggleNoForwards": function(params) {
        this.int32(-886388890);
        this.Bool(params.new_value);
      },
      "messages.stickerSetNotModified": function(params) {
        this.int32(-738646805);
      },
      "users.userFull": function(params) {
        this.int32(997004590);
        this.predicate(params.full_user);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "messages.peerSettings": function(params) {
        this.int32(1753266509);
        this.predicate(params.settings);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "channelAdminLogEventActionSendMessage": function(params) {
        this.int32(663693416);
        this.predicate(params.message);
      },
      "auth.codeTypeMissedCall": function(params) {
        this.int32(-702884114);
      },
      "auth.sentCodeTypeMissedCall": function(params) {
        this.int32(-2113903484);
        this.string(params.prefix);
        this.int(params.length);
      },
      "auth.loggedOut": function(params) {
        this.int32(-1012759713);
        const flags = this.has(params.future_auth_token) << 0;
        this.int32(flags);
        this.flag(this.bytes, params.future_auth_token);
      },
      "updateMessageReactions": function(params) {
        this.int32(1578843320);
        const flags = this.has(params.top_msg_id) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.int(params.msg_id);
        this.flag(this.int, params.top_msg_id);
        this.predicate(params.reactions);
      },
      "reactionCount": function(params) {
        this.int32(-1546531968);
        const flags = this.has(params.chosen_order) << 0;
        this.int32(flags);
        this.flag(this.int, params.chosen_order);
        this.predicate(params.reaction);
        this.int(params.count);
      },
      "messageReactions": function(params) {
        this.int32(1328256121);
        const flags = this.has(params.min) << 0 | this.has(params.can_see_list) << 2 | this.has(params.recent_reactions) << 1;
        this.int32(flags);
        this.vector(this.predicate, params.results);
        this.flagVector(this.predicate, params.recent_reactions);
      },
      "messages.messageReactionsList": function(params) {
        this.int32(834488621);
        const flags = this.has(params.next_offset) << 0;
        this.int32(flags);
        this.int(params.count);
        this.vector(this.predicate, params.reactions);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
        this.flag(this.string, params.next_offset);
      },
      "availableReaction": function(params) {
        this.int32(-1065882623);
        const flags = this.has(params.inactive) << 0 | this.has(params.premium) << 2 | this.has(params.around_animation) << 1 | this.has(params.center_icon) << 1;
        this.int32(flags);
        this.string(params.reaction);
        this.string(params.title);
        this.predicate(params.static_icon);
        this.predicate(params.appear_animation);
        this.predicate(params.select_animation);
        this.predicate(params.activate_animation);
        this.predicate(params.effect_animation);
        this.flag(this.predicate, params.around_animation);
        this.flag(this.predicate, params.center_icon);
      },
      "messages.availableReactionsNotModified": function(params) {
        this.int32(-1626924713);
      },
      "messages.availableReactions": function(params) {
        this.int32(1989032621);
        this.int(params.hash);
        this.vector(this.predicate, params.reactions);
      },
      "messageEntitySpoiler": function(params) {
        this.int32(852137487);
        this.int(params.offset);
        this.int(params.length);
      },
      "channelAdminLogEventActionChangeAvailableReactions": function(params) {
        this.int32(-1102180616);
        this.predicate(params.prev_value);
        this.predicate(params.new_value);
      },
      "messagePeerReaction": function(params) {
        this.int32(-1938180548);
        const flags = this.has(params.big) << 0 | this.has(params.unread) << 1 | this.has(params.my) << 2;
        this.int32(flags);
        this.predicate(params.peer_id);
        this.int(params.date);
        this.predicate(params.reaction);
      },
      "groupCallStreamChannel": function(params) {
        this.int32(-2132064081);
        this.int(params.channel);
        this.int(params.scale);
        this.long(params.last_timestamp_ms);
      },
      "phone.groupCallStreamChannels": function(params) {
        this.int32(-790330702);
        this.vector(this.predicate, params.channels);
      },
      "inputReportReasonIllegalDrugs": function(params) {
        this.int32(177124030);
      },
      "inputReportReasonPersonalDetails": function(params) {
        this.int32(-1631091139);
      },
      "phone.groupCallStreamRtmpUrl": function(params) {
        this.int32(767505458);
        this.string(params.url);
        this.string(params.key);
      },
      "attachMenuBotIconColor": function(params) {
        this.int32(1165423600);
        this.string(params.name);
        this.int(params.color);
      },
      "attachMenuBotIcon": function(params) {
        this.int32(-1297663893);
        const flags = this.has(params.colors) << 0;
        this.int32(flags);
        this.string(params.name);
        this.predicate(params.icon);
        this.flagVector(this.predicate, params.colors);
      },
      "attachMenuBot": function(params) {
        this.int32(-928371502);
        const flags = this.has(params.inactive) << 0 | this.has(params.has_settings) << 1 | this.has(params.request_write_access) << 2;
        this.int32(flags);
        this.long(params.bot_id);
        this.string(params.short_name);
        this.vector(this.predicate, params.peer_types);
        this.vector(this.predicate, params.icons);
      },
      "attachMenuBotsNotModified": function(params) {
        this.int32(-237467044);
      },
      "attachMenuBots": function(params) {
        this.int32(1011024320);
        this.long(params.hash);
        this.vector(this.predicate, params.bots);
        this.vector(this.predicate, params.users);
      },
      "attachMenuBotsBot": function(params) {
        this.int32(-1816172929);
        this.predicate(params.bot);
        this.vector(this.predicate, params.users);
      },
      "updateAttachMenuBots": function(params) {
        this.int32(397910539);
      },
      "webViewResultUrl": function(params) {
        this.int32(202659196);
        this.long(params.query_id);
        this.string(params.url);
      },
      "simpleWebViewResultUrl": function(params) {
        this.int32(-2010155333);
        this.string(params.url);
      },
      "webViewMessageSent": function(params) {
        this.int32(211046684);
        const flags = this.has(params.msg_id) << 0;
        this.int32(flags);
        this.flag(this.predicate, params.msg_id);
      },
      "updateWebViewResultSent": function(params) {
        this.int32(361936797);
        this.long(params.query_id);
      },
      "keyboardButtonWebView": function(params) {
        this.int32(326529584);
        this.string(params.text);
        this.string(params.url);
      },
      "keyboardButtonSimpleWebView": function(params) {
        this.int32(-1598009252);
        this.string(params.text);
        this.string(params.url);
      },
      "messageActionWebViewDataSentMe": function(params) {
        this.int32(1205698681);
        this.string(params.text);
        this.string(params.data);
      },
      "messageActionWebViewDataSent": function(params) {
        this.int32(-1262252875);
        this.string(params.text);
      },
      "updateBotMenuButton": function(params) {
        this.int32(347625491);
        this.long(params.bot_id);
        this.predicate(params.button);
      },
      "botMenuButtonDefault": function(params) {
        this.int32(1966318984);
      },
      "botMenuButtonCommands": function(params) {
        this.int32(1113113093);
      },
      "botMenuButton": function(params) {
        this.int32(-944407322);
        this.string(params.text);
        this.string(params.url);
      },
      "account.savedRingtonesNotModified": function(params) {
        this.int32(-67704655);
      },
      "account.savedRingtones": function(params) {
        this.int32(-1041683259);
        this.long(params.hash);
        this.vector(this.predicate, params.ringtones);
      },
      "updateSavedRingtones": function(params) {
        this.int32(1960361625);
      },
      "notificationSoundDefault": function(params) {
        this.int32(-1746354498);
      },
      "notificationSoundNone": function(params) {
        this.int32(1863070943);
      },
      "notificationSoundLocal": function(params) {
        this.int32(-2096391452);
        this.string(params.title);
        this.string(params.data);
      },
      "notificationSoundRingtone": function(params) {
        this.int32(-9666487);
        this.long(params.id);
      },
      "account.savedRingtone": function(params) {
        this.int32(-1222230163);
      },
      "account.savedRingtoneConverted": function(params) {
        this.int32(523271863);
        this.predicate(params.document);
      },
      "attachMenuPeerTypeSameBotPM": function(params) {
        this.int32(2104224014);
      },
      "attachMenuPeerTypeBotPM": function(params) {
        this.int32(-1020528102);
      },
      "attachMenuPeerTypePM": function(params) {
        this.int32(-247016673);
      },
      "attachMenuPeerTypeChat": function(params) {
        this.int32(84480319);
      },
      "attachMenuPeerTypeBroadcast": function(params) {
        this.int32(2080104188);
      },
      "chatInvitePublicJoinRequests": function(params) {
        this.int32(-317687113);
      },
      "inputInvoiceMessage": function(params) {
        this.int32(-977967015);
        this.predicate(params.peer);
        this.int(params.msg_id);
      },
      "inputInvoiceSlug": function(params) {
        this.int32(-1020867857);
        this.string(params.slug);
      },
      "payments.exportedInvoice": function(params) {
        this.int32(-1362048039);
        this.string(params.url);
      },
      "updateTranscribedAudio": function(params) {
        this.int32(8703322);
        const flags = this.has(params.pending) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.int(params.msg_id);
        this.long(params.transcription_id);
        this.string(params.text);
      },
      "messages.transcribedAudio": function(params) {
        this.int32(-1821037486);
        const flags = this.has(params.pending) << 0;
        this.int32(flags);
        this.long(params.transcription_id);
        this.string(params.text);
      },
      "dialogFilterDefault": function(params) {
        this.int32(909284270);
      },
      "help.premiumPromo": function(params) {
        this.int32(1395946908);
        this.string(params.status_text);
        this.vector(this.predicate, params.status_entities);
        this.vector(this.string, params.video_sections);
        this.vector(this.predicate, params.videos);
        this.vector(this.predicate, params.period_options);
        this.vector(this.predicate, params.users);
      },
      "messageEntityCustomEmoji": function(params) {
        this.int32(-925956616);
        this.int(params.offset);
        this.int(params.length);
        this.long(params.document_id);
      },
      "documentAttributeCustomEmoji": function(params) {
        this.int32(-48981863);
        const flags = this.has(params.free) << 0 | this.has(params.text_color) << 1;
        this.int32(flags);
        this.string(params.alt);
        this.predicate(params.stickerset);
      },
      "stickerSetFullCovered": function(params) {
        this.int32(1087454222);
        this.predicate(params.set);
        this.vector(this.predicate, params.packs);
        this.vector(this.predicate, params.keywords);
        this.vector(this.predicate, params.documents);
      },
      "inputStorePaymentPremiumSubscription": function(params) {
        this.int32(-1502273946);
        const flags = this.has(params.restore) << 0 | this.has(params.upgrade) << 1;
        this.int32(flags);
      },
      "inputStorePaymentGiftPremium": function(params) {
        this.int32(1634697192);
        this.predicate(params.user_id);
        this.string(params.currency);
        this.long(params.amount);
      },
      "messageActionGiftPremium": function(params) {
        this.int32(-935499028);
        const flags = this.has(params.crypto_currency) << 0 | this.has(params.crypto_amount) << 0;
        this.int32(flags);
        this.string(params.currency);
        this.long(params.amount);
        this.int(params.months);
        this.flag(this.string, params.crypto_currency);
        this.flag(this.long, params.crypto_amount);
      },
      "premiumGiftOption": function(params) {
        this.int32(1958953753);
        const flags = this.has(params.store_product) << 0;
        this.int32(flags);
        this.int(params.months);
        this.string(params.currency);
        this.long(params.amount);
        this.string(params.bot_url);
        this.flag(this.string, params.store_product);
      },
      "inputStickerSetPremiumGifts": function(params) {
        this.int32(-930399486);
      },
      "updateReadFeaturedEmojiStickers": function(params) {
        this.int32(-78886548);
      },
      "inputPrivacyKeyVoiceMessages": function(params) {
        this.int32(-1360618136);
      },
      "privacyKeyVoiceMessages": function(params) {
        this.int32(110621716);
      },
      "paymentFormMethod": function(params) {
        this.int32(-1996951013);
        this.string(params.url);
        this.string(params.title);
      },
      "inputWebFileAudioAlbumThumbLocation": function(params) {
        this.int32(-193992412);
        const flags = this.has(params.small) << 2 | this.has(params.document) << 0 | this.has(params.title) << 1 | this.has(params.performer) << 1;
        this.int32(flags);
        this.flag(this.predicate, params.document);
        this.flag(this.string, params.title);
        this.flag(this.string, params.performer);
      },
      "emojiStatusEmpty": function(params) {
        this.int32(769727150);
      },
      "emojiStatus": function(params) {
        this.int32(-1835310691);
        this.long(params.document_id);
      },
      "emojiStatusUntil": function(params) {
        this.int32(-97474361);
        this.long(params.document_id);
        this.int(params.until);
      },
      "updateUserEmojiStatus": function(params) {
        this.int32(674706841);
        this.long(params.user_id);
        this.predicate(params.emoji_status);
      },
      "updateRecentEmojiStatuses": function(params) {
        this.int32(821314523);
      },
      "account.emojiStatusesNotModified": function(params) {
        this.int32(-796072379);
      },
      "account.emojiStatuses": function(params) {
        this.int32(-1866176559);
        this.long(params.hash);
        this.vector(this.predicate, params.statuses);
      },
      "reactionEmpty": function(params) {
        this.int32(2046153753);
      },
      "reactionEmoji": function(params) {
        this.int32(455247544);
        this.string(params.emoticon);
      },
      "reactionCustomEmoji": function(params) {
        this.int32(-1992950669);
        this.long(params.document_id);
      },
      "chatReactionsNone": function(params) {
        this.int32(-352570692);
      },
      "chatReactionsAll": function(params) {
        this.int32(1385335754);
        const flags = this.has(params.allow_custom) << 0;
        this.int32(flags);
      },
      "chatReactionsSome": function(params) {
        this.int32(1713193015);
        this.vector(this.predicate, params.reactions);
      },
      "messages.reactionsNotModified": function(params) {
        this.int32(-1334846497);
      },
      "messages.reactions": function(params) {
        this.int32(-352454890);
        this.long(params.hash);
        this.vector(this.predicate, params.reactions);
      },
      "updateRecentReactions": function(params) {
        this.int32(1870160884);
      },
      "updateMoveStickerSetToTop": function(params) {
        this.int32(-2030252155);
        const flags = this.has(params.masks) << 0 | this.has(params.emojis) << 1;
        this.int32(flags);
        this.long(params.stickerset);
      },
      "auth.sentCodeTypeEmailCode": function(params) {
        this.int32(-196020837);
        const flags = this.has(params.apple_signin_allowed) << 0 | this.has(params.google_signin_allowed) << 1 | this.has(params.reset_available_period) << 3 | this.has(params.reset_pending_date) << 4;
        this.int32(flags);
        this.string(params.email_pattern);
        this.int(params.length);
        this.flag(this.int, params.reset_available_period);
        this.flag(this.int, params.reset_pending_date);
      },
      "auth.sentCodeTypeSetUpEmailRequired": function(params) {
        this.int32(-1521934870);
        const flags = this.has(params.apple_signin_allowed) << 0 | this.has(params.google_signin_allowed) << 1;
        this.int32(flags);
      },
      "emailVerifyPurposeLoginSetup": function(params) {
        this.int32(1128644211);
        this.string(params.phone_number);
        this.string(params.phone_code_hash);
      },
      "emailVerifyPurposeLoginChange": function(params) {
        this.int32(1383932651);
      },
      "emailVerifyPurposePassport": function(params) {
        this.int32(-1141565819);
      },
      "emailVerificationCode": function(params) {
        this.int32(-1842457175);
        this.string(params.code);
      },
      "emailVerificationGoogle": function(params) {
        this.int32(-611279166);
        this.string(params.token);
      },
      "emailVerificationApple": function(params) {
        this.int32(-1764723459);
        this.string(params.token);
      },
      "account.emailVerified": function(params) {
        this.int32(731303195);
        this.string(params.email);
      },
      "account.emailVerifiedLogin": function(params) {
        this.int32(-507835039);
        this.string(params.email);
        this.predicate(params.sent_code);
      },
      "premiumSubscriptionOption": function(params) {
        this.int32(1596792306);
        const flags = this.has(params.current) << 1 | this.has(params.can_purchase_upgrade) << 2 | this.has(params.transaction) << 3 | this.has(params.store_product) << 0;
        this.int32(flags);
        this.flag(this.string, params.transaction);
        this.int(params.months);
        this.string(params.currency);
        this.long(params.amount);
        this.string(params.bot_url);
        this.flag(this.string, params.store_product);
      },
      "inputStickerSetEmojiGenericAnimations": function(params) {
        this.int32(80008398);
      },
      "inputStickerSetEmojiDefaultStatuses": function(params) {
        this.int32(701560302);
      },
      "sendAsPeer": function(params) {
        this.int32(-1206095820);
        const flags = this.has(params.premium_required) << 0;
        this.int32(flags);
        this.predicate(params.peer);
      },
      "messageExtendedMediaPreview": function(params) {
        this.int32(-1386050360);
        const flags = this.has(params.w) << 0 | this.has(params.h) << 0 | this.has(params.thumb) << 1 | this.has(params.video_duration) << 2;
        this.int32(flags);
        this.flag(this.int, params.w);
        this.flag(this.int, params.h);
        this.flag(this.predicate, params.thumb);
        this.flag(this.int, params.video_duration);
      },
      "messageExtendedMedia": function(params) {
        this.int32(-297296796);
        this.predicate(params.media);
      },
      "updateMessageExtendedMedia": function(params) {
        this.int32(1517529484);
        this.predicate(params.peer);
        this.int(params.msg_id);
        this.predicate(params.extended_media);
      },
      "stickerKeyword": function(params) {
        this.int32(-50416996);
        this.long(params.document_id);
        this.vector(this.string, params.keyword);
      },
      "username": function(params) {
        this.int32(-1274595769);
        const flags = this.has(params.editable) << 0 | this.has(params.active) << 1;
        this.int32(flags);
        this.string(params.username);
      },
      "channelAdminLogEventActionChangeUsernames": function(params) {
        this.int32(-263212119);
        this.vector(this.string, params.prev_value);
        this.vector(this.string, params.new_value);
      },
      "channelAdminLogEventActionToggleForum": function(params) {
        this.int32(46949251);
        this.Bool(params.new_value);
      },
      "channelAdminLogEventActionCreateTopic": function(params) {
        this.int32(1483767080);
        this.predicate(params.topic);
      },
      "channelAdminLogEventActionEditTopic": function(params) {
        this.int32(-261103096);
        this.predicate(params.prev_topic);
        this.predicate(params.new_topic);
      },
      "channelAdminLogEventActionDeleteTopic": function(params) {
        this.int32(-1374254839);
        this.predicate(params.topic);
      },
      "channelAdminLogEventActionPinTopic": function(params) {
        this.int32(1569535291);
        const flags = this.has(params.prev_topic) << 0 | this.has(params.new_topic) << 1;
        this.int32(flags);
        this.flag(this.predicate, params.prev_topic);
        this.flag(this.predicate, params.new_topic);
      },
      "forumTopicDeleted": function(params) {
        this.int32(37687451);
        this.int(params.id);
      },
      "forumTopic": function(params) {
        this.int32(1903173033);
        const flags = this.has(params.my) << 1 | this.has(params.closed) << 2 | this.has(params.pinned) << 3 | this.has(params.short) << 5 | this.has(params.hidden) << 6 | this.has(params.icon_emoji_id) << 0 | this.has(params.draft) << 4;
        this.int32(flags);
        this.int(params.id);
        this.int(params.date);
        this.string(params.title);
        this.int(params.icon_color);
        this.flag(this.long, params.icon_emoji_id);
        this.int(params.top_message);
        this.int(params.read_inbox_max_id);
        this.int(params.read_outbox_max_id);
        this.int(params.unread_count);
        this.int(params.unread_mentions_count);
        this.int(params.unread_reactions_count);
        this.predicate(params.from_id);
        this.predicate(params.notify_settings);
        this.flag(this.predicate, params.draft);
      },
      "messages.forumTopics": function(params) {
        this.int32(913709011);
        const flags = this.has(params.order_by_create_date) << 0;
        this.int32(flags);
        this.int(params.count);
        this.vector(this.predicate, params.topics);
        this.vector(this.predicate, params.messages);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
        this.int(params.pts);
      },
      "messageActionTopicCreate": function(params) {
        this.int32(228168278);
        const flags = this.has(params.icon_emoji_id) << 0;
        this.int32(flags);
        this.string(params.title);
        this.int(params.icon_color);
        this.flag(this.long, params.icon_emoji_id);
      },
      "messageActionTopicEdit": function(params) {
        this.int32(-1064024032);
        const flags = this.has(params.title) << 0 | this.has(params.icon_emoji_id) << 1 | this.has(params.closed) << 2 | this.has(params.hidden) << 3;
        this.int32(flags);
        this.flag(this.string, params.title);
        this.flag(this.long, params.icon_emoji_id);
        this.flag(this.Bool, params.closed);
        this.flag(this.Bool, params.hidden);
      },
      "updateChannelPinnedTopic": function(params) {
        this.int32(422509539);
        const flags = this.has(params.pinned) << 0;
        this.int32(flags);
        this.long(params.channel_id);
        this.int(params.topic_id);
      },
      "inputNotifyForumTopic": function(params) {
        this.int32(1548122514);
        this.predicate(params.peer);
        this.int(params.top_msg_id);
      },
      "notifyForumTopic": function(params) {
        this.int32(577659656);
        this.predicate(params.peer);
        this.int(params.top_msg_id);
      },
      "inputStickerSetEmojiDefaultTopicIcons": function(params) {
        this.int32(1153562857);
      },
      "messages.sponsoredMessagesEmpty": function(params) {
        this.int32(406407439);
      },
      "updateChannelPinnedTopics": function(params) {
        this.int32(-31881726);
        const flags = this.has(params.order) << 0;
        this.int32(flags);
        this.long(params.channel_id);
        this.flagVector(this.int, params.order);
      },
      "defaultHistoryTTL": function(params) {
        this.int32(1135897376);
        this.int(params.period);
      },
      "auth.codeTypeFragmentSms": function(params) {
        this.int32(116234636);
      },
      "auth.sentCodeTypeFragmentSms": function(params) {
        this.int32(-648651719);
        this.string(params.url);
        this.int(params.length);
      },
      "exportedContactToken": function(params) {
        this.int32(1103040667);
        this.string(params.url);
        this.int(params.expires);
      },
      "channelAdminLogEventActionToggleAntiSpam": function(params) {
        this.int32(1693675004);
        this.Bool(params.new_value);
      },
      "messageActionSuggestProfilePhoto": function(params) {
        this.int32(1474192222);
        this.predicate(params.photo);
      },
      "stickerSetNoCovered": function(params) {
        this.int32(2008112412);
        this.predicate(params.set);
      },
      "updateUser": function(params) {
        this.int32(542282808);
        this.long(params.user_id);
      },
      "auth.sentCodeSuccess": function(params) {
        this.int32(596704836);
        this.predicate(params.authorization);
      },
      "messageActionRequestedPeer": function(params) {
        this.int32(-25742243);
        this.int(params.button_id);
        this.predicate(params.peer);
      },
      "requestPeerTypeUser": function(params) {
        this.int32(1597737472);
        const flags = this.has(params.bot) << 0 | this.has(params.premium) << 1;
        this.int32(flags);
        this.flag(this.Bool, params.bot);
        this.flag(this.Bool, params.premium);
      },
      "requestPeerTypeChat": function(params) {
        this.int32(-906990053);
        const flags = this.has(params.creator) << 0 | this.has(params.bot_participant) << 5 | this.has(params.has_username) << 3 | this.has(params.forum) << 4 | this.has(params.user_admin_rights) << 1 | this.has(params.bot_admin_rights) << 2;
        this.int32(flags);
        this.flag(this.Bool, params.has_username);
        this.flag(this.Bool, params.forum);
        this.flag(this.predicate, params.user_admin_rights);
        this.flag(this.predicate, params.bot_admin_rights);
      },
      "requestPeerTypeBroadcast": function(params) {
        this.int32(865857388);
        const flags = this.has(params.creator) << 0 | this.has(params.has_username) << 3 | this.has(params.user_admin_rights) << 1 | this.has(params.bot_admin_rights) << 2;
        this.int32(flags);
        this.flag(this.Bool, params.has_username);
        this.flag(this.predicate, params.user_admin_rights);
        this.flag(this.predicate, params.bot_admin_rights);
      },
      "keyboardButtonRequestPeer": function(params) {
        this.int32(218842764);
        this.string(params.text);
        this.int(params.button_id);
        this.predicate(params.peer_type);
      },
      "emojiListNotModified": function(params) {
        this.int32(1209970170);
      },
      "emojiList": function(params) {
        this.int32(2048790993);
        this.long(params.hash);
        this.vector(this.long, params.document_id);
      },
      "auth.sentCodeTypeFirebaseSms": function(params) {
        this.int32(-444918734);
        const flags = this.has(params.nonce) << 0 | this.has(params.receipt) << 1 | this.has(params.push_timeout) << 1;
        this.int32(flags);
        this.flag(this.bytes, params.nonce);
        this.flag(this.string, params.receipt);
        this.flag(this.int, params.push_timeout);
        this.int(params.length);
      },
      "emojiGroup": function(params) {
        this.int32(2056961449);
        this.string(params.title);
        this.long(params.icon_emoji_id);
        this.vector(this.string, params.emoticons);
      },
      "messages.emojiGroupsNotModified": function(params) {
        this.int32(1874111879);
      },
      "messages.emojiGroups": function(params) {
        this.int32(-2011186869);
        this.int(params.hash);
        this.vector(this.predicate, params.groups);
      },
      "videoSizeEmojiMarkup": function(params) {
        this.int32(-128171716);
        this.long(params.emoji_id);
        this.vector(this.int, params.background_colors);
      },
      "videoSizeStickerMarkup": function(params) {
        this.int32(228623102);
        this.predicate(params.stickerset);
        this.long(params.sticker_id);
        this.vector(this.int, params.background_colors);
      },
      "textWithEntities": function(params) {
        this.int32(1964978502);
        this.string(params.text);
        this.vector(this.predicate, params.entities);
      },
      "messages.translateResult": function(params) {
        this.int32(870003448);
        this.vector(this.predicate, params.result);
      },
      "autoSaveSettings": function(params) {
        this.int32(-934791986);
        const flags = this.has(params.photos) << 0 | this.has(params.videos) << 1 | this.has(params.video_max_size) << 2;
        this.int32(flags);
        this.flag(this.long, params.video_max_size);
      },
      "autoSaveException": function(params) {
        this.int32(-2124403385);
        this.predicate(params.peer);
        this.predicate(params.settings);
      },
      "account.autoSaveSettings": function(params) {
        this.int32(1279133341);
        this.predicate(params.users_settings);
        this.predicate(params.chats_settings);
        this.predicate(params.broadcasts_settings);
        this.vector(this.predicate, params.exceptions);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "updateAutoSaveSettings": function(params) {
        this.int32(-335171433);
      },
      "help.appConfigNotModified": function(params) {
        this.int32(2094949405);
      },
      "help.appConfig": function(params) {
        this.int32(-585598930);
        this.int(params.hash);
        this.predicate(params.config);
      },
      "inputBotAppID": function(params) {
        this.int32(-1457472134);
        this.long(params.id);
        this.long(params.access_hash);
      },
      "inputBotAppShortName": function(params) {
        this.int32(-1869872121);
        this.predicate(params.bot_id);
        this.string(params.short_name);
      },
      "botAppNotModified": function(params) {
        this.int32(1571189943);
      },
      "botApp": function(params) {
        this.int32(-1778593322);
        const flags = this.has(params.document) << 0;
        this.int32(flags);
        this.long(params.id);
        this.long(params.access_hash);
        this.string(params.short_name);
        this.string(params.title);
        this.string(params.description);
        this.predicate(params.photo);
        this.flag(this.predicate, params.document);
        this.long(params.hash);
      },
      "messages.botApp": function(params) {
        this.int32(-347034123);
        const flags = this.has(params.inactive) << 0 | this.has(params.request_write_access) << 1;
        this.int32(flags);
        this.predicate(params.app);
      },
      "appWebViewResultUrl": function(params) {
        this.int32(1008422669);
        this.string(params.url);
      },
      "inlineBotWebView": function(params) {
        this.int32(-1250781739);
        this.string(params.text);
        this.string(params.url);
      },
      "readParticipantDate": function(params) {
        this.int32(1246753138);
        this.long(params.user_id);
        this.int(params.date);
      },
      "updateGroupInvitePrivacyForbidden": function(params) {
        this.int32(-856651050);
        this.long(params.user_id);
      },
      "dialogFilterChatlist": function(params) {
        this.int32(-699792216);
        const flags = this.has(params.has_my_invites) << 26 | this.has(params.emoticon) << 25;
        this.int32(flags);
        this.int(params.id);
        this.string(params.title);
        this.flag(this.string, params.emoticon);
        this.vector(this.predicate, params.pinned_peers);
        this.vector(this.predicate, params.include_peers);
      },
      "inputChatlistDialogFilter": function(params) {
        this.int32(-203367885);
        this.int(params.filter_id);
      },
      "exportedChatlistInvite": function(params) {
        this.int32(206668204);
        const flags = 0;
        this.int32(flags);
        this.string(params.title);
        this.string(params.url);
        this.vector(this.predicate, params.peers);
      },
      "chatlists.exportedChatlistInvite": function(params) {
        this.int32(283567014);
        this.predicate(params.filter);
        this.predicate(params.invite);
      },
      "chatlists.exportedInvites": function(params) {
        this.int32(279670215);
        this.vector(this.predicate, params.invites);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "chatlists.chatlistInviteAlready": function(params) {
        this.int32(-91752871);
        this.int(params.filter_id);
        this.vector(this.predicate, params.missing_peers);
        this.vector(this.predicate, params.already_peers);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "chatlists.chatlistInvite": function(params) {
        this.int32(500007837);
        const flags = this.has(params.emoticon) << 0;
        this.int32(flags);
        this.string(params.title);
        this.flag(this.string, params.emoticon);
        this.vector(this.predicate, params.peers);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "chatlists.chatlistUpdates": function(params) {
        this.int32(-1816295539);
        this.vector(this.predicate, params.missing_peers);
        this.vector(this.predicate, params.chats);
        this.vector(this.predicate, params.users);
      },
      "messageActionSetChatWallPaper": function(params) {
        this.int32(-1136350937);
        this.predicate(params.wallpaper);
      },
      "messageActionSetSameChatWallPaper": function(params) {
        this.int32(-1065845395);
        this.predicate(params.wallpaper);
      },
      "bots.botInfo": function(params) {
        this.int32(-391678544);
        this.string(params.name);
        this.string(params.about);
        this.string(params.description);
      },
      "inlineQueryPeerTypeBotPM": function(params) {
        this.int32(238759180);
      },
      "invokeAfterMsg": function(params) {
        this.int32(-878758099);
        this.long(params.msg_id);
        this.predicate(params.query);
      },
      "invokeAfterMsgs": function(params) {
        this.int32(1036301552);
        this.vector(this.long, params.msg_ids);
        this.predicate(params.query);
      },
      "auth.sendCode": function(params) {
        this.int32(-1502141361);
        this.string(params.phone_number);
        this.int(params.api_id);
        this.string(params.api_hash);
        this.predicate(params.settings);
      },
      "auth.signUp": function(params) {
        this.int32(-2131827673);
        this.string(params.phone_number);
        this.string(params.phone_code_hash);
        this.string(params.first_name);
        this.string(params.last_name);
      },
      "auth.signIn": function(params) {
        this.int32(-1923962543);
        const flags = this.has(params.phone_code) << 0 | this.has(params.email_verification) << 1;
        this.int32(flags);
        this.string(params.phone_number);
        this.string(params.phone_code_hash);
        this.flag(this.string, params.phone_code);
        this.flag(this.predicate, params.email_verification);
      },
      "auth.logOut": function(params) {
        this.int32(1047706137);
      },
      "auth.resetAuthorizations": function(params) {
        this.int32(-1616179942);
      },
      "auth.exportAuthorization": function(params) {
        this.int32(-440401971);
        this.int(params.dc_id);
      },
      "auth.importAuthorization": function(params) {
        this.int32(-1518699091);
        this.long(params.id);
        this.bytes(params.bytes);
      },
      "auth.bindTempAuthKey": function(params) {
        this.int32(-841733627);
        this.long(params.perm_auth_key_id);
        this.long(params.nonce);
        this.int(params.expires_at);
        this.bytes(params.encrypted_message);
      },
      "account.registerDevice": function(params) {
        this.int32(-326762118);
        const flags = this.has(params.no_muted) << 0;
        this.int32(flags);
        this.int(params.token_type);
        this.string(params.token);
        this.Bool(params.app_sandbox);
        this.bytes(params.secret);
        this.vector(this.long, params.other_uids);
      },
      "account.unregisterDevice": function(params) {
        this.int32(1779249670);
        this.int(params.token_type);
        this.string(params.token);
        this.vector(this.long, params.other_uids);
      },
      "account.updateNotifySettings": function(params) {
        this.int32(-2067899501);
        this.predicate(params.peer);
        this.predicate(params.settings);
      },
      "account.getNotifySettings": function(params) {
        this.int32(313765169);
        this.predicate(params.peer);
      },
      "account.resetNotifySettings": function(params) {
        this.int32(-612493497);
      },
      "account.updateProfile": function(params) {
        this.int32(2018596725);
        const flags = this.has(params.first_name) << 0 | this.has(params.last_name) << 1 | this.has(params.about) << 2;
        this.int32(flags);
        this.flag(this.string, params.first_name);
        this.flag(this.string, params.last_name);
        this.flag(this.string, params.about);
      },
      "account.updateStatus": function(params) {
        this.int32(1713919532);
        this.Bool(params.offline);
      },
      "account.getWallPapers": function(params) {
        this.int32(127302966);
        this.long(params.hash);
      },
      "account.reportPeer": function(params) {
        this.int32(-977650298);
        this.predicate(params.peer);
        this.predicate(params.reason);
        this.string(params.message);
      },
      "users.getUsers": function(params) {
        this.int32(227648840);
        this.vector(this.predicate, params.id);
      },
      "users.getFullUser": function(params) {
        this.int32(-1240508136);
        this.predicate(params.id);
      },
      "contacts.getContactIDs": function(params) {
        this.int32(2061264541);
        this.long(params.hash);
      },
      "contacts.getStatuses": function(params) {
        this.int32(-995929106);
      },
      "contacts.getContacts": function(params) {
        this.int32(1574346258);
        this.long(params.hash);
      },
      "contacts.importContacts": function(params) {
        this.int32(746589157);
        this.vector(this.predicate, params.contacts);
      },
      "contacts.deleteContacts": function(params) {
        this.int32(157945344);
        this.vector(this.predicate, params.id);
      },
      "contacts.deleteByPhones": function(params) {
        this.int32(269745566);
        this.vector(this.string, params.phones);
      },
      "contacts.block": function(params) {
        this.int32(1758204945);
        this.predicate(params.id);
      },
      "contacts.unblock": function(params) {
        this.int32(-1096393392);
        this.predicate(params.id);
      },
      "contacts.getBlocked": function(params) {
        this.int32(-176409329);
        this.int(params.offset);
        this.int(params.limit);
      },
      "messages.getMessages": function(params) {
        this.int32(1673946374);
        this.vector(this.predicate, params.id);
      },
      "messages.getDialogs": function(params) {
        this.int32(-1594569905);
        const flags = this.has(params.exclude_pinned) << 0 | this.has(params.folder_id) << 1;
        this.int32(flags);
        this.flag(this.int, params.folder_id);
        this.int(params.offset_date);
        this.int(params.offset_id);
        this.predicate(params.offset_peer);
        this.int(params.limit);
        this.long(params.hash);
      },
      "messages.getHistory": function(params) {
        this.int32(1143203525);
        this.predicate(params.peer);
        this.int(params.offset_id);
        this.int(params.offset_date);
        this.int(params.add_offset);
        this.int(params.limit);
        this.int(params.max_id);
        this.int(params.min_id);
        this.long(params.hash);
      },
      "messages.search": function(params) {
        this.int32(-1593989278);
        const flags = this.has(params.from_id) << 0 | this.has(params.top_msg_id) << 1;
        this.int32(flags);
        this.predicate(params.peer);
        this.string(params.q);
        this.flag(this.predicate, params.from_id);
        this.flag(this.int, params.top_msg_id);
        this.predicate(params.filter);
        this.int(params.min_date);
        this.int(params.max_date);
        this.int(params.offset_id);
        this.int(params.add_offset);
        this.int(params.limit);
        this.int(params.max_id);
        this.int(params.min_id);
        this.long(params.hash);
      },
      "messages.readHistory": function(params) {
        this.int32(238054714);
        this.predicate(params.peer);
        this.int(params.max_id);
      },
      "messages.deleteHistory": function(params) {
        this.int32(-1332768214);
        const flags = this.has(params.just_clear) << 0 | this.has(params.revoke) << 1 | this.has(params.min_date) << 2 | this.has(params.max_date) << 3;
        this.int32(flags);
        this.predicate(params.peer);
        this.int(params.max_id);
        this.flag(this.int, params.min_date);
        this.flag(this.int, params.max_date);
      },
      "messages.deleteMessages": function(params) {
        this.int32(-443640366);
        const flags = this.has(params.revoke) << 0;
        this.int32(flags);
        this.vector(this.int, params.id);
      },
      "messages.receivedMessages": function(params) {
        this.int32(94983360);
        this.int(params.max_id);
      },
      "messages.setTyping": function(params) {
        this.int32(1486110434);
        const flags = this.has(params.top_msg_id) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.flag(this.int, params.top_msg_id);
        this.predicate(params.action);
      },
      "messages.sendMessage": function(params) {
        this.int32(482476935);
        const flags = this.has(params.no_webpage) << 1 | this.has(params.silent) << 5 | this.has(params.background) << 6 | this.has(params.clear_draft) << 7 | this.has(params.noforwards) << 14 | this.has(params.update_stickersets_order) << 15 | this.has(params.reply_to_msg_id) << 0 | this.has(params.top_msg_id) << 9 | this.has(params.reply_markup) << 2 | this.has(params.entities) << 3 | this.has(params.schedule_date) << 10 | this.has(params.send_as) << 13;
        this.int32(flags);
        this.predicate(params.peer);
        this.flag(this.int, params.reply_to_msg_id);
        this.flag(this.int, params.top_msg_id);
        this.string(params.message);
        this.long(params.random_id);
        this.flag(this.predicate, params.reply_markup);
        this.flagVector(this.predicate, params.entities);
        this.flag(this.int, params.schedule_date);
        this.flag(this.predicate, params.send_as);
      },
      "messages.sendMedia": function(params) {
        this.int32(1967638886);
        const flags = this.has(params.silent) << 5 | this.has(params.background) << 6 | this.has(params.clear_draft) << 7 | this.has(params.noforwards) << 14 | this.has(params.update_stickersets_order) << 15 | this.has(params.reply_to_msg_id) << 0 | this.has(params.top_msg_id) << 9 | this.has(params.reply_markup) << 2 | this.has(params.entities) << 3 | this.has(params.schedule_date) << 10 | this.has(params.send_as) << 13;
        this.int32(flags);
        this.predicate(params.peer);
        this.flag(this.int, params.reply_to_msg_id);
        this.flag(this.int, params.top_msg_id);
        this.predicate(params.media);
        this.string(params.message);
        this.long(params.random_id);
        this.flag(this.predicate, params.reply_markup);
        this.flagVector(this.predicate, params.entities);
        this.flag(this.int, params.schedule_date);
        this.flag(this.predicate, params.send_as);
      },
      "messages.forwardMessages": function(params) {
        this.int32(-966673468);
        const flags = this.has(params.silent) << 5 | this.has(params.background) << 6 | this.has(params.with_my_score) << 8 | this.has(params.drop_author) << 11 | this.has(params.drop_media_captions) << 12 | this.has(params.noforwards) << 14 | this.has(params.top_msg_id) << 9 | this.has(params.schedule_date) << 10 | this.has(params.send_as) << 13;
        this.int32(flags);
        this.predicate(params.from_peer);
        this.vector(this.int, params.id);
        this.vector(this.long, params.random_id);
        this.predicate(params.to_peer);
        this.flag(this.int, params.top_msg_id);
        this.flag(this.int, params.schedule_date);
        this.flag(this.predicate, params.send_as);
      },
      "messages.reportSpam": function(params) {
        this.int32(-820669733);
        this.predicate(params.peer);
      },
      "messages.getPeerSettings": function(params) {
        this.int32(-270948702);
        this.predicate(params.peer);
      },
      "messages.report": function(params) {
        this.int32(-1991005362);
        this.predicate(params.peer);
        this.vector(this.int, params.id);
        this.predicate(params.reason);
        this.string(params.message);
      },
      "messages.getChats": function(params) {
        this.int32(1240027791);
        this.vector(this.long, params.id);
      },
      "messages.getFullChat": function(params) {
        this.int32(-1364194508);
        this.long(params.chat_id);
      },
      "messages.editChatTitle": function(params) {
        this.int32(1937260541);
        this.long(params.chat_id);
        this.string(params.title);
      },
      "messages.editChatPhoto": function(params) {
        this.int32(903730804);
        this.long(params.chat_id);
        this.predicate(params.photo);
      },
      "messages.addChatUser": function(params) {
        this.int32(-230206493);
        this.long(params.chat_id);
        this.predicate(params.user_id);
        this.int(params.fwd_limit);
      },
      "messages.deleteChatUser": function(params) {
        this.int32(-1575461717);
        const flags = this.has(params.revoke_history) << 0;
        this.int32(flags);
        this.long(params.chat_id);
        this.predicate(params.user_id);
      },
      "messages.createChat": function(params) {
        this.int32(3450904);
        const flags = this.has(params.ttl_period) << 0;
        this.int32(flags);
        this.vector(this.predicate, params.users);
        this.string(params.title);
        this.flag(this.int, params.ttl_period);
      },
      "updates.getState": function(params) {
        this.int32(-304838614);
      },
      "updates.getDifference": function(params) {
        this.int32(630429265);
        const flags = this.has(params.pts_total_limit) << 0;
        this.int32(flags);
        this.int(params.pts);
        this.flag(this.int, params.pts_total_limit);
        this.int(params.date);
        this.int(params.qts);
      },
      "photos.updateProfilePhoto": function(params) {
        this.int32(166207545);
        const flags = this.has(params.fallback) << 0 | this.has(params.bot) << 1;
        this.int32(flags);
        this.flag(this.predicate, params.bot);
        this.predicate(params.id);
      },
      "photos.uploadProfilePhoto": function(params) {
        this.int32(59286453);
        const flags = this.has(params.fallback) << 3 | this.has(params.bot) << 5 | this.has(params.file) << 0 | this.has(params.video) << 1 | this.has(params.video_start_ts) << 2 | this.has(params.video_emoji_markup) << 4;
        this.int32(flags);
        this.flag(this.predicate, params.bot);
        this.flag(this.predicate, params.file);
        this.flag(this.predicate, params.video);
        this.flag(this.double, params.video_start_ts);
        this.flag(this.predicate, params.video_emoji_markup);
      },
      "photos.deletePhotos": function(params) {
        this.int32(-2016444625);
        this.vector(this.predicate, params.id);
      },
      "upload.saveFilePart": function(params) {
        this.int32(-1291540959);
        this.long(params.file_id);
        this.int(params.file_part);
        this.bytes(params.bytes);
      },
      "upload.getFile": function(params) {
        this.int32(-1101843010);
        const flags = this.has(params.precise) << 0 | this.has(params.cdn_supported) << 1;
        this.int32(flags);
        this.predicate(params.location);
        this.long(params.offset);
        this.int(params.limit);
      },
      "help.getConfig": function(params) {
        this.int32(-990308245);
      },
      "help.getNearestDc": function(params) {
        this.int32(531836966);
      },
      "help.getAppUpdate": function(params) {
        this.int32(1378703997);
        this.string(params.source);
      },
      "help.getInviteText": function(params) {
        this.int32(1295590211);
      },
      "photos.getUserPhotos": function(params) {
        this.int32(-1848823128);
        this.predicate(params.user_id);
        this.int(params.offset);
        this.long(params.max_id);
        this.int(params.limit);
      },
      "messages.getDhConfig": function(params) {
        this.int32(651135312);
        this.int(params.version);
        this.int(params.random_length);
      },
      "messages.requestEncryption": function(params) {
        this.int32(-162681021);
        this.predicate(params.user_id);
        this.int(params.random_id);
        this.bytes(params.g_a);
      },
      "messages.acceptEncryption": function(params) {
        this.int32(1035731989);
        this.predicate(params.peer);
        this.bytes(params.g_b);
        this.long(params.key_fingerprint);
      },
      "messages.discardEncryption": function(params) {
        this.int32(-208425312);
        const flags = this.has(params.delete_history) << 0;
        this.int32(flags);
        this.int(params.chat_id);
      },
      "messages.setEncryptedTyping": function(params) {
        this.int32(2031374829);
        this.predicate(params.peer);
        this.Bool(params.typing);
      },
      "messages.readEncryptedHistory": function(params) {
        this.int32(2135648522);
        this.predicate(params.peer);
        this.int(params.max_date);
      },
      "messages.sendEncrypted": function(params) {
        this.int32(1157265941);
        const flags = this.has(params.silent) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.long(params.random_id);
        this.bytes(params.data);
      },
      "messages.sendEncryptedFile": function(params) {
        this.int32(1431914525);
        const flags = this.has(params.silent) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.long(params.random_id);
        this.bytes(params.data);
        this.predicate(params.file);
      },
      "messages.sendEncryptedService": function(params) {
        this.int32(852769188);
        this.predicate(params.peer);
        this.long(params.random_id);
        this.bytes(params.data);
      },
      "messages.receivedQueue": function(params) {
        this.int32(1436924774);
        this.int(params.max_qts);
      },
      "messages.reportEncryptedSpam": function(params) {
        this.int32(1259113487);
        this.predicate(params.peer);
      },
      "upload.saveBigFilePart": function(params) {
        this.int32(-562337987);
        this.long(params.file_id);
        this.int(params.file_part);
        this.int(params.file_total_parts);
        this.bytes(params.bytes);
      },
      "initConnection": function(params) {
        this.int32(-1043505495);
        const flags = this.has(params.proxy) << 0 | this.has(params.params) << 1;
        this.int32(flags);
        this.int(params.api_id);
        this.string(params.device_model);
        this.string(params.system_version);
        this.string(params.app_version);
        this.string(params.system_lang_code);
        this.string(params.lang_pack);
        this.string(params.lang_code);
        this.flag(this.predicate, params.proxy);
        this.flag(this.predicate, params.params);
        this.predicate(params.query);
      },
      "help.getSupport": function(params) {
        this.int32(-1663104819);
      },
      "messages.readMessageContents": function(params) {
        this.int32(916930423);
        this.vector(this.int, params.id);
      },
      "account.checkUsername": function(params) {
        this.int32(655677548);
        this.string(params.username);
      },
      "account.updateUsername": function(params) {
        this.int32(1040964988);
        this.string(params.username);
      },
      "contacts.search": function(params) {
        this.int32(301470424);
        this.string(params.q);
        this.int(params.limit);
      },
      "account.getPrivacy": function(params) {
        this.int32(-623130288);
        this.predicate(params.key);
      },
      "account.setPrivacy": function(params) {
        this.int32(-906486552);
        this.predicate(params.key);
        this.vector(this.predicate, params.rules);
      },
      "account.deleteAccount": function(params) {
        this.int32(-1564422284);
        const flags = this.has(params.password) << 0;
        this.int32(flags);
        this.string(params.reason);
        this.flag(this.predicate, params.password);
      },
      "account.getAccountTTL": function(params) {
        this.int32(150761757);
      },
      "account.setAccountTTL": function(params) {
        this.int32(608323678);
        this.predicate(params.ttl);
      },
      "invokeWithLayer": function(params) {
        this.int32(-627372787);
        this.int(params.layer);
        this.predicate(params.query);
      },
      "contacts.resolveUsername": function(params) {
        this.int32(-113456221);
        this.string(params.username);
      },
      "account.sendChangePhoneCode": function(params) {
        this.int32(-2108208411);
        this.string(params.phone_number);
        this.predicate(params.settings);
      },
      "account.changePhone": function(params) {
        this.int32(1891839707);
        this.string(params.phone_number);
        this.string(params.phone_code_hash);
        this.string(params.phone_code);
      },
      "messages.getStickers": function(params) {
        this.int32(-710552671);
        this.string(params.emoticon);
        this.long(params.hash);
      },
      "messages.getAllStickers": function(params) {
        this.int32(-1197432408);
        this.long(params.hash);
      },
      "account.updateDeviceLocked": function(params) {
        this.int32(954152242);
        this.int(params.period);
      },
      "auth.importBotAuthorization": function(params) {
        this.int32(1738800940);
        this.int(params.flags);
        this.int(params.api_id);
        this.string(params.api_hash);
        this.string(params.bot_auth_token);
      },
      "messages.getWebPagePreview": function(params) {
        this.int32(-1956073268);
        const flags = this.has(params.entities) << 3;
        this.int32(flags);
        this.string(params.message);
        this.flagVector(this.predicate, params.entities);
      },
      "account.getAuthorizations": function(params) {
        this.int32(-484392616);
      },
      "account.resetAuthorization": function(params) {
        this.int32(-545786948);
        this.long(params.hash);
      },
      "account.getPassword": function(params) {
        this.int32(1418342645);
      },
      "account.getPasswordSettings": function(params) {
        this.int32(-1663767815);
        this.predicate(params.password);
      },
      "account.updatePasswordSettings": function(params) {
        this.int32(-1516564433);
        this.predicate(params.password);
        this.predicate(params.new_settings);
      },
      "auth.checkPassword": function(params) {
        this.int32(-779399914);
        this.predicate(params.password);
      },
      "auth.requestPasswordRecovery": function(params) {
        this.int32(-661144474);
      },
      "auth.recoverPassword": function(params) {
        this.int32(923364464);
        const flags = this.has(params.new_settings) << 0;
        this.int32(flags);
        this.string(params.code);
        this.flag(this.predicate, params.new_settings);
      },
      "invokeWithoutUpdates": function(params) {
        this.int32(-1080796745);
        this.predicate(params.query);
      },
      "messages.exportChatInvite": function(params) {
        this.int32(-1607670315);
        const flags = this.has(params.legacy_revoke_permanent) << 2 | this.has(params.request_needed) << 3 | this.has(params.expire_date) << 0 | this.has(params.usage_limit) << 1 | this.has(params.title) << 4;
        this.int32(flags);
        this.predicate(params.peer);
        this.flag(this.int, params.expire_date);
        this.flag(this.int, params.usage_limit);
        this.flag(this.string, params.title);
      },
      "messages.checkChatInvite": function(params) {
        this.int32(1051570619);
        this.string(params.hash);
      },
      "messages.importChatInvite": function(params) {
        this.int32(1817183516);
        this.string(params.hash);
      },
      "messages.getStickerSet": function(params) {
        this.int32(-928977804);
        this.predicate(params.stickerset);
        this.int(params.hash);
      },
      "messages.installStickerSet": function(params) {
        this.int32(-946871200);
        this.predicate(params.stickerset);
        this.Bool(params.archived);
      },
      "messages.uninstallStickerSet": function(params) {
        this.int32(-110209570);
        this.predicate(params.stickerset);
      },
      "messages.startBot": function(params) {
        this.int32(-421563528);
        this.predicate(params.bot);
        this.predicate(params.peer);
        this.long(params.random_id);
        this.string(params.start_param);
      },
      "help.getAppChangelog": function(params) {
        this.int32(-1877938321);
        this.string(params.prev_app_version);
      },
      "messages.getMessagesViews": function(params) {
        this.int32(1468322785);
        this.predicate(params.peer);
        this.vector(this.int, params.id);
        this.Bool(params.increment);
      },
      "channels.readHistory": function(params) {
        this.int32(-871347913);
        this.predicate(params.channel);
        this.int(params.max_id);
      },
      "channels.deleteMessages": function(params) {
        this.int32(-2067661490);
        this.predicate(params.channel);
        this.vector(this.int, params.id);
      },
      "channels.reportSpam": function(params) {
        this.int32(-196443371);
        this.predicate(params.channel);
        this.predicate(params.participant);
        this.vector(this.int, params.id);
      },
      "channels.getMessages": function(params) {
        this.int32(-1383294429);
        this.predicate(params.channel);
        this.vector(this.predicate, params.id);
      },
      "channels.getParticipants": function(params) {
        this.int32(2010044880);
        this.predicate(params.channel);
        this.predicate(params.filter);
        this.int(params.offset);
        this.int(params.limit);
        this.long(params.hash);
      },
      "channels.getParticipant": function(params) {
        this.int32(-1599378234);
        this.predicate(params.channel);
        this.predicate(params.participant);
      },
      "channels.getChannels": function(params) {
        this.int32(176122811);
        this.vector(this.predicate, params.id);
      },
      "channels.getFullChannel": function(params) {
        this.int32(141781513);
        this.predicate(params.channel);
      },
      "channels.createChannel": function(params) {
        this.int32(-1862244601);
        const flags = this.has(params.broadcast) << 0 | this.has(params.megagroup) << 1 | this.has(params.for_import) << 3 | this.has(params.forum) << 5 | this.has(params.geo_point) << 2 | this.has(params.address) << 2 | this.has(params.ttl_period) << 4;
        this.int32(flags);
        this.string(params.title);
        this.string(params.about);
        this.flag(this.predicate, params.geo_point);
        this.flag(this.string, params.address);
        this.flag(this.int, params.ttl_period);
      },
      "channels.editAdmin": function(params) {
        this.int32(-751007486);
        this.predicate(params.channel);
        this.predicate(params.user_id);
        this.predicate(params.admin_rights);
        this.string(params.rank);
      },
      "channels.editTitle": function(params) {
        this.int32(1450044624);
        this.predicate(params.channel);
        this.string(params.title);
      },
      "channels.editPhoto": function(params) {
        this.int32(-248621111);
        this.predicate(params.channel);
        this.predicate(params.photo);
      },
      "channels.checkUsername": function(params) {
        this.int32(283557164);
        this.predicate(params.channel);
        this.string(params.username);
      },
      "channels.updateUsername": function(params) {
        this.int32(890549214);
        this.predicate(params.channel);
        this.string(params.username);
      },
      "channels.joinChannel": function(params) {
        this.int32(615851205);
        this.predicate(params.channel);
      },
      "channels.leaveChannel": function(params) {
        this.int32(-130635115);
        this.predicate(params.channel);
      },
      "channels.inviteToChannel": function(params) {
        this.int32(429865580);
        this.predicate(params.channel);
        this.vector(this.predicate, params.users);
      },
      "channels.deleteChannel": function(params) {
        this.int32(-1072619549);
        this.predicate(params.channel);
      },
      "updates.getChannelDifference": function(params) {
        this.int32(51854712);
        const flags = this.has(params.force) << 0;
        this.int32(flags);
        this.predicate(params.channel);
        this.predicate(params.filter);
        this.int(params.pts);
        this.int(params.limit);
      },
      "messages.editChatAdmin": function(params) {
        this.int32(-1470377534);
        this.long(params.chat_id);
        this.predicate(params.user_id);
        this.Bool(params.is_admin);
      },
      "messages.migrateChat": function(params) {
        this.int32(-1568189671);
        this.long(params.chat_id);
      },
      "messages.searchGlobal": function(params) {
        this.int32(1271290010);
        const flags = this.has(params.folder_id) << 0;
        this.int32(flags);
        this.flag(this.int, params.folder_id);
        this.string(params.q);
        this.predicate(params.filter);
        this.int(params.min_date);
        this.int(params.max_date);
        this.int(params.offset_rate);
        this.predicate(params.offset_peer);
        this.int(params.offset_id);
        this.int(params.limit);
      },
      "messages.reorderStickerSets": function(params) {
        this.int32(2016638777);
        const flags = this.has(params.masks) << 0 | this.has(params.emojis) << 1;
        this.int32(flags);
        this.vector(this.long, params.order);
      },
      "messages.getDocumentByHash": function(params) {
        this.int32(-1309538785);
        this.bytes(params.sha256);
        this.long(params.size);
        this.string(params.mime_type);
      },
      "messages.getSavedGifs": function(params) {
        this.int32(1559270965);
        this.long(params.hash);
      },
      "messages.saveGif": function(params) {
        this.int32(846868683);
        this.predicate(params.id);
        this.Bool(params.unsave);
      },
      "messages.getInlineBotResults": function(params) {
        this.int32(1364105629);
        const flags = this.has(params.geo_point) << 0;
        this.int32(flags);
        this.predicate(params.bot);
        this.predicate(params.peer);
        this.flag(this.predicate, params.geo_point);
        this.string(params.query);
        this.string(params.offset);
      },
      "messages.setInlineBotResults": function(params) {
        this.int32(-1156406247);
        const flags = this.has(params.gallery) << 0 | this.has(params.private) << 1 | this.has(params.next_offset) << 2 | this.has(params.switch_pm) << 3 | this.has(params.switch_webview) << 4;
        this.int32(flags);
        this.long(params.query_id);
        this.vector(this.predicate, params.results);
        this.int(params.cache_time);
        this.flag(this.string, params.next_offset);
        this.flag(this.predicate, params.switch_pm);
        this.flag(this.predicate, params.switch_webview);
      },
      "messages.sendInlineBotResult": function(params) {
        this.int32(-738468661);
        const flags = this.has(params.silent) << 5 | this.has(params.background) << 6 | this.has(params.clear_draft) << 7 | this.has(params.hide_via) << 11 | this.has(params.reply_to_msg_id) << 0 | this.has(params.top_msg_id) << 9 | this.has(params.schedule_date) << 10 | this.has(params.send_as) << 13;
        this.int32(flags);
        this.predicate(params.peer);
        this.flag(this.int, params.reply_to_msg_id);
        this.flag(this.int, params.top_msg_id);
        this.long(params.random_id);
        this.long(params.query_id);
        this.string(params.id);
        this.flag(this.int, params.schedule_date);
        this.flag(this.predicate, params.send_as);
      },
      "channels.exportMessageLink": function(params) {
        this.int32(-432034325);
        const flags = this.has(params.grouped) << 0 | this.has(params.thread) << 1;
        this.int32(flags);
        this.predicate(params.channel);
        this.int(params.id);
      },
      "channels.toggleSignatures": function(params) {
        this.int32(527021574);
        this.predicate(params.channel);
        this.Bool(params.enabled);
      },
      "auth.resendCode": function(params) {
        this.int32(1056025023);
        this.string(params.phone_number);
        this.string(params.phone_code_hash);
      },
      "auth.cancelCode": function(params) {
        this.int32(520357240);
        this.string(params.phone_number);
        this.string(params.phone_code_hash);
      },
      "messages.getMessageEditData": function(params) {
        this.int32(-39416522);
        this.predicate(params.peer);
        this.int(params.id);
      },
      "messages.editMessage": function(params) {
        this.int32(1224152952);
        const flags = this.has(params.no_webpage) << 1 | this.has(params.message) << 11 | this.has(params.media) << 14 | this.has(params.reply_markup) << 2 | this.has(params.entities) << 3 | this.has(params.schedule_date) << 15;
        this.int32(flags);
        this.predicate(params.peer);
        this.int(params.id);
        this.flag(this.string, params.message);
        this.flag(this.predicate, params.media);
        this.flag(this.predicate, params.reply_markup);
        this.flagVector(this.predicate, params.entities);
        this.flag(this.int, params.schedule_date);
      },
      "messages.editInlineBotMessage": function(params) {
        this.int32(-2091549254);
        const flags = this.has(params.no_webpage) << 1 | this.has(params.message) << 11 | this.has(params.media) << 14 | this.has(params.reply_markup) << 2 | this.has(params.entities) << 3;
        this.int32(flags);
        this.predicate(params.id);
        this.flag(this.string, params.message);
        this.flag(this.predicate, params.media);
        this.flag(this.predicate, params.reply_markup);
        this.flagVector(this.predicate, params.entities);
      },
      "messages.getBotCallbackAnswer": function(params) {
        this.int32(-1824339449);
        const flags = this.has(params.game) << 1 | this.has(params.data) << 0 | this.has(params.password) << 2;
        this.int32(flags);
        this.predicate(params.peer);
        this.int(params.msg_id);
        this.flag(this.bytes, params.data);
        this.flag(this.predicate, params.password);
      },
      "messages.setBotCallbackAnswer": function(params) {
        this.int32(-712043766);
        const flags = this.has(params.alert) << 1 | this.has(params.message) << 0 | this.has(params.url) << 2;
        this.int32(flags);
        this.long(params.query_id);
        this.flag(this.string, params.message);
        this.flag(this.string, params.url);
        this.int(params.cache_time);
      },
      "contacts.getTopPeers": function(params) {
        this.int32(-1758168906);
        const flags = this.has(params.correspondents) << 0 | this.has(params.bots_pm) << 1 | this.has(params.bots_inline) << 2 | this.has(params.phone_calls) << 3 | this.has(params.forward_users) << 4 | this.has(params.forward_chats) << 5 | this.has(params.groups) << 10 | this.has(params.channels) << 15;
        this.int32(flags);
        this.int(params.offset);
        this.int(params.limit);
        this.long(params.hash);
      },
      "contacts.resetTopPeerRating": function(params) {
        this.int32(451113900);
        this.predicate(params.category);
        this.predicate(params.peer);
      },
      "messages.getPeerDialogs": function(params) {
        this.int32(-462373635);
        this.vector(this.predicate, params.peers);
      },
      "messages.saveDraft": function(params) {
        this.int32(-1271718337);
        const flags = this.has(params.no_webpage) << 1 | this.has(params.reply_to_msg_id) << 0 | this.has(params.top_msg_id) << 2 | this.has(params.entities) << 3;
        this.int32(flags);
        this.flag(this.int, params.reply_to_msg_id);
        this.flag(this.int, params.top_msg_id);
        this.predicate(params.peer);
        this.string(params.message);
        this.flagVector(this.predicate, params.entities);
      },
      "messages.getAllDrafts": function(params) {
        this.int32(1782549861);
      },
      "messages.getFeaturedStickers": function(params) {
        this.int32(1685588756);
        this.long(params.hash);
      },
      "messages.readFeaturedStickers": function(params) {
        this.int32(1527873830);
        this.vector(this.long, params.id);
      },
      "messages.getRecentStickers": function(params) {
        this.int32(-1649852357);
        const flags = this.has(params.attached) << 0;
        this.int32(flags);
        this.long(params.hash);
      },
      "messages.saveRecentSticker": function(params) {
        this.int32(958863608);
        const flags = this.has(params.attached) << 0;
        this.int32(flags);
        this.predicate(params.id);
        this.Bool(params.unsave);
      },
      "messages.clearRecentStickers": function(params) {
        this.int32(-1986437075);
        const flags = this.has(params.attached) << 0;
        this.int32(flags);
      },
      "messages.getArchivedStickers": function(params) {
        this.int32(1475442322);
        const flags = this.has(params.masks) << 0 | this.has(params.emojis) << 1;
        this.int32(flags);
        this.long(params.offset_id);
        this.int(params.limit);
      },
      "account.sendConfirmPhoneCode": function(params) {
        this.int32(457157256);
        this.string(params.hash);
        this.predicate(params.settings);
      },
      "account.confirmPhone": function(params) {
        this.int32(1596029123);
        this.string(params.phone_code_hash);
        this.string(params.phone_code);
      },
      "channels.getAdminedPublicChannels": function(params) {
        this.int32(-122669393);
        const flags = this.has(params.by_location) << 0 | this.has(params.check_limit) << 1;
        this.int32(flags);
      },
      "messages.getMaskStickers": function(params) {
        this.int32(1678738104);
        this.long(params.hash);
      },
      "messages.getAttachedStickers": function(params) {
        this.int32(-866424884);
        this.predicate(params.media);
      },
      "auth.dropTempAuthKeys": function(params) {
        this.int32(-1907842680);
        this.vector(this.long, params.except_auth_keys);
      },
      "messages.setGameScore": function(params) {
        this.int32(-1896289088);
        const flags = this.has(params.edit_message) << 0 | this.has(params.force) << 1;
        this.int32(flags);
        this.predicate(params.peer);
        this.int(params.id);
        this.predicate(params.user_id);
        this.int(params.score);
      },
      "messages.setInlineGameScore": function(params) {
        this.int32(363700068);
        const flags = this.has(params.edit_message) << 0 | this.has(params.force) << 1;
        this.int32(flags);
        this.predicate(params.id);
        this.predicate(params.user_id);
        this.int(params.score);
      },
      "messages.getGameHighScores": function(params) {
        this.int32(-400399203);
        this.predicate(params.peer);
        this.int(params.id);
        this.predicate(params.user_id);
      },
      "messages.getInlineGameHighScores": function(params) {
        this.int32(258170395);
        this.predicate(params.id);
        this.predicate(params.user_id);
      },
      "messages.getCommonChats": function(params) {
        this.int32(-468934396);
        this.predicate(params.user_id);
        this.long(params.max_id);
        this.int(params.limit);
      },
      "help.setBotUpdatesStatus": function(params) {
        this.int32(-333262899);
        this.int(params.pending_updates_count);
        this.string(params.message);
      },
      "messages.getWebPage": function(params) {
        this.int32(852135825);
        this.string(params.url);
        this.int(params.hash);
      },
      "messages.toggleDialogPin": function(params) {
        this.int32(-1489903017);
        const flags = this.has(params.pinned) << 0;
        this.int32(flags);
        this.predicate(params.peer);
      },
      "messages.reorderPinnedDialogs": function(params) {
        this.int32(991616823);
        const flags = this.has(params.force) << 0;
        this.int32(flags);
        this.int(params.folder_id);
        this.vector(this.predicate, params.order);
      },
      "messages.getPinnedDialogs": function(params) {
        this.int32(-692498958);
        this.int(params.folder_id);
      },
      "bots.sendCustomRequest": function(params) {
        this.int32(-1440257555);
        this.string(params.custom_method);
        this.predicate(params.params);
      },
      "bots.answerWebhookJSONQuery": function(params) {
        this.int32(-434028723);
        this.long(params.query_id);
        this.predicate(params.data);
      },
      "upload.getWebFile": function(params) {
        this.int32(619086221);
        this.predicate(params.location);
        this.int(params.offset);
        this.int(params.limit);
      },
      "payments.getPaymentForm": function(params) {
        this.int32(924093883);
        const flags = this.has(params.theme_params) << 0;
        this.int32(flags);
        this.predicate(params.invoice);
        this.flag(this.predicate, params.theme_params);
      },
      "payments.getPaymentReceipt": function(params) {
        this.int32(611897804);
        this.predicate(params.peer);
        this.int(params.msg_id);
      },
      "payments.validateRequestedInfo": function(params) {
        this.int32(-1228345045);
        const flags = this.has(params.save) << 0;
        this.int32(flags);
        this.predicate(params.invoice);
        this.predicate(params.info);
      },
      "payments.sendPaymentForm": function(params) {
        this.int32(755192367);
        const flags = this.has(params.requested_info_id) << 0 | this.has(params.shipping_option_id) << 1 | this.has(params.tip_amount) << 2;
        this.int32(flags);
        this.long(params.form_id);
        this.predicate(params.invoice);
        this.flag(this.string, params.requested_info_id);
        this.flag(this.string, params.shipping_option_id);
        this.predicate(params.credentials);
        this.flag(this.long, params.tip_amount);
      },
      "account.getTmpPassword": function(params) {
        this.int32(1151208273);
        this.predicate(params.password);
        this.int(params.period);
      },
      "payments.getSavedInfo": function(params) {
        this.int32(578650699);
      },
      "payments.clearSavedInfo": function(params) {
        this.int32(-667062079);
        const flags = this.has(params.credentials) << 0 | this.has(params.info) << 1;
        this.int32(flags);
      },
      "messages.setBotShippingResults": function(params) {
        this.int32(-436833542);
        const flags = this.has(params.error) << 0 | this.has(params.shipping_options) << 1;
        this.int32(flags);
        this.long(params.query_id);
        this.flag(this.string, params.error);
        this.flagVector(this.predicate, params.shipping_options);
      },
      "messages.setBotPrecheckoutResults": function(params) {
        this.int32(163765653);
        const flags = this.has(params.success) << 1 | this.has(params.error) << 0;
        this.int32(flags);
        this.long(params.query_id);
        this.flag(this.string, params.error);
      },
      "stickers.createStickerSet": function(params) {
        this.int32(-1876841625);
        const flags = this.has(params.masks) << 0 | this.has(params.animated) << 1 | this.has(params.videos) << 4 | this.has(params.emojis) << 5 | this.has(params.text_color) << 6 | this.has(params.thumb) << 2 | this.has(params.software) << 3;
        this.int32(flags);
        this.predicate(params.user_id);
        this.string(params.title);
        this.string(params.short_name);
        this.flag(this.predicate, params.thumb);
        this.vector(this.predicate, params.stickers);
        this.flag(this.string, params.software);
      },
      "stickers.removeStickerFromSet": function(params) {
        this.int32(-143257775);
        this.predicate(params.sticker);
      },
      "stickers.changeStickerPosition": function(params) {
        this.int32(-4795190);
        this.predicate(params.sticker);
        this.int(params.position);
      },
      "stickers.addStickerToSet": function(params) {
        this.int32(-2041315650);
        this.predicate(params.stickerset);
        this.predicate(params.sticker);
      },
      "messages.uploadMedia": function(params) {
        this.int32(1369162417);
        this.predicate(params.peer);
        this.predicate(params.media);
      },
      "phone.getCallConfig": function(params) {
        this.int32(1430593449);
      },
      "phone.requestCall": function(params) {
        this.int32(1124046573);
        const flags = this.has(params.video) << 0;
        this.int32(flags);
        this.predicate(params.user_id);
        this.int(params.random_id);
        this.bytes(params.g_a_hash);
        this.predicate(params.protocol);
      },
      "phone.acceptCall": function(params) {
        this.int32(1003664544);
        this.predicate(params.peer);
        this.bytes(params.g_b);
        this.predicate(params.protocol);
      },
      "phone.confirmCall": function(params) {
        this.int32(788404002);
        this.predicate(params.peer);
        this.bytes(params.g_a);
        this.long(params.key_fingerprint);
        this.predicate(params.protocol);
      },
      "phone.receivedCall": function(params) {
        this.int32(399855457);
        this.predicate(params.peer);
      },
      "phone.discardCall": function(params) {
        this.int32(-1295269440);
        const flags = this.has(params.video) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.int(params.duration);
        this.predicate(params.reason);
        this.long(params.connection_id);
      },
      "phone.setCallRating": function(params) {
        this.int32(1508562471);
        const flags = this.has(params.user_initiative) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.int(params.rating);
        this.string(params.comment);
      },
      "phone.saveCallDebug": function(params) {
        this.int32(662363518);
        this.predicate(params.peer);
        this.predicate(params.debug);
      },
      "upload.getCdnFile": function(params) {
        this.int32(962554330);
        this.bytes(params.file_token);
        this.long(params.offset);
        this.int(params.limit);
      },
      "upload.reuploadCdnFile": function(params) {
        this.int32(-1691921240);
        this.bytes(params.file_token);
        this.bytes(params.request_token);
      },
      "help.getCdnConfig": function(params) {
        this.int32(1375900482);
      },
      "langpack.getLangPack": function(params) {
        this.int32(-219008246);
        this.string(params.lang_pack);
        this.string(params.lang_code);
      },
      "langpack.getStrings": function(params) {
        this.int32(-269862909);
        this.string(params.lang_pack);
        this.string(params.lang_code);
        this.vector(this.string, params.keys);
      },
      "langpack.getDifference": function(params) {
        this.int32(-845657435);
        this.string(params.lang_pack);
        this.string(params.lang_code);
        this.int(params.from_version);
      },
      "langpack.getLanguages": function(params) {
        this.int32(1120311183);
        this.string(params.lang_pack);
      },
      "channels.editBanned": function(params) {
        this.int32(-1763259007);
        this.predicate(params.channel);
        this.predicate(params.participant);
        this.predicate(params.banned_rights);
      },
      "channels.getAdminLog": function(params) {
        this.int32(870184064);
        const flags = this.has(params.events_filter) << 0 | this.has(params.admins) << 1;
        this.int32(flags);
        this.predicate(params.channel);
        this.string(params.q);
        this.flag(this.predicate, params.events_filter);
        this.flagVector(this.predicate, params.admins);
        this.long(params.max_id);
        this.long(params.min_id);
        this.int(params.limit);
      },
      "upload.getCdnFileHashes": function(params) {
        this.int32(-1847836879);
        this.bytes(params.file_token);
        this.long(params.offset);
      },
      "messages.sendScreenshotNotification": function(params) {
        this.int32(-914493408);
        this.predicate(params.peer);
        this.int(params.reply_to_msg_id);
        this.long(params.random_id);
      },
      "channels.setStickers": function(params) {
        this.int32(-359881479);
        this.predicate(params.channel);
        this.predicate(params.stickerset);
      },
      "messages.getFavedStickers": function(params) {
        this.int32(82946729);
        this.long(params.hash);
      },
      "messages.faveSticker": function(params) {
        this.int32(-1174420133);
        this.predicate(params.id);
        this.Bool(params.unfave);
      },
      "channels.readMessageContents": function(params) {
        this.int32(-357180360);
        this.predicate(params.channel);
        this.vector(this.int, params.id);
      },
      "contacts.resetSaved": function(params) {
        this.int32(-2020263951);
      },
      "messages.getUnreadMentions": function(params) {
        this.int32(-251140208);
        const flags = this.has(params.top_msg_id) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.flag(this.int, params.top_msg_id);
        this.int(params.offset_id);
        this.int(params.add_offset);
        this.int(params.limit);
        this.int(params.max_id);
        this.int(params.min_id);
      },
      "channels.deleteHistory": function(params) {
        this.int32(-1683319225);
        const flags = this.has(params.for_everyone) << 0;
        this.int32(flags);
        this.predicate(params.channel);
        this.int(params.max_id);
      },
      "help.getRecentMeUrls": function(params) {
        this.int32(1036054804);
        this.string(params.referer);
      },
      "channels.togglePreHistoryHidden": function(params) {
        this.int32(-356796084);
        this.predicate(params.channel);
        this.Bool(params.enabled);
      },
      "messages.readMentions": function(params) {
        this.int32(921026381);
        const flags = this.has(params.top_msg_id) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.flag(this.int, params.top_msg_id);
      },
      "messages.getRecentLocations": function(params) {
        this.int32(1881817312);
        this.predicate(params.peer);
        this.int(params.limit);
        this.long(params.hash);
      },
      "messages.sendMultiMedia": function(params) {
        this.int32(-1225713124);
        const flags = this.has(params.silent) << 5 | this.has(params.background) << 6 | this.has(params.clear_draft) << 7 | this.has(params.noforwards) << 14 | this.has(params.update_stickersets_order) << 15 | this.has(params.reply_to_msg_id) << 0 | this.has(params.top_msg_id) << 9 | this.has(params.schedule_date) << 10 | this.has(params.send_as) << 13;
        this.int32(flags);
        this.predicate(params.peer);
        this.flag(this.int, params.reply_to_msg_id);
        this.flag(this.int, params.top_msg_id);
        this.vector(this.predicate, params.multi_media);
        this.flag(this.int, params.schedule_date);
        this.flag(this.predicate, params.send_as);
      },
      "messages.uploadEncryptedFile": function(params) {
        this.int32(1347929239);
        this.predicate(params.peer);
        this.predicate(params.file);
      },
      "account.getWebAuthorizations": function(params) {
        this.int32(405695855);
      },
      "account.resetWebAuthorization": function(params) {
        this.int32(755087855);
        this.long(params.hash);
      },
      "account.resetWebAuthorizations": function(params) {
        this.int32(1747789204);
      },
      "messages.searchStickerSets": function(params) {
        this.int32(896555914);
        const flags = this.has(params.exclude_featured) << 0;
        this.int32(flags);
        this.string(params.q);
        this.long(params.hash);
      },
      "upload.getFileHashes": function(params) {
        this.int32(-1856595926);
        this.predicate(params.location);
        this.long(params.offset);
      },
      "help.getTermsOfServiceUpdate": function(params) {
        this.int32(749019089);
      },
      "help.acceptTermsOfService": function(params) {
        this.int32(-294455398);
        this.predicate(params.id);
      },
      "account.getAllSecureValues": function(params) {
        this.int32(-1299661699);
      },
      "account.getSecureValue": function(params) {
        this.int32(1936088002);
        this.vector(this.predicate, params.types);
      },
      "account.saveSecureValue": function(params) {
        this.int32(-1986010339);
        this.predicate(params.value);
        this.long(params.secure_secret_id);
      },
      "account.deleteSecureValue": function(params) {
        this.int32(-1199522741);
        this.vector(this.predicate, params.types);
      },
      "users.setSecureValueErrors": function(params) {
        this.int32(-1865902923);
        this.predicate(params.id);
        this.vector(this.predicate, params.errors);
      },
      "account.getAuthorizationForm": function(params) {
        this.int32(-1456907910);
        this.long(params.bot_id);
        this.string(params.scope);
        this.string(params.public_key);
      },
      "account.acceptAuthorization": function(params) {
        this.int32(-202552205);
        this.long(params.bot_id);
        this.string(params.scope);
        this.string(params.public_key);
        this.vector(this.predicate, params.value_hashes);
        this.predicate(params.credentials);
      },
      "account.sendVerifyPhoneCode": function(params) {
        this.int32(-1516022023);
        this.string(params.phone_number);
        this.predicate(params.settings);
      },
      "account.verifyPhone": function(params) {
        this.int32(1305716726);
        this.string(params.phone_number);
        this.string(params.phone_code_hash);
        this.string(params.phone_code);
      },
      "account.sendVerifyEmailCode": function(params) {
        this.int32(-1730136133);
        this.predicate(params.purpose);
        this.string(params.email);
      },
      "account.verifyEmail": function(params) {
        this.int32(53322959);
        this.predicate(params.purpose);
        this.predicate(params.verification);
      },
      "help.getDeepLinkInfo": function(params) {
        this.int32(1072547679);
        this.string(params.path);
      },
      "contacts.getSaved": function(params) {
        this.int32(-2098076769);
      },
      "channels.getLeftChannels": function(params) {
        this.int32(-2092831552);
        this.int(params.offset);
      },
      "account.initTakeoutSession": function(params) {
        this.int32(-1896617296);
        const flags = this.has(params.contacts) << 0 | this.has(params.message_users) << 1 | this.has(params.message_chats) << 2 | this.has(params.message_megagroups) << 3 | this.has(params.message_channels) << 4 | this.has(params.files) << 5 | this.has(params.file_max_size) << 5;
        this.int32(flags);
        this.flag(this.long, params.file_max_size);
      },
      "account.finishTakeoutSession": function(params) {
        this.int32(489050862);
        const flags = this.has(params.success) << 0;
        this.int32(flags);
      },
      "messages.getSplitRanges": function(params) {
        this.int32(486505992);
      },
      "invokeWithMessagesRange": function(params) {
        this.int32(911373810);
        this.predicate(params.range);
        this.predicate(params.query);
      },
      "invokeWithTakeout": function(params) {
        this.int32(-1398145746);
        this.long(params.takeout_id);
        this.predicate(params.query);
      },
      "messages.markDialogUnread": function(params) {
        this.int32(-1031349873);
        const flags = this.has(params.unread) << 0;
        this.int32(flags);
        this.predicate(params.peer);
      },
      "messages.getDialogUnreadMarks": function(params) {
        this.int32(585256482);
      },
      "contacts.toggleTopPeers": function(params) {
        this.int32(-2062238246);
        this.Bool(params.enabled);
      },
      "messages.clearAllDrafts": function(params) {
        this.int32(2119757468);
      },
      "help.getAppConfig": function(params) {
        this.int32(1642330196);
        this.int(params.hash);
      },
      "help.saveAppLog": function(params) {
        this.int32(1862465352);
        this.vector(this.predicate, params.events);
      },
      "help.getPassportConfig": function(params) {
        this.int32(-966677240);
        this.int(params.hash);
      },
      "langpack.getLanguage": function(params) {
        this.int32(1784243458);
        this.string(params.lang_pack);
        this.string(params.lang_code);
      },
      "messages.updatePinnedMessage": function(params) {
        this.int32(-760547348);
        const flags = this.has(params.silent) << 0 | this.has(params.unpin) << 1 | this.has(params.pm_oneside) << 2;
        this.int32(flags);
        this.predicate(params.peer);
        this.int(params.id);
      },
      "account.confirmPasswordEmail": function(params) {
        this.int32(-1881204448);
        this.string(params.code);
      },
      "account.resendPasswordEmail": function(params) {
        this.int32(2055154197);
      },
      "account.cancelPasswordEmail": function(params) {
        this.int32(-1043606090);
      },
      "help.getSupportName": function(params) {
        this.int32(-748624084);
      },
      "help.getUserInfo": function(params) {
        this.int32(59377875);
        this.predicate(params.user_id);
      },
      "help.editUserInfo": function(params) {
        this.int32(1723407216);
        this.predicate(params.user_id);
        this.string(params.message);
        this.vector(this.predicate, params.entities);
      },
      "account.getContactSignUpNotification": function(params) {
        this.int32(-1626880216);
      },
      "account.setContactSignUpNotification": function(params) {
        this.int32(-806076575);
        this.Bool(params.silent);
      },
      "account.getNotifyExceptions": function(params) {
        this.int32(1398240377);
        const flags = this.has(params.compare_sound) << 1 | this.has(params.peer) << 0;
        this.int32(flags);
        this.flag(this.predicate, params.peer);
      },
      "messages.sendVote": function(params) {
        this.int32(283795844);
        this.predicate(params.peer);
        this.int(params.msg_id);
        this.vector(this.bytes, params.options);
      },
      "messages.getPollResults": function(params) {
        this.int32(1941660731);
        this.predicate(params.peer);
        this.int(params.msg_id);
      },
      "messages.getOnlines": function(params) {
        this.int32(1848369232);
        this.predicate(params.peer);
      },
      "messages.editChatAbout": function(params) {
        this.int32(-554301545);
        this.predicate(params.peer);
        this.string(params.about);
      },
      "messages.editChatDefaultBannedRights": function(params) {
        this.int32(-1517917375);
        this.predicate(params.peer);
        this.predicate(params.banned_rights);
      },
      "account.getWallPaper": function(params) {
        this.int32(-57811990);
        this.predicate(params.wallpaper);
      },
      "account.uploadWallPaper": function(params) {
        this.int32(-476410109);
        const flags = this.has(params.for_chat) << 0;
        this.int32(flags);
        this.predicate(params.file);
        this.string(params.mime_type);
        this.predicate(params.settings);
      },
      "account.saveWallPaper": function(params) {
        this.int32(1817860919);
        this.predicate(params.wallpaper);
        this.Bool(params.unsave);
        this.predicate(params.settings);
      },
      "account.installWallPaper": function(params) {
        this.int32(-18000023);
        this.predicate(params.wallpaper);
        this.predicate(params.settings);
      },
      "account.resetWallPapers": function(params) {
        this.int32(-1153722364);
      },
      "account.getAutoDownloadSettings": function(params) {
        this.int32(1457130303);
      },
      "account.saveAutoDownloadSettings": function(params) {
        this.int32(1995661875);
        const flags = this.has(params.low) << 0 | this.has(params.high) << 1;
        this.int32(flags);
        this.predicate(params.settings);
      },
      "messages.getEmojiKeywords": function(params) {
        this.int32(899735650);
        this.string(params.lang_code);
      },
      "messages.getEmojiKeywordsDifference": function(params) {
        this.int32(352892591);
        this.string(params.lang_code);
        this.int(params.from_version);
      },
      "messages.getEmojiKeywordsLanguages": function(params) {
        this.int32(1318675378);
        this.vector(this.string, params.lang_codes);
      },
      "messages.getEmojiURL": function(params) {
        this.int32(-709817306);
        this.string(params.lang_code);
      },
      "folders.editPeerFolders": function(params) {
        this.int32(1749536939);
        this.vector(this.predicate, params.folder_peers);
      },
      "messages.getSearchCounters": function(params) {
        this.int32(11435201);
        const flags = this.has(params.top_msg_id) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.flag(this.int, params.top_msg_id);
        this.vector(this.predicate, params.filters);
      },
      "channels.getGroupsForDiscussion": function(params) {
        this.int32(-170208392);
      },
      "channels.setDiscussionGroup": function(params) {
        this.int32(1079520178);
        this.predicate(params.broadcast);
        this.predicate(params.group);
      },
      "messages.requestUrlAuth": function(params) {
        this.int32(428848198);
        const flags = this.has(params.peer) << 1 | this.has(params.msg_id) << 1 | this.has(params.button_id) << 1 | this.has(params.url) << 2;
        this.int32(flags);
        this.flag(this.predicate, params.peer);
        this.flag(this.int, params.msg_id);
        this.flag(this.int, params.button_id);
        this.flag(this.string, params.url);
      },
      "messages.acceptUrlAuth": function(params) {
        this.int32(-1322487515);
        const flags = this.has(params.write_allowed) << 0 | this.has(params.peer) << 1 | this.has(params.msg_id) << 1 | this.has(params.button_id) << 1 | this.has(params.url) << 2;
        this.int32(flags);
        this.flag(this.predicate, params.peer);
        this.flag(this.int, params.msg_id);
        this.flag(this.int, params.button_id);
        this.flag(this.string, params.url);
      },
      "messages.hidePeerSettingsBar": function(params) {
        this.int32(1336717624);
        this.predicate(params.peer);
      },
      "contacts.addContact": function(params) {
        this.int32(-386636848);
        const flags = this.has(params.add_phone_privacy_exception) << 0;
        this.int32(flags);
        this.predicate(params.id);
        this.string(params.first_name);
        this.string(params.last_name);
        this.string(params.phone);
      },
      "contacts.acceptContact": function(params) {
        this.int32(-130964977);
        this.predicate(params.id);
      },
      "channels.editCreator": function(params) {
        this.int32(-1892102881);
        this.predicate(params.channel);
        this.predicate(params.user_id);
        this.predicate(params.password);
      },
      "contacts.getLocated": function(params) {
        this.int32(-750207932);
        const flags = this.has(params.background) << 1 | this.has(params.self_expires) << 0;
        this.int32(flags);
        this.predicate(params.geo_point);
        this.flag(this.int, params.self_expires);
      },
      "channels.editLocation": function(params) {
        this.int32(1491484525);
        this.predicate(params.channel);
        this.predicate(params.geo_point);
        this.string(params.address);
      },
      "channels.toggleSlowMode": function(params) {
        this.int32(-304832784);
        this.predicate(params.channel);
        this.int(params.seconds);
      },
      "messages.getScheduledHistory": function(params) {
        this.int32(-183077365);
        this.predicate(params.peer);
        this.long(params.hash);
      },
      "messages.getScheduledMessages": function(params) {
        this.int32(-1111817116);
        this.predicate(params.peer);
        this.vector(this.int, params.id);
      },
      "messages.sendScheduledMessages": function(params) {
        this.int32(-1120369398);
        this.predicate(params.peer);
        this.vector(this.int, params.id);
      },
      "messages.deleteScheduledMessages": function(params) {
        this.int32(1504586518);
        this.predicate(params.peer);
        this.vector(this.int, params.id);
      },
      "account.uploadTheme": function(params) {
        this.int32(473805619);
        const flags = this.has(params.thumb) << 0;
        this.int32(flags);
        this.predicate(params.file);
        this.flag(this.predicate, params.thumb);
        this.string(params.file_name);
        this.string(params.mime_type);
      },
      "account.createTheme": function(params) {
        this.int32(1697530880);
        const flags = this.has(params.document) << 2 | this.has(params.settings) << 3;
        this.int32(flags);
        this.string(params.slug);
        this.string(params.title);
        this.flag(this.predicate, params.document);
        this.flagVector(this.predicate, params.settings);
      },
      "account.updateTheme": function(params) {
        this.int32(737414348);
        const flags = this.has(params.slug) << 0 | this.has(params.title) << 1 | this.has(params.document) << 2 | this.has(params.settings) << 3;
        this.int32(flags);
        this.string(params.format);
        this.predicate(params.theme);
        this.flag(this.string, params.slug);
        this.flag(this.string, params.title);
        this.flag(this.predicate, params.document);
        this.flagVector(this.predicate, params.settings);
      },
      "account.saveTheme": function(params) {
        this.int32(-229175188);
        this.predicate(params.theme);
        this.Bool(params.unsave);
      },
      "account.installTheme": function(params) {
        this.int32(-953697477);
        const flags = this.has(params.dark) << 0 | this.has(params.theme) << 1 | this.has(params.format) << 2 | this.has(params.base_theme) << 3;
        this.int32(flags);
        this.flag(this.predicate, params.theme);
        this.flag(this.string, params.format);
        this.flag(this.predicate, params.base_theme);
      },
      "account.getTheme": function(params) {
        this.int32(978872812);
        this.string(params.format);
        this.predicate(params.theme);
      },
      "account.getThemes": function(params) {
        this.int32(1913054296);
        this.string(params.format);
        this.long(params.hash);
      },
      "auth.exportLoginToken": function(params) {
        this.int32(-1210022402);
        this.int(params.api_id);
        this.string(params.api_hash);
        this.vector(this.long, params.except_ids);
      },
      "auth.importLoginToken": function(params) {
        this.int32(-1783866140);
        this.bytes(params.token);
      },
      "auth.acceptLoginToken": function(params) {
        this.int32(-392909491);
        this.bytes(params.token);
      },
      "account.setContentSettings": function(params) {
        this.int32(-1250643605);
        const flags = this.has(params.sensitive_enabled) << 0;
        this.int32(flags);
      },
      "account.getContentSettings": function(params) {
        this.int32(-1952756306);
      },
      "channels.getInactiveChannels": function(params) {
        this.int32(300429806);
      },
      "account.getMultiWallPapers": function(params) {
        this.int32(1705865692);
        this.vector(this.predicate, params.wallpapers);
      },
      "messages.getPollVotes": function(params) {
        this.int32(-1200736242);
        const flags = this.has(params.option) << 0 | this.has(params.offset) << 1;
        this.int32(flags);
        this.predicate(params.peer);
        this.int(params.id);
        this.flag(this.bytes, params.option);
        this.flag(this.string, params.offset);
        this.int(params.limit);
      },
      "messages.toggleStickerSets": function(params) {
        this.int32(-1257951254);
        const flags = this.has(params.uninstall) << 0 | this.has(params.archive) << 1 | this.has(params.unarchive) << 2;
        this.int32(flags);
        this.vector(this.predicate, params.stickersets);
      },
      "payments.getBankCardData": function(params) {
        this.int32(779736953);
        this.string(params.number);
      },
      "messages.getDialogFilters": function(params) {
        this.int32(-241247891);
      },
      "messages.getSuggestedDialogFilters": function(params) {
        this.int32(-1566780372);
      },
      "messages.updateDialogFilter": function(params) {
        this.int32(450142282);
        const flags = this.has(params.filter) << 0;
        this.int32(flags);
        this.int(params.id);
        this.flag(this.predicate, params.filter);
      },
      "messages.updateDialogFiltersOrder": function(params) {
        this.int32(-983318044);
        this.vector(this.int, params.order);
      },
      "stats.getBroadcastStats": function(params) {
        this.int32(-1421720550);
        const flags = this.has(params.dark) << 0;
        this.int32(flags);
        this.predicate(params.channel);
      },
      "stats.loadAsyncGraph": function(params) {
        this.int32(1646092192);
        const flags = this.has(params.x) << 0;
        this.int32(flags);
        this.string(params.token);
        this.flag(this.long, params.x);
      },
      "stickers.setStickerSetThumb": function(params) {
        this.int32(-1486204014);
        const flags = this.has(params.thumb) << 0 | this.has(params.thumb_document_id) << 1;
        this.int32(flags);
        this.predicate(params.stickerset);
        this.flag(this.predicate, params.thumb);
        this.flag(this.long, params.thumb_document_id);
      },
      "bots.setBotCommands": function(params) {
        this.int32(85399130);
        this.predicate(params.scope);
        this.string(params.lang_code);
        this.vector(this.predicate, params.commands);
      },
      "messages.getOldFeaturedStickers": function(params) {
        this.int32(2127598753);
        this.int(params.offset);
        this.int(params.limit);
        this.long(params.hash);
      },
      "help.getPromoData": function(params) {
        this.int32(-1063816159);
      },
      "help.hidePromoData": function(params) {
        this.int32(505748629);
        this.predicate(params.peer);
      },
      "phone.sendSignalingData": function(params) {
        this.int32(-8744061);
        this.predicate(params.peer);
        this.bytes(params.data);
      },
      "stats.getMegagroupStats": function(params) {
        this.int32(-589330937);
        const flags = this.has(params.dark) << 0;
        this.int32(flags);
        this.predicate(params.channel);
      },
      "account.getGlobalPrivacySettings": function(params) {
        this.int32(-349483786);
      },
      "account.setGlobalPrivacySettings": function(params) {
        this.int32(517647042);
        this.predicate(params.settings);
      },
      "help.dismissSuggestion": function(params) {
        this.int32(-183649631);
        this.predicate(params.peer);
        this.string(params.suggestion);
      },
      "help.getCountriesList": function(params) {
        this.int32(1935116200);
        this.string(params.lang_code);
        this.int(params.hash);
      },
      "messages.getReplies": function(params) {
        this.int32(584962828);
        this.predicate(params.peer);
        this.int(params.msg_id);
        this.int(params.offset_id);
        this.int(params.offset_date);
        this.int(params.add_offset);
        this.int(params.limit);
        this.int(params.max_id);
        this.int(params.min_id);
        this.long(params.hash);
      },
      "messages.getDiscussionMessage": function(params) {
        this.int32(1147761405);
        this.predicate(params.peer);
        this.int(params.msg_id);
      },
      "messages.readDiscussion": function(params) {
        this.int32(-147740172);
        this.predicate(params.peer);
        this.int(params.msg_id);
        this.int(params.read_max_id);
      },
      "contacts.blockFromReplies": function(params) {
        this.int32(698914348);
        const flags = this.has(params.delete_message) << 0 | this.has(params.delete_history) << 1 | this.has(params.report_spam) << 2;
        this.int32(flags);
        this.int(params.msg_id);
      },
      "stats.getMessagePublicForwards": function(params) {
        this.int32(1445996571);
        this.predicate(params.channel);
        this.int(params.msg_id);
        this.int(params.offset_rate);
        this.predicate(params.offset_peer);
        this.int(params.offset_id);
        this.int(params.limit);
      },
      "stats.getMessageStats": function(params) {
        this.int32(-1226791947);
        const flags = this.has(params.dark) << 0;
        this.int32(flags);
        this.predicate(params.channel);
        this.int(params.msg_id);
      },
      "messages.unpinAllMessages": function(params) {
        this.int32(-299714136);
        const flags = this.has(params.top_msg_id) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.flag(this.int, params.top_msg_id);
      },
      "phone.createGroupCall": function(params) {
        this.int32(1221445336);
        const flags = this.has(params.rtmp_stream) << 2 | this.has(params.title) << 0 | this.has(params.schedule_date) << 1;
        this.int32(flags);
        this.predicate(params.peer);
        this.int(params.random_id);
        this.flag(this.string, params.title);
        this.flag(this.int, params.schedule_date);
      },
      "phone.joinGroupCall": function(params) {
        this.int32(-1322057861);
        const flags = this.has(params.muted) << 0 | this.has(params.video_stopped) << 2 | this.has(params.invite_hash) << 1;
        this.int32(flags);
        this.predicate(params.call);
        this.predicate(params.join_as);
        this.flag(this.string, params.invite_hash);
        this.predicate(params.params);
      },
      "phone.leaveGroupCall": function(params) {
        this.int32(1342404601);
        this.predicate(params.call);
        this.int(params.source);
      },
      "phone.inviteToGroupCall": function(params) {
        this.int32(2067345760);
        this.predicate(params.call);
        this.vector(this.predicate, params.users);
      },
      "phone.discardGroupCall": function(params) {
        this.int32(2054648117);
        this.predicate(params.call);
      },
      "phone.toggleGroupCallSettings": function(params) {
        this.int32(1958458429);
        const flags = this.has(params.reset_invite_hash) << 1 | this.has(params.join_muted) << 0;
        this.int32(flags);
        this.predicate(params.call);
        this.flag(this.Bool, params.join_muted);
      },
      "phone.getGroupCall": function(params) {
        this.int32(68699611);
        this.predicate(params.call);
        this.int(params.limit);
      },
      "phone.getGroupParticipants": function(params) {
        this.int32(-984033109);
        this.predicate(params.call);
        this.vector(this.predicate, params.ids);
        this.vector(this.int, params.sources);
        this.string(params.offset);
        this.int(params.limit);
      },
      "phone.checkGroupCall": function(params) {
        this.int32(-1248003721);
        this.predicate(params.call);
        this.vector(this.int, params.sources);
      },
      "messages.deleteChat": function(params) {
        this.int32(1540419152);
        this.long(params.chat_id);
      },
      "messages.deletePhoneCallHistory": function(params) {
        this.int32(-104078327);
        const flags = this.has(params.revoke) << 0;
        this.int32(flags);
      },
      "messages.checkHistoryImport": function(params) {
        this.int32(1140726259);
        this.string(params.import_head);
      },
      "messages.initHistoryImport": function(params) {
        this.int32(873008187);
        this.predicate(params.peer);
        this.predicate(params.file);
        this.int(params.media_count);
      },
      "messages.uploadImportedMedia": function(params) {
        this.int32(713433234);
        this.predicate(params.peer);
        this.long(params.import_id);
        this.string(params.file_name);
        this.predicate(params.media);
      },
      "messages.startHistoryImport": function(params) {
        this.int32(-1271008444);
        this.predicate(params.peer);
        this.long(params.import_id);
      },
      "messages.getExportedChatInvites": function(params) {
        this.int32(-1565154314);
        const flags = this.has(params.revoked) << 3 | this.has(params.offset_date) << 2 | this.has(params.offset_link) << 2;
        this.int32(flags);
        this.predicate(params.peer);
        this.predicate(params.admin_id);
        this.flag(this.int, params.offset_date);
        this.flag(this.string, params.offset_link);
        this.int(params.limit);
      },
      "messages.getExportedChatInvite": function(params) {
        this.int32(1937010524);
        this.predicate(params.peer);
        this.string(params.link);
      },
      "messages.editExportedChatInvite": function(params) {
        this.int32(-1110823051);
        const flags = this.has(params.revoked) << 2 | this.has(params.expire_date) << 0 | this.has(params.usage_limit) << 1 | this.has(params.request_needed) << 3 | this.has(params.title) << 4;
        this.int32(flags);
        this.predicate(params.peer);
        this.string(params.link);
        this.flag(this.int, params.expire_date);
        this.flag(this.int, params.usage_limit);
        this.flag(this.Bool, params.request_needed);
        this.flag(this.string, params.title);
      },
      "messages.deleteRevokedExportedChatInvites": function(params) {
        this.int32(1452833749);
        this.predicate(params.peer);
        this.predicate(params.admin_id);
      },
      "messages.deleteExportedChatInvite": function(params) {
        this.int32(-731601877);
        this.predicate(params.peer);
        this.string(params.link);
      },
      "messages.getAdminsWithInvites": function(params) {
        this.int32(958457583);
        this.predicate(params.peer);
      },
      "messages.getChatInviteImporters": function(params) {
        this.int32(-553329330);
        const flags = this.has(params.requested) << 0 | this.has(params.link) << 1 | this.has(params.q) << 2;
        this.int32(flags);
        this.predicate(params.peer);
        this.flag(this.string, params.link);
        this.flag(this.string, params.q);
        this.int(params.offset_date);
        this.predicate(params.offset_user);
        this.int(params.limit);
      },
      "messages.setHistoryTTL": function(params) {
        this.int32(-1207017500);
        this.predicate(params.peer);
        this.int(params.period);
      },
      "account.reportProfilePhoto": function(params) {
        this.int32(-91437323);
        this.predicate(params.peer);
        this.predicate(params.photo_id);
        this.predicate(params.reason);
        this.string(params.message);
      },
      "channels.convertToGigagroup": function(params) {
        this.int32(187239529);
        this.predicate(params.channel);
      },
      "messages.checkHistoryImportPeer": function(params) {
        this.int32(1573261059);
        this.predicate(params.peer);
      },
      "phone.toggleGroupCallRecord": function(params) {
        this.int32(-248985848);
        const flags = this.has(params.start) << 0 | this.has(params.video) << 2 | this.has(params.title) << 1 | this.has(params.video_portrait) << 2;
        this.int32(flags);
        this.predicate(params.call);
        this.flag(this.string, params.title);
        this.flag(this.Bool, params.video_portrait);
      },
      "phone.editGroupCallParticipant": function(params) {
        this.int32(-1524155713);
        const flags = this.has(params.muted) << 0 | this.has(params.volume) << 1 | this.has(params.raise_hand) << 2 | this.has(params.video_stopped) << 3 | this.has(params.video_paused) << 4 | this.has(params.presentation_paused) << 5;
        this.int32(flags);
        this.predicate(params.call);
        this.predicate(params.participant);
        this.flag(this.Bool, params.muted);
        this.flag(this.int, params.volume);
        this.flag(this.Bool, params.raise_hand);
        this.flag(this.Bool, params.video_stopped);
        this.flag(this.Bool, params.video_paused);
        this.flag(this.Bool, params.presentation_paused);
      },
      "phone.editGroupCallTitle": function(params) {
        this.int32(480685066);
        this.predicate(params.call);
        this.string(params.title);
      },
      "phone.getGroupCallJoinAs": function(params) {
        this.int32(-277077702);
        this.predicate(params.peer);
      },
      "phone.exportGroupCallInvite": function(params) {
        this.int32(-425040769);
        const flags = this.has(params.can_self_unmute) << 0;
        this.int32(flags);
        this.predicate(params.call);
      },
      "phone.toggleGroupCallStartSubscription": function(params) {
        this.int32(563885286);
        this.predicate(params.call);
        this.Bool(params.subscribed);
      },
      "phone.startScheduledGroupCall": function(params) {
        this.int32(1451287362);
        this.predicate(params.call);
      },
      "phone.saveDefaultGroupCallJoinAs": function(params) {
        this.int32(1465786252);
        this.predicate(params.peer);
        this.predicate(params.join_as);
      },
      "phone.joinGroupCallPresentation": function(params) {
        this.int32(-873829436);
        this.predicate(params.call);
        this.predicate(params.params);
      },
      "phone.leaveGroupCallPresentation": function(params) {
        this.int32(475058500);
        this.predicate(params.call);
      },
      "stickers.checkShortName": function(params) {
        this.int32(676017721);
        this.string(params.short_name);
      },
      "stickers.suggestShortName": function(params) {
        this.int32(1303364867);
        this.string(params.title);
      },
      "bots.resetBotCommands": function(params) {
        this.int32(1032708345);
        this.predicate(params.scope);
        this.string(params.lang_code);
      },
      "bots.getBotCommands": function(params) {
        this.int32(-481554986);
        this.predicate(params.scope);
        this.string(params.lang_code);
      },
      "account.resetPassword": function(params) {
        this.int32(-1828139493);
      },
      "account.declinePasswordReset": function(params) {
        this.int32(1284770294);
      },
      "auth.checkRecoveryPassword": function(params) {
        this.int32(221691769);
        this.string(params.code);
      },
      "account.getChatThemes": function(params) {
        this.int32(-700916087);
        this.long(params.hash);
      },
      "messages.setChatTheme": function(params) {
        this.int32(-432283329);
        this.predicate(params.peer);
        this.string(params.emoticon);
      },
      "channels.viewSponsoredMessage": function(params) {
        this.int32(-1095836780);
        this.predicate(params.channel);
        this.bytes(params.random_id);
      },
      "channels.getSponsoredMessages": function(params) {
        this.int32(-333377601);
        this.predicate(params.channel);
      },
      "messages.getMessageReadParticipants": function(params) {
        this.int32(834782287);
        this.predicate(params.peer);
        this.int(params.msg_id);
      },
      "messages.getSearchResultsCalendar": function(params) {
        this.int32(1240514025);
        this.predicate(params.peer);
        this.predicate(params.filter);
        this.int(params.offset_id);
        this.int(params.offset_date);
      },
      "messages.getSearchResultsPositions": function(params) {
        this.int32(1855292323);
        this.predicate(params.peer);
        this.predicate(params.filter);
        this.int(params.offset_id);
        this.int(params.limit);
      },
      "messages.hideChatJoinRequest": function(params) {
        this.int32(2145904661);
        const flags = this.has(params.approved) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.predicate(params.user_id);
      },
      "messages.hideAllChatJoinRequests": function(params) {
        this.int32(-528091926);
        const flags = this.has(params.approved) << 0 | this.has(params.link) << 1;
        this.int32(flags);
        this.predicate(params.peer);
        this.flag(this.string, params.link);
      },
      "messages.toggleNoForwards": function(params) {
        this.int32(-1323389022);
        this.predicate(params.peer);
        this.Bool(params.enabled);
      },
      "messages.saveDefaultSendAs": function(params) {
        this.int32(-855777386);
        this.predicate(params.peer);
        this.predicate(params.send_as);
      },
      "channels.getSendAs": function(params) {
        this.int32(231174382);
        this.predicate(params.peer);
      },
      "account.setAuthorizationTTL": function(params) {
        this.int32(-1081501024);
        this.int(params.authorization_ttl_days);
      },
      "account.changeAuthorizationSettings": function(params) {
        this.int32(1089766498);
        const flags = this.has(params.encrypted_requests_disabled) << 0 | this.has(params.call_requests_disabled) << 1;
        this.int32(flags);
        this.long(params.hash);
        this.flag(this.Bool, params.encrypted_requests_disabled);
        this.flag(this.Bool, params.call_requests_disabled);
      },
      "channels.deleteParticipantHistory": function(params) {
        this.int32(913655003);
        this.predicate(params.channel);
        this.predicate(params.participant);
      },
      "messages.sendReaction": function(params) {
        this.int32(-754091820);
        const flags = this.has(params.big) << 1 | this.has(params.add_to_recent) << 2 | this.has(params.reaction) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.int(params.msg_id);
        this.flagVector(this.predicate, params.reaction);
      },
      "messages.getMessagesReactions": function(params) {
        this.int32(-1950707482);
        this.predicate(params.peer);
        this.vector(this.int, params.id);
      },
      "messages.getMessageReactionsList": function(params) {
        this.int32(1176190792);
        const flags = this.has(params.reaction) << 0 | this.has(params.offset) << 1;
        this.int32(flags);
        this.predicate(params.peer);
        this.int(params.id);
        this.flag(this.predicate, params.reaction);
        this.flag(this.string, params.offset);
        this.int(params.limit);
      },
      "messages.setChatAvailableReactions": function(params) {
        this.int32(-21928079);
        this.predicate(params.peer);
        this.predicate(params.available_reactions);
      },
      "messages.getAvailableReactions": function(params) {
        this.int32(417243308);
        this.int(params.hash);
      },
      "messages.setDefaultReaction": function(params) {
        this.int32(1330094102);
        this.predicate(params.reaction);
      },
      "messages.translateText": function(params) {
        this.int32(1662529584);
        const flags = this.has(params.peer) << 0 | this.has(params.id) << 0 | this.has(params.text) << 1;
        this.int32(flags);
        this.flag(this.predicate, params.peer);
        this.flagVector(this.int, params.id);
        this.flagVector(this.predicate, params.text);
        this.string(params.to_lang);
      },
      "messages.getUnreadReactions": function(params) {
        this.int32(841173339);
        const flags = this.has(params.top_msg_id) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.flag(this.int, params.top_msg_id);
        this.int(params.offset_id);
        this.int(params.add_offset);
        this.int(params.limit);
        this.int(params.max_id);
        this.int(params.min_id);
      },
      "messages.readReactions": function(params) {
        this.int32(1420459918);
        const flags = this.has(params.top_msg_id) << 0;
        this.int32(flags);
        this.predicate(params.peer);
        this.flag(this.int, params.top_msg_id);
      },
      "contacts.resolvePhone": function(params) {
        this.int32(-1963375804);
        this.string(params.phone);
      },
      "phone.getGroupCallStreamChannels": function(params) {
        this.int32(447879488);
        this.predicate(params.call);
      },
      "phone.getGroupCallStreamRtmpUrl": function(params) {
        this.int32(-558650433);
        this.predicate(params.peer);
        this.Bool(params.revoke);
      },
      "messages.searchSentMedia": function(params) {
        this.int32(276705696);
        this.string(params.q);
        this.predicate(params.filter);
        this.int(params.limit);
      },
      "messages.getAttachMenuBots": function(params) {
        this.int32(385663691);
        this.long(params.hash);
      },
      "messages.getAttachMenuBot": function(params) {
        this.int32(1998676370);
        this.predicate(params.bot);
      },
      "messages.toggleBotInAttachMenu": function(params) {
        this.int32(1777704297);
        const flags = this.has(params.write_allowed) << 0;
        this.int32(flags);
        this.predicate(params.bot);
        this.Bool(params.enabled);
      },
      "messages.requestWebView": function(params) {
        this.int32(395003915);
        const flags = this.has(params.from_bot_menu) << 4 | this.has(params.silent) << 5 | this.has(params.url) << 1 | this.has(params.start_param) << 3 | this.has(params.theme_params) << 2 | this.has(params.reply_to_msg_id) << 0 | this.has(params.top_msg_id) << 9 | this.has(params.send_as) << 13;
        this.int32(flags);
        this.predicate(params.peer);
        this.predicate(params.bot);
        this.flag(this.string, params.url);
        this.flag(this.string, params.start_param);
        this.flag(this.predicate, params.theme_params);
        this.string(params.platform);
        this.flag(this.int, params.reply_to_msg_id);
        this.flag(this.int, params.top_msg_id);
        this.flag(this.predicate, params.send_as);
      },
      "messages.prolongWebView": function(params) {
        this.int32(2146648841);
        const flags = this.has(params.silent) << 5 | this.has(params.reply_to_msg_id) << 0 | this.has(params.top_msg_id) << 9 | this.has(params.send_as) << 13;
        this.int32(flags);
        this.predicate(params.peer);
        this.predicate(params.bot);
        this.long(params.query_id);
        this.flag(this.int, params.reply_to_msg_id);
        this.flag(this.int, params.top_msg_id);
        this.flag(this.predicate, params.send_as);
      },
      "messages.requestSimpleWebView": function(params) {
        this.int32(698084494);
        const flags = this.has(params.from_switch_webview) << 1 | this.has(params.theme_params) << 0;
        this.int32(flags);
        this.predicate(params.bot);
        this.string(params.url);
        this.flag(this.predicate, params.theme_params);
        this.string(params.platform);
      },
      "messages.sendWebViewResultMessage": function(params) {
        this.int32(172168437);
        this.string(params.bot_query_id);
        this.predicate(params.result);
      },
      "messages.sendWebViewData": function(params) {
        this.int32(-603831608);
        this.predicate(params.bot);
        this.long(params.random_id);
        this.string(params.button_text);
        this.string(params.data);
      },
      "bots.setBotMenuButton": function(params) {
        this.int32(1157944655);
        this.predicate(params.user_id);
        this.predicate(params.button);
      },
      "bots.getBotMenuButton": function(params) {
        this.int32(-1671369944);
        this.predicate(params.user_id);
      },
      "account.getSavedRingtones": function(params) {
        this.int32(-510647672);
        this.long(params.hash);
      },
      "account.saveRingtone": function(params) {
        this.int32(1038768899);
        this.predicate(params.id);
        this.Bool(params.unsave);
      },
      "account.uploadRingtone": function(params) {
        this.int32(-2095414366);
        this.predicate(params.file);
        this.string(params.file_name);
        this.string(params.mime_type);
      },
      "bots.setBotBroadcastDefaultAdminRights": function(params) {
        this.int32(2021942497);
        this.predicate(params.admin_rights);
      },
      "bots.setBotGroupDefaultAdminRights": function(params) {
        this.int32(-1839281686);
        this.predicate(params.admin_rights);
      },
      "phone.saveCallLog": function(params) {
        this.int32(1092913030);
        this.predicate(params.peer);
        this.predicate(params.file);
      },
      "channels.toggleJoinToSend": function(params) {
        this.int32(-456419968);
        this.predicate(params.channel);
        this.Bool(params.enabled);
      },
      "channels.toggleJoinRequest": function(params) {
        this.int32(1277789622);
        this.predicate(params.channel);
        this.Bool(params.enabled);
      },
      "payments.exportInvoice": function(params) {
        this.int32(261206117);
        this.predicate(params.invoice_media);
      },
      "messages.transcribeAudio": function(params) {
        this.int32(647928393);
        this.predicate(params.peer);
        this.int(params.msg_id);
      },
      "messages.rateTranscribedAudio": function(params) {
        this.int32(2132608815);
        this.predicate(params.peer);
        this.int(params.msg_id);
        this.long(params.transcription_id);
        this.Bool(params.good);
      },
      "payments.assignAppStoreTransaction": function(params) {
        this.int32(-2131921795);
        this.bytes(params.receipt);
        this.predicate(params.purpose);
      },
      "payments.assignPlayMarketTransaction": function(params) {
        this.int32(-537046829);
        this.predicate(params.receipt);
        this.predicate(params.purpose);
      },
      "payments.canPurchasePremium": function(params) {
        this.int32(-1614700874);
        this.predicate(params.purpose);
      },
      "help.getPremiumPromo": function(params) {
        this.int32(-1206152236);
      },
      "messages.getCustomEmojiDocuments": function(params) {
        this.int32(-643100844);
        this.vector(this.long, params.document_id);
      },
      "messages.getEmojiStickers": function(params) {
        this.int32(-67329649);
        this.long(params.hash);
      },
      "messages.getFeaturedEmojiStickers": function(params) {
        this.int32(248473398);
        this.long(params.hash);
      },
      "account.updateEmojiStatus": function(params) {
        this.int32(-70001045);
        this.predicate(params.emoji_status);
      },
      "account.getDefaultEmojiStatuses": function(params) {
        this.int32(-696962170);
        this.long(params.hash);
      },
      "account.getRecentEmojiStatuses": function(params) {
        this.int32(257392901);
        this.long(params.hash);
      },
      "account.clearRecentEmojiStatuses": function(params) {
        this.int32(404757166);
      },
      "messages.reportReaction": function(params) {
        this.int32(1063567478);
        this.predicate(params.peer);
        this.int(params.id);
        this.predicate(params.reaction_peer);
      },
      "messages.getTopReactions": function(params) {
        this.int32(-1149164102);
        this.int(params.limit);
        this.long(params.hash);
      },
      "messages.getRecentReactions": function(params) {
        this.int32(960896434);
        this.int(params.limit);
        this.long(params.hash);
      },
      "messages.clearRecentReactions": function(params) {
        this.int32(-1644236876);
      },
      "messages.getExtendedMedia": function(params) {
        this.int32(-2064119788);
        this.predicate(params.peer);
        this.vector(this.int, params.id);
      },
      "auth.importWebTokenAuthorization": function(params) {
        this.int32(767062953);
        this.int(params.api_id);
        this.string(params.api_hash);
        this.string(params.web_auth_token);
      },
      "account.reorderUsernames": function(params) {
        this.int32(-279966037);
        this.vector(this.string, params.order);
      },
      "account.toggleUsername": function(params) {
        this.int32(1490465654);
        this.string(params.username);
        this.Bool(params.active);
      },
      "channels.reorderUsernames": function(params) {
        this.int32(-1268978403);
        this.predicate(params.channel);
        this.vector(this.string, params.order);
      },
      "channels.toggleUsername": function(params) {
        this.int32(1358053637);
        this.predicate(params.channel);
        this.string(params.username);
        this.Bool(params.active);
      },
      "channels.deactivateAllUsernames": function(params) {
        this.int32(170155475);
        this.predicate(params.channel);
      },
      "channels.toggleForum": function(params) {
        this.int32(-1540781271);
        this.predicate(params.channel);
        this.Bool(params.enabled);
      },
      "channels.createForumTopic": function(params) {
        this.int32(-200539612);
        const flags = this.has(params.icon_color) << 0 | this.has(params.icon_emoji_id) << 3 | this.has(params.send_as) << 2;
        this.int32(flags);
        this.predicate(params.channel);
        this.string(params.title);
        this.flag(this.int, params.icon_color);
        this.flag(this.long, params.icon_emoji_id);
        this.long(params.random_id);
        this.flag(this.predicate, params.send_as);
      },
      "channels.getForumTopics": function(params) {
        this.int32(233136337);
        const flags = this.has(params.q) << 0;
        this.int32(flags);
        this.predicate(params.channel);
        this.flag(this.string, params.q);
        this.int(params.offset_date);
        this.int(params.offset_id);
        this.int(params.offset_topic);
        this.int(params.limit);
      },
      "channels.getForumTopicsByID": function(params) {
        this.int32(-1333584199);
        this.predicate(params.channel);
        this.vector(this.int, params.topics);
      },
      "channels.editForumTopic": function(params) {
        this.int32(-186670715);
        const flags = this.has(params.title) << 0 | this.has(params.icon_emoji_id) << 1 | this.has(params.closed) << 2 | this.has(params.hidden) << 3;
        this.int32(flags);
        this.predicate(params.channel);
        this.int(params.topic_id);
        this.flag(this.string, params.title);
        this.flag(this.long, params.icon_emoji_id);
        this.flag(this.Bool, params.closed);
        this.flag(this.Bool, params.hidden);
      },
      "channels.updatePinnedForumTopic": function(params) {
        this.int32(1814925350);
        this.predicate(params.channel);
        this.int(params.topic_id);
        this.Bool(params.pinned);
      },
      "channels.deleteTopicHistory": function(params) {
        this.int32(876830509);
        this.predicate(params.channel);
        this.int(params.top_msg_id);
      },
      "channels.reorderPinnedForumTopics": function(params) {
        this.int32(693150095);
        const flags = this.has(params.force) << 0;
        this.int32(flags);
        this.predicate(params.channel);
        this.vector(this.int, params.order);
      },
      "channels.toggleAntiSpam": function(params) {
        this.int32(1760814315);
        this.predicate(params.channel);
        this.Bool(params.enabled);
      },
      "channels.reportAntiSpamFalsePositive": function(params) {
        this.int32(-1471109485);
        this.predicate(params.channel);
        this.int(params.msg_id);
      },
      "messages.setDefaultHistoryTTL": function(params) {
        this.int32(-1632299963);
        this.int(params.period);
      },
      "messages.getDefaultHistoryTTL": function(params) {
        this.int32(1703637384);
      },
      "contacts.exportContactToken": function(params) {
        this.int32(-127582169);
      },
      "contacts.importContactToken": function(params) {
        this.int32(318789512);
        this.string(params.token);
      },
      "photos.uploadContactProfilePhoto": function(params) {
        this.int32(-515093903);
        const flags = this.has(params.suggest) << 3 | this.has(params.save) << 4 | this.has(params.file) << 0 | this.has(params.video) << 1 | this.has(params.video_start_ts) << 2 | this.has(params.video_emoji_markup) << 5;
        this.int32(flags);
        this.predicate(params.user_id);
        this.flag(this.predicate, params.file);
        this.flag(this.predicate, params.video);
        this.flag(this.double, params.video_start_ts);
        this.flag(this.predicate, params.video_emoji_markup);
      },
      "channels.toggleParticipantsHidden": function(params) {
        this.int32(1785624660);
        this.predicate(params.channel);
        this.Bool(params.enabled);
      },
      "messages.sendBotRequestedPeer": function(params) {
        this.int32(-29831141);
        this.predicate(params.peer);
        this.int(params.msg_id);
        this.int(params.button_id);
        this.predicate(params.requested_peer);
      },
      "account.getDefaultProfilePhotoEmojis": function(params) {
        this.int32(-495647960);
        this.long(params.hash);
      },
      "account.getDefaultGroupPhotoEmojis": function(params) {
        this.int32(-1856479058);
        this.long(params.hash);
      },
      "auth.requestFirebaseSms": function(params) {
        this.int32(-1991881904);
        const flags = this.has(params.safety_net_token) << 0 | this.has(params.ios_push_secret) << 1;
        this.int32(flags);
        this.string(params.phone_number);
        this.string(params.phone_code_hash);
        this.flag(this.string, params.safety_net_token);
        this.flag(this.string, params.ios_push_secret);
      },
      "messages.getEmojiGroups": function(params) {
        this.int32(1955122779);
        this.int(params.hash);
      },
      "messages.getEmojiStatusGroups": function(params) {
        this.int32(785209037);
        this.int(params.hash);
      },
      "messages.getEmojiProfilePhotoGroups": function(params) {
        this.int32(564480243);
        this.int(params.hash);
      },
      "messages.searchCustomEmoji": function(params) {
        this.int32(739360983);
        this.string(params.emoticon);
        this.long(params.hash);
      },
      "messages.togglePeerTranslations": function(params) {
        this.int32(-461589127);
        const flags = this.has(params.disabled) << 0;
        this.int32(flags);
        this.predicate(params.peer);
      },
      "account.getAutoSaveSettings": function(params) {
        this.int32(-1379156774);
      },
      "account.saveAutoSaveSettings": function(params) {
        this.int32(-694451359);
        const flags = this.has(params.users) << 0 | this.has(params.chats) << 1 | this.has(params.broadcasts) << 2 | this.has(params.peer) << 3;
        this.int32(flags);
        this.flag(this.predicate, params.peer);
        this.predicate(params.settings);
      },
      "account.deleteAutoSaveExceptions": function(params) {
        this.int32(1404829728);
      },
      "stickers.changeSticker": function(params) {
        this.int32(-179077444);
        const flags = this.has(params.emoji) << 0 | this.has(params.mask_coords) << 1 | this.has(params.keywords) << 2;
        this.int32(flags);
        this.predicate(params.sticker);
        this.flag(this.string, params.emoji);
        this.flag(this.predicate, params.mask_coords);
        this.flag(this.string, params.keywords);
      },
      "stickers.renameStickerSet": function(params) {
        this.int32(306912256);
        this.predicate(params.stickerset);
        this.string(params.title);
      },
      "stickers.deleteStickerSet": function(params) {
        this.int32(-2022685804);
        this.predicate(params.stickerset);
      },
      "messages.getBotApp": function(params) {
        this.int32(889046467);
        this.predicate(params.app);
        this.long(params.hash);
      },
      "messages.requestAppWebView": function(params) {
        this.int32(-1940243652);
        const flags = this.has(params.write_allowed) << 0 | this.has(params.start_param) << 1 | this.has(params.theme_params) << 2;
        this.int32(flags);
        this.predicate(params.peer);
        this.predicate(params.app);
        this.flag(this.string, params.start_param);
        this.flag(this.predicate, params.theme_params);
        this.string(params.platform);
      },
      "bots.setBotInfo": function(params) {
        this.int32(282013987);
        const flags = this.has(params.bot) << 2 | this.has(params.name) << 3 | this.has(params.about) << 0 | this.has(params.description) << 1;
        this.int32(flags);
        this.flag(this.predicate, params.bot);
        this.string(params.lang_code);
        this.flag(this.string, params.name);
        this.flag(this.string, params.about);
        this.flag(this.string, params.description);
      },
      "bots.getBotInfo": function(params) {
        this.int32(-589753091);
        const flags = this.has(params.bot) << 0;
        this.int32(flags);
        this.flag(this.predicate, params.bot);
        this.string(params.lang_code);
      },
      "auth.resetLoginEmail": function(params) {
        this.int32(2123760019);
        this.string(params.phone_number);
        this.string(params.phone_code_hash);
      },
      "chatlists.exportChatlistInvite": function(params) {
        this.int32(-2072885362);
        this.predicate(params.chatlist);
        this.string(params.title);
        this.vector(this.predicate, params.peers);
      },
      "chatlists.deleteExportedInvite": function(params) {
        this.int32(1906072670);
        this.predicate(params.chatlist);
        this.string(params.slug);
      },
      "chatlists.editExportedInvite": function(params) {
        this.int32(1698543165);
        const flags = this.has(params.title) << 1 | this.has(params.peers) << 2;
        this.int32(flags);
        this.predicate(params.chatlist);
        this.string(params.slug);
        this.flag(this.string, params.title);
        this.flagVector(this.predicate, params.peers);
      },
      "chatlists.getExportedInvites": function(params) {
        this.int32(-838608253);
        this.predicate(params.chatlist);
      },
      "chatlists.checkChatlistInvite": function(params) {
        this.int32(1103171583);
        this.string(params.slug);
      },
      "chatlists.joinChatlistInvite": function(params) {
        this.int32(-1498291302);
        this.string(params.slug);
        this.vector(this.predicate, params.peers);
      },
      "chatlists.getChatlistUpdates": function(params) {
        this.int32(-1992190687);
        this.predicate(params.chatlist);
      },
      "chatlists.joinChatlistUpdates": function(params) {
        this.int32(-527828747);
        this.predicate(params.chatlist);
        this.vector(this.predicate, params.peers);
      },
      "chatlists.hideChatlistUpdates": function(params) {
        this.int32(1726252795);
        this.predicate(params.chatlist);
      },
      "chatlists.getLeaveChatlistSuggestions": function(params) {
        this.int32(-37955820);
        this.predicate(params.chatlist);
      },
      "chatlists.leaveChatlist": function(params) {
        this.int32(1962598714);
        this.predicate(params.chatlist);
        this.vector(this.predicate, params.peers);
      },
      "bots.reorderUsernames": function(params) {
        this.int32(-1760972350);
        this.predicate(params.bot);
        this.vector(this.string, params.order);
      },
      "bots.toggleUsername": function(params) {
        this.int32(87861619);
        this.predicate(params.bot);
        this.string(params.username);
        this.Bool(params.active);
      },
      "messages.setChatWallPaper": function(params) {
        this.int32(-1879389471);
        const flags = this.has(params.wallpaper) << 0 | this.has(params.settings) << 2 | this.has(params.id) << 1;
        this.int32(flags);
        this.predicate(params.peer);
        this.flag(this.predicate, params.wallpaper);
        this.flag(this.predicate, params.settings);
        this.flag(this.int, params.id);
      }
    };
    module.exports = builderMap;
  }
});

// node_modules/@mtproto/core/src/tl/counter/index.js
var require_counter = __commonJS({
  "node_modules/@mtproto/core/src/tl/counter/index.js"(exports, module) {
    var builderMap = require_builder();
    var Counter = class {
      constructor(fn, params) {
        this.count = 0;
        fn.call(this, params);
      }
      uint32() {
        this.count += 4;
      }
      int32() {
        this.count += 4;
      }
      long() {
        this.count += 8;
      }
      int128() {
        this.count += 16;
      }
      int256() {
        this.count += 32;
      }
      double() {
        this.count += 8;
      }
      bytes(bytes) {
        const { length } = bytes;
        if (length <= 253) {
          this.count += 1;
        } else {
          this.count += 4;
        }
        this.count += length;
        while (this.count % 4 !== 0) {
          this.count += 1;
        }
      }
      bytesRaw(bytes) {
        this.count += bytes.length;
      }
      string(value) {
        const encoder = new TextEncoder();
        const bytes = encoder.encode(value);
        this.bytes(bytes);
      }
      int() {
        this.int32();
      }
      // TODO: Convert method name to 'bool'
      Bool(value) {
        this.count += 4;
      }
      has(value) {
        return +!!(Array.isArray(value) ? value.length : value);
      }
      flag(fn, value) {
        if (this.has(value)) {
          fn.call(this, value);
        }
      }
      flagVector(fn, value) {
        if (value === void 0 || value.length === 0) {
          return;
        }
        this.vector(fn, value);
      }
      vector(fn, value) {
        this.count += 8;
        for (let i = 0; i < value.length; i++) {
          fn.call(this, value[i]);
        }
      }
      predicate(params, bare = false) {
        const fn = builderMap[params._];
        fn.call(this, params);
      }
    };
    module.exports = Counter;
  }
});

// node_modules/@mtproto/core/src/tl/serializer/index.js
var require_serializer = __commonJS({
  "node_modules/@mtproto/core/src/tl/serializer/index.js"(exports, module) {
    var bigInt = require_BigInteger();
    var Counter = require_counter();
    var builderMap = require_builder();
    var Serializer = class {
      constructor(fn, params) {
        const counter = new Counter(fn, params);
        this.buffer = new ArrayBuffer(counter.count);
        this.dataView = new DataView(this.buffer);
        this.byteView = new Uint8Array(this.buffer);
        this.offset = 0;
        fn.call(this, params);
      }
      uint32(value) {
        this.dataView.setUint32(this.offset, value, true);
        this.offset += 4;
      }
      int32(value) {
        this.dataView.setInt32(this.offset, value, true);
        this.offset += 4;
      }
      long(value) {
        if (Array.isArray(value)) {
          if (value.length === 2) {
            const [low, high] = value;
            this.uint32(high);
            this.uint32(low);
          } else {
            this.bytesRaw(value);
          }
          return;
        }
        const { quotient, remainder } = bigInt(value).divmod(bigInt(4294967296));
        this.uint32(remainder.toJSNumber());
        this.uint32(quotient.toJSNumber());
      }
      int128(array) {
        this.byteView.set(array, this.offset);
        this.offset += 16;
      }
      int256(array) {
        this.byteView.set(array, this.offset);
        this.offset += 32;
      }
      double(value) {
        this.dataView.setFloat64(this.offset, value, true);
        this.offset += 8;
      }
      bytes(bytes) {
        const { length } = bytes;
        if (length <= 253) {
          this.byteView[this.offset++] = length;
        } else {
          this.byteView[this.offset++] = 254;
          this.byteView[this.offset++] = length & 255;
          this.byteView[this.offset++] = (length & 65280) >> 8;
          this.byteView[this.offset++] = (length & 16711680) >> 16;
        }
        this.byteView.set(bytes, this.offset);
        this.offset += length;
        while (this.offset % 4 !== 0) {
          this.byteView[this.offset++] = 0;
        }
      }
      bytesRaw(bytes) {
        this.byteView.set(bytes, this.offset);
        this.offset += bytes.length;
      }
      string(value) {
        const encoder = new TextEncoder();
        const bytes = encoder.encode(value);
        this.bytes(bytes);
      }
      int(value) {
        this.int32(value);
      }
      // TODO: Convert method name to 'bool'
      Bool(value) {
        this.predicate({ _: value ? "boolTrue" : "boolFalse" });
      }
      has(value) {
        return +!!(Array.isArray(value) ? value.length : value);
      }
      flag(fn, value) {
        if (this.has(value)) {
          fn.call(this, value);
        }
      }
      flagVector(fn, value) {
        if (value === void 0 || value.length === 0) {
          return;
        }
        this.vector(fn, value);
      }
      vector(fn, value) {
        this.int32(481674261);
        this.int32(value.length);
        for (let i = 0; i < value.length; i++) {
          fn.call(this, value[i]);
        }
      }
      predicate(params, bare = false) {
        const fn = builderMap[params._];
        fn.call(this, params);
      }
      getBytes() {
        return this.byteView;
      }
      getBuffer() {
        return this.buffer;
      }
    };
    module.exports = Serializer;
  }
});

// node_modules/pako/lib/zlib/trees.js
var require_trees = __commonJS({
  "node_modules/pako/lib/zlib/trees.js"(exports, module) {
    "use strict";
    var Z_FIXED = 4;
    var Z_BINARY = 0;
    var Z_TEXT = 1;
    var Z_UNKNOWN = 2;
    function zero2(buf) {
      let len = buf.length;
      while (--len >= 0) {
        buf[len] = 0;
      }
    }
    var STORED_BLOCK = 0;
    var STATIC_TREES = 1;
    var DYN_TREES = 2;
    var MIN_MATCH = 3;
    var MAX_MATCH = 258;
    var LENGTH_CODES = 29;
    var LITERALS = 256;
    var L_CODES = LITERALS + 1 + LENGTH_CODES;
    var D_CODES = 30;
    var BL_CODES = 19;
    var HEAP_SIZE = 2 * L_CODES + 1;
    var MAX_BITS = 15;
    var Buf_size = 16;
    var MAX_BL_BITS = 7;
    var END_BLOCK = 256;
    var REP_3_6 = 16;
    var REPZ_3_10 = 17;
    var REPZ_11_138 = 18;
    var extra_lbits = (
      /* extra bits for each length code */
      new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0])
    );
    var extra_dbits = (
      /* extra bits for each distance code */
      new Uint8Array([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13])
    );
    var extra_blbits = (
      /* extra bits for each bit length code */
      new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7])
    );
    var bl_order = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
    var DIST_CODE_LEN = 512;
    var static_ltree = new Array((L_CODES + 2) * 2);
    zero2(static_ltree);
    var static_dtree = new Array(D_CODES * 2);
    zero2(static_dtree);
    var _dist_code = new Array(DIST_CODE_LEN);
    zero2(_dist_code);
    var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
    zero2(_length_code);
    var base_length = new Array(LENGTH_CODES);
    zero2(base_length);
    var base_dist = new Array(D_CODES);
    zero2(base_dist);
    function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
      this.static_tree = static_tree;
      this.extra_bits = extra_bits;
      this.extra_base = extra_base;
      this.elems = elems;
      this.max_length = max_length;
      this.has_stree = static_tree && static_tree.length;
    }
    var static_l_desc;
    var static_d_desc;
    var static_bl_desc;
    function TreeDesc(dyn_tree, stat_desc) {
      this.dyn_tree = dyn_tree;
      this.max_code = 0;
      this.stat_desc = stat_desc;
    }
    var d_code = (dist) => {
      return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
    };
    var put_short = (s, w) => {
      s.pending_buf[s.pending++] = w & 255;
      s.pending_buf[s.pending++] = w >>> 8 & 255;
    };
    var send_bits = (s, value, length) => {
      if (s.bi_valid > Buf_size - length) {
        s.bi_buf |= value << s.bi_valid & 65535;
        put_short(s, s.bi_buf);
        s.bi_buf = value >> Buf_size - s.bi_valid;
        s.bi_valid += length - Buf_size;
      } else {
        s.bi_buf |= value << s.bi_valid & 65535;
        s.bi_valid += length;
      }
    };
    var send_code = (s, c, tree) => {
      send_bits(
        s,
        tree[c * 2],
        tree[c * 2 + 1]
        /*.Len*/
      );
    };
    var bi_reverse = (code, len) => {
      let res = 0;
      do {
        res |= code & 1;
        code >>>= 1;
        res <<= 1;
      } while (--len > 0);
      return res >>> 1;
    };
    var bi_flush = (s) => {
      if (s.bi_valid === 16) {
        put_short(s, s.bi_buf);
        s.bi_buf = 0;
        s.bi_valid = 0;
      } else if (s.bi_valid >= 8) {
        s.pending_buf[s.pending++] = s.bi_buf & 255;
        s.bi_buf >>= 8;
        s.bi_valid -= 8;
      }
    };
    var gen_bitlen = (s, desc) => {
      const tree = desc.dyn_tree;
      const max_code = desc.max_code;
      const stree = desc.stat_desc.static_tree;
      const has_stree = desc.stat_desc.has_stree;
      const extra = desc.stat_desc.extra_bits;
      const base = desc.stat_desc.extra_base;
      const max_length = desc.stat_desc.max_length;
      let h;
      let n, m;
      let bits;
      let xbits;
      let f;
      let overflow = 0;
      for (bits = 0; bits <= MAX_BITS; bits++) {
        s.bl_count[bits] = 0;
      }
      tree[s.heap[s.heap_max] * 2 + 1] = 0;
      for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
        n = s.heap[h];
        bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
        if (bits > max_length) {
          bits = max_length;
          overflow++;
        }
        tree[n * 2 + 1] = bits;
        if (n > max_code) {
          continue;
        }
        s.bl_count[bits]++;
        xbits = 0;
        if (n >= base) {
          xbits = extra[n - base];
        }
        f = tree[n * 2];
        s.opt_len += f * (bits + xbits);
        if (has_stree) {
          s.static_len += f * (stree[n * 2 + 1] + xbits);
        }
      }
      if (overflow === 0) {
        return;
      }
      do {
        bits = max_length - 1;
        while (s.bl_count[bits] === 0) {
          bits--;
        }
        s.bl_count[bits]--;
        s.bl_count[bits + 1] += 2;
        s.bl_count[max_length]--;
        overflow -= 2;
      } while (overflow > 0);
      for (bits = max_length; bits !== 0; bits--) {
        n = s.bl_count[bits];
        while (n !== 0) {
          m = s.heap[--h];
          if (m > max_code) {
            continue;
          }
          if (tree[m * 2 + 1] !== bits) {
            s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
            tree[m * 2 + 1] = bits;
          }
          n--;
        }
      }
    };
    var gen_codes = (tree, max_code, bl_count) => {
      const next_code = new Array(MAX_BITS + 1);
      let code = 0;
      let bits;
      let n;
      for (bits = 1; bits <= MAX_BITS; bits++) {
        code = code + bl_count[bits - 1] << 1;
        next_code[bits] = code;
      }
      for (n = 0; n <= max_code; n++) {
        let len = tree[n * 2 + 1];
        if (len === 0) {
          continue;
        }
        tree[n * 2] = bi_reverse(next_code[len]++, len);
      }
    };
    var tr_static_init = () => {
      let n;
      let bits;
      let length;
      let code;
      let dist;
      const bl_count = new Array(MAX_BITS + 1);
      length = 0;
      for (code = 0; code < LENGTH_CODES - 1; code++) {
        base_length[code] = length;
        for (n = 0; n < 1 << extra_lbits[code]; n++) {
          _length_code[length++] = code;
        }
      }
      _length_code[length - 1] = code;
      dist = 0;
      for (code = 0; code < 16; code++) {
        base_dist[code] = dist;
        for (n = 0; n < 1 << extra_dbits[code]; n++) {
          _dist_code[dist++] = code;
        }
      }
      dist >>= 7;
      for (; code < D_CODES; code++) {
        base_dist[code] = dist << 7;
        for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
          _dist_code[256 + dist++] = code;
        }
      }
      for (bits = 0; bits <= MAX_BITS; bits++) {
        bl_count[bits] = 0;
      }
      n = 0;
      while (n <= 143) {
        static_ltree[n * 2 + 1] = 8;
        n++;
        bl_count[8]++;
      }
      while (n <= 255) {
        static_ltree[n * 2 + 1] = 9;
        n++;
        bl_count[9]++;
      }
      while (n <= 279) {
        static_ltree[n * 2 + 1] = 7;
        n++;
        bl_count[7]++;
      }
      while (n <= 287) {
        static_ltree[n * 2 + 1] = 8;
        n++;
        bl_count[8]++;
      }
      gen_codes(static_ltree, L_CODES + 1, bl_count);
      for (n = 0; n < D_CODES; n++) {
        static_dtree[n * 2 + 1] = 5;
        static_dtree[n * 2] = bi_reverse(n, 5);
      }
      static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
      static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
      static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);
    };
    var init_block = (s) => {
      let n;
      for (n = 0; n < L_CODES; n++) {
        s.dyn_ltree[n * 2] = 0;
      }
      for (n = 0; n < D_CODES; n++) {
        s.dyn_dtree[n * 2] = 0;
      }
      for (n = 0; n < BL_CODES; n++) {
        s.bl_tree[n * 2] = 0;
      }
      s.dyn_ltree[END_BLOCK * 2] = 1;
      s.opt_len = s.static_len = 0;
      s.sym_next = s.matches = 0;
    };
    var bi_windup = (s) => {
      if (s.bi_valid > 8) {
        put_short(s, s.bi_buf);
      } else if (s.bi_valid > 0) {
        s.pending_buf[s.pending++] = s.bi_buf;
      }
      s.bi_buf = 0;
      s.bi_valid = 0;
    };
    var smaller = (tree, n, m, depth) => {
      const _n2 = n * 2;
      const _m2 = m * 2;
      return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];
    };
    var pqdownheap = (s, tree, k2) => {
      const v = s.heap[k2];
      let j = k2 << 1;
      while (j <= s.heap_len) {
        if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
          j++;
        }
        if (smaller(tree, v, s.heap[j], s.depth)) {
          break;
        }
        s.heap[k2] = s.heap[j];
        k2 = j;
        j <<= 1;
      }
      s.heap[k2] = v;
    };
    var compress_block = (s, ltree, dtree) => {
      let dist;
      let lc;
      let sx = 0;
      let code;
      let extra;
      if (s.sym_next !== 0) {
        do {
          dist = s.pending_buf[s.sym_buf + sx++] & 255;
          dist += (s.pending_buf[s.sym_buf + sx++] & 255) << 8;
          lc = s.pending_buf[s.sym_buf + sx++];
          if (dist === 0) {
            send_code(s, lc, ltree);
          } else {
            code = _length_code[lc];
            send_code(s, code + LITERALS + 1, ltree);
            extra = extra_lbits[code];
            if (extra !== 0) {
              lc -= base_length[code];
              send_bits(s, lc, extra);
            }
            dist--;
            code = d_code(dist);
            send_code(s, code, dtree);
            extra = extra_dbits[code];
            if (extra !== 0) {
              dist -= base_dist[code];
              send_bits(s, dist, extra);
            }
          }
        } while (sx < s.sym_next);
      }
      send_code(s, END_BLOCK, ltree);
    };
    var build_tree = (s, desc) => {
      const tree = desc.dyn_tree;
      const stree = desc.stat_desc.static_tree;
      const has_stree = desc.stat_desc.has_stree;
      const elems = desc.stat_desc.elems;
      let n, m;
      let max_code = -1;
      let node;
      s.heap_len = 0;
      s.heap_max = HEAP_SIZE;
      for (n = 0; n < elems; n++) {
        if (tree[n * 2] !== 0) {
          s.heap[++s.heap_len] = max_code = n;
          s.depth[n] = 0;
        } else {
          tree[n * 2 + 1] = 0;
        }
      }
      while (s.heap_len < 2) {
        node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
        tree[node * 2] = 1;
        s.depth[node] = 0;
        s.opt_len--;
        if (has_stree) {
          s.static_len -= stree[node * 2 + 1];
        }
      }
      desc.max_code = max_code;
      for (n = s.heap_len >> 1; n >= 1; n--) {
        pqdownheap(s, tree, n);
      }
      node = elems;
      do {
        n = s.heap[
          1
          /*SMALLEST*/
        ];
        s.heap[
          1
          /*SMALLEST*/
        ] = s.heap[s.heap_len--];
        pqdownheap(
          s,
          tree,
          1
          /*SMALLEST*/
        );
        m = s.heap[
          1
          /*SMALLEST*/
        ];
        s.heap[--s.heap_max] = n;
        s.heap[--s.heap_max] = m;
        tree[node * 2] = tree[n * 2] + tree[m * 2];
        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
        tree[n * 2 + 1] = tree[m * 2 + 1] = node;
        s.heap[
          1
          /*SMALLEST*/
        ] = node++;
        pqdownheap(
          s,
          tree,
          1
          /*SMALLEST*/
        );
      } while (s.heap_len >= 2);
      s.heap[--s.heap_max] = s.heap[
        1
        /*SMALLEST*/
      ];
      gen_bitlen(s, desc);
      gen_codes(tree, max_code, s.bl_count);
    };
    var scan_tree = (s, tree, max_code) => {
      let n;
      let prevlen = -1;
      let curlen;
      let nextlen = tree[0 * 2 + 1];
      let count = 0;
      let max_count = 7;
      let min_count = 4;
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }
      tree[(max_code + 1) * 2 + 1] = 65535;
      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1];
        if (++count < max_count && curlen === nextlen) {
          continue;
        } else if (count < min_count) {
          s.bl_tree[curlen * 2] += count;
        } else if (curlen !== 0) {
          if (curlen !== prevlen) {
            s.bl_tree[curlen * 2]++;
          }
          s.bl_tree[REP_3_6 * 2]++;
        } else if (count <= 10) {
          s.bl_tree[REPZ_3_10 * 2]++;
        } else {
          s.bl_tree[REPZ_11_138 * 2]++;
        }
        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;
        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;
        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    };
    var send_tree = (s, tree, max_code) => {
      let n;
      let prevlen = -1;
      let curlen;
      let nextlen = tree[0 * 2 + 1];
      let count = 0;
      let max_count = 7;
      let min_count = 4;
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }
      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1];
        if (++count < max_count && curlen === nextlen) {
          continue;
        } else if (count < min_count) {
          do {
            send_code(s, curlen, s.bl_tree);
          } while (--count !== 0);
        } else if (curlen !== 0) {
          if (curlen !== prevlen) {
            send_code(s, curlen, s.bl_tree);
            count--;
          }
          send_code(s, REP_3_6, s.bl_tree);
          send_bits(s, count - 3, 2);
        } else if (count <= 10) {
          send_code(s, REPZ_3_10, s.bl_tree);
          send_bits(s, count - 3, 3);
        } else {
          send_code(s, REPZ_11_138, s.bl_tree);
          send_bits(s, count - 11, 7);
        }
        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;
        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;
        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    };
    var build_bl_tree = (s) => {
      let max_blindex;
      scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
      scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
      build_tree(s, s.bl_desc);
      for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
        if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {
          break;
        }
      }
      s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
      return max_blindex;
    };
    var send_all_trees = (s, lcodes, dcodes, blcodes) => {
      let rank;
      send_bits(s, lcodes - 257, 5);
      send_bits(s, dcodes - 1, 5);
      send_bits(s, blcodes - 4, 4);
      for (rank = 0; rank < blcodes; rank++) {
        send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1], 3);
      }
      send_tree(s, s.dyn_ltree, lcodes - 1);
      send_tree(s, s.dyn_dtree, dcodes - 1);
    };
    var detect_data_type = (s) => {
      let block_mask = 4093624447;
      let n;
      for (n = 0; n <= 31; n++, block_mask >>>= 1) {
        if (block_mask & 1 && s.dyn_ltree[n * 2] !== 0) {
          return Z_BINARY;
        }
      }
      if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 || s.dyn_ltree[13 * 2] !== 0) {
        return Z_TEXT;
      }
      for (n = 32; n < LITERALS; n++) {
        if (s.dyn_ltree[n * 2] !== 0) {
          return Z_TEXT;
        }
      }
      return Z_BINARY;
    };
    var static_init_done = false;
    var _tr_init = (s) => {
      if (!static_init_done) {
        tr_static_init();
        static_init_done = true;
      }
      s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
      s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
      s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
      s.bi_buf = 0;
      s.bi_valid = 0;
      init_block(s);
    };
    var _tr_stored_block = (s, buf, stored_len, last) => {
      send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
      bi_windup(s);
      put_short(s, stored_len);
      put_short(s, ~stored_len);
      if (stored_len) {
        s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);
      }
      s.pending += stored_len;
    };
    var _tr_align = (s) => {
      send_bits(s, STATIC_TREES << 1, 3);
      send_code(s, END_BLOCK, static_ltree);
      bi_flush(s);
    };
    var _tr_flush_block = (s, buf, stored_len, last) => {
      let opt_lenb, static_lenb;
      let max_blindex = 0;
      if (s.level > 0) {
        if (s.strm.data_type === Z_UNKNOWN) {
          s.strm.data_type = detect_data_type(s);
        }
        build_tree(s, s.l_desc);
        build_tree(s, s.d_desc);
        max_blindex = build_bl_tree(s);
        opt_lenb = s.opt_len + 3 + 7 >>> 3;
        static_lenb = s.static_len + 3 + 7 >>> 3;
        if (static_lenb <= opt_lenb) {
          opt_lenb = static_lenb;
        }
      } else {
        opt_lenb = static_lenb = stored_len + 5;
      }
      if (stored_len + 4 <= opt_lenb && buf !== -1) {
        _tr_stored_block(s, buf, stored_len, last);
      } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
        send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
        compress_block(s, static_ltree, static_dtree);
      } else {
        send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
        send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
        compress_block(s, s.dyn_ltree, s.dyn_dtree);
      }
      init_block(s);
      if (last) {
        bi_windup(s);
      }
    };
    var _tr_tally = (s, dist, lc) => {
      s.pending_buf[s.sym_buf + s.sym_next++] = dist;
      s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;
      s.pending_buf[s.sym_buf + s.sym_next++] = lc;
      if (dist === 0) {
        s.dyn_ltree[lc * 2]++;
      } else {
        s.matches++;
        dist--;
        s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]++;
        s.dyn_dtree[d_code(dist) * 2]++;
      }
      return s.sym_next === s.sym_end;
    };
    module.exports._tr_init = _tr_init;
    module.exports._tr_stored_block = _tr_stored_block;
    module.exports._tr_flush_block = _tr_flush_block;
    module.exports._tr_tally = _tr_tally;
    module.exports._tr_align = _tr_align;
  }
});

// node_modules/pako/lib/zlib/adler32.js
var require_adler32 = __commonJS({
  "node_modules/pako/lib/zlib/adler32.js"(exports, module) {
    "use strict";
    var adler32 = (adler, buf, len, pos) => {
      let s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n = 0;
      while (len !== 0) {
        n = len > 2e3 ? 2e3 : len;
        len -= n;
        do {
          s1 = s1 + buf[pos++] | 0;
          s2 = s2 + s1 | 0;
        } while (--n);
        s1 %= 65521;
        s2 %= 65521;
      }
      return s1 | s2 << 16 | 0;
    };
    module.exports = adler32;
  }
});

// node_modules/pako/lib/zlib/crc32.js
var require_crc32 = __commonJS({
  "node_modules/pako/lib/zlib/crc32.js"(exports, module) {
    "use strict";
    var makeTable = () => {
      let c, table = [];
      for (var n = 0; n < 256; n++) {
        c = n;
        for (var k2 = 0; k2 < 8; k2++) {
          c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
        }
        table[n] = c;
      }
      return table;
    };
    var crcTable = new Uint32Array(makeTable());
    var crc32 = (crc, buf, len, pos) => {
      const t2 = crcTable;
      const end = pos + len;
      crc ^= -1;
      for (let i = pos; i < end; i++) {
        crc = crc >>> 8 ^ t2[(crc ^ buf[i]) & 255];
      }
      return crc ^ -1;
    };
    module.exports = crc32;
  }
});

// node_modules/pako/lib/zlib/messages.js
var require_messages = __commonJS({
  "node_modules/pako/lib/zlib/messages.js"(exports, module) {
    "use strict";
    module.exports = {
      2: "need dictionary",
      /* Z_NEED_DICT       2  */
      1: "stream end",
      /* Z_STREAM_END      1  */
      0: "",
      /* Z_OK              0  */
      "-1": "file error",
      /* Z_ERRNO         (-1) */
      "-2": "stream error",
      /* Z_STREAM_ERROR  (-2) */
      "-3": "data error",
      /* Z_DATA_ERROR    (-3) */
      "-4": "insufficient memory",
      /* Z_MEM_ERROR     (-4) */
      "-5": "buffer error",
      /* Z_BUF_ERROR     (-5) */
      "-6": "incompatible version"
      /* Z_VERSION_ERROR (-6) */
    };
  }
});

// node_modules/pako/lib/zlib/constants.js
var require_constants = __commonJS({
  "node_modules/pako/lib/zlib/constants.js"(exports, module) {
    "use strict";
    module.exports = {
      /* Allowed flush values; see deflate() and inflate() below for details */
      Z_NO_FLUSH: 0,
      Z_PARTIAL_FLUSH: 1,
      Z_SYNC_FLUSH: 2,
      Z_FULL_FLUSH: 3,
      Z_FINISH: 4,
      Z_BLOCK: 5,
      Z_TREES: 6,
      /* Return codes for the compression/decompression functions. Negative values
      * are errors, positive values are used for special but normal events.
      */
      Z_OK: 0,
      Z_STREAM_END: 1,
      Z_NEED_DICT: 2,
      Z_ERRNO: -1,
      Z_STREAM_ERROR: -2,
      Z_DATA_ERROR: -3,
      Z_MEM_ERROR: -4,
      Z_BUF_ERROR: -5,
      //Z_VERSION_ERROR: -6,
      /* compression levels */
      Z_NO_COMPRESSION: 0,
      Z_BEST_SPEED: 1,
      Z_BEST_COMPRESSION: 9,
      Z_DEFAULT_COMPRESSION: -1,
      Z_FILTERED: 1,
      Z_HUFFMAN_ONLY: 2,
      Z_RLE: 3,
      Z_FIXED: 4,
      Z_DEFAULT_STRATEGY: 0,
      /* Possible values of the data_type field (though see inflate()) */
      Z_BINARY: 0,
      Z_TEXT: 1,
      //Z_ASCII:                1, // = Z_TEXT (deprecated)
      Z_UNKNOWN: 2,
      /* The deflate compression method */
      Z_DEFLATED: 8
      //Z_NULL:                 null // Use -1 or null inline, depending on var type
    };
  }
});

// node_modules/pako/lib/zlib/deflate.js
var require_deflate = __commonJS({
  "node_modules/pako/lib/zlib/deflate.js"(exports, module) {
    "use strict";
    var { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = require_trees();
    var adler32 = require_adler32();
    var crc32 = require_crc32();
    var msg = require_messages();
    var {
      Z_NO_FLUSH,
      Z_PARTIAL_FLUSH,
      Z_FULL_FLUSH,
      Z_FINISH,
      Z_BLOCK,
      Z_OK,
      Z_STREAM_END,
      Z_STREAM_ERROR,
      Z_DATA_ERROR,
      Z_BUF_ERROR,
      Z_DEFAULT_COMPRESSION,
      Z_FILTERED,
      Z_HUFFMAN_ONLY,
      Z_RLE,
      Z_FIXED,
      Z_DEFAULT_STRATEGY,
      Z_UNKNOWN,
      Z_DEFLATED
    } = require_constants();
    var MAX_MEM_LEVEL = 9;
    var MAX_WBITS = 15;
    var DEF_MEM_LEVEL = 8;
    var LENGTH_CODES = 29;
    var LITERALS = 256;
    var L_CODES = LITERALS + 1 + LENGTH_CODES;
    var D_CODES = 30;
    var BL_CODES = 19;
    var HEAP_SIZE = 2 * L_CODES + 1;
    var MAX_BITS = 15;
    var MIN_MATCH = 3;
    var MAX_MATCH = 258;
    var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
    var PRESET_DICT = 32;
    var INIT_STATE = 42;
    var GZIP_STATE = 57;
    var EXTRA_STATE = 69;
    var NAME_STATE = 73;
    var COMMENT_STATE = 91;
    var HCRC_STATE = 103;
    var BUSY_STATE = 113;
    var FINISH_STATE = 666;
    var BS_NEED_MORE = 1;
    var BS_BLOCK_DONE = 2;
    var BS_FINISH_STARTED = 3;
    var BS_FINISH_DONE = 4;
    var OS_CODE = 3;
    var err = (strm, errorCode) => {
      strm.msg = msg[errorCode];
      return errorCode;
    };
    var rank = (f) => {
      return f * 2 - (f > 4 ? 9 : 0);
    };
    var zero2 = (buf) => {
      let len = buf.length;
      while (--len >= 0) {
        buf[len] = 0;
      }
    };
    var slide_hash = (s) => {
      let n, m;
      let p;
      let wsize = s.w_size;
      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = m >= wsize ? m - wsize : 0;
      } while (--n);
      n = wsize;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = m >= wsize ? m - wsize : 0;
      } while (--n);
    };
    var HASH_ZLIB = (s, prev, data) => (prev << s.hash_shift ^ data) & s.hash_mask;
    var HASH = HASH_ZLIB;
    var flush_pending = (strm) => {
      const s = strm.state;
      let len = s.pending;
      if (len > strm.avail_out) {
        len = strm.avail_out;
      }
      if (len === 0) {
        return;
      }
      strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
      strm.next_out += len;
      s.pending_out += len;
      strm.total_out += len;
      strm.avail_out -= len;
      s.pending -= len;
      if (s.pending === 0) {
        s.pending_out = 0;
      }
    };
    var flush_block_only = (s, last) => {
      _tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
      s.block_start = s.strstart;
      flush_pending(s.strm);
    };
    var put_byte = (s, b) => {
      s.pending_buf[s.pending++] = b;
    };
    var putShortMSB = (s, b) => {
      s.pending_buf[s.pending++] = b >>> 8 & 255;
      s.pending_buf[s.pending++] = b & 255;
    };
    var read_buf = (strm, buf, start, size) => {
      let len = strm.avail_in;
      if (len > size) {
        len = size;
      }
      if (len === 0) {
        return 0;
      }
      strm.avail_in -= len;
      buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
      if (strm.state.wrap === 1) {
        strm.adler = adler32(strm.adler, buf, len, start);
      } else if (strm.state.wrap === 2) {
        strm.adler = crc32(strm.adler, buf, len, start);
      }
      strm.next_in += len;
      strm.total_in += len;
      return len;
    };
    var longest_match = (s, cur_match) => {
      let chain_length = s.max_chain_length;
      let scan = s.strstart;
      let match;
      let len;
      let best_len = s.prev_length;
      let nice_match = s.nice_match;
      const limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0;
      const _win = s.window;
      const wmask = s.w_mask;
      const prev = s.prev;
      const strend = s.strstart + MAX_MATCH;
      let scan_end1 = _win[scan + best_len - 1];
      let scan_end = _win[scan + best_len];
      if (s.prev_length >= s.good_match) {
        chain_length >>= 2;
      }
      if (nice_match > s.lookahead) {
        nice_match = s.lookahead;
      }
      do {
        match = cur_match;
        if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
          continue;
        }
        scan += 2;
        match++;
        do {
        } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
        len = MAX_MATCH - (strend - scan);
        scan = strend - MAX_MATCH;
        if (len > best_len) {
          s.match_start = cur_match;
          best_len = len;
          if (len >= nice_match) {
            break;
          }
          scan_end1 = _win[scan + best_len - 1];
          scan_end = _win[scan + best_len];
        }
      } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
      if (best_len <= s.lookahead) {
        return best_len;
      }
      return s.lookahead;
    };
    var fill_window = (s) => {
      const _w_size = s.w_size;
      let n, more, str;
      do {
        more = s.window_size - s.lookahead - s.strstart;
        if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
          s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);
          s.match_start -= _w_size;
          s.strstart -= _w_size;
          s.block_start -= _w_size;
          if (s.insert > s.strstart) {
            s.insert = s.strstart;
          }
          slide_hash(s);
          more += _w_size;
        }
        if (s.strm.avail_in === 0) {
          break;
        }
        n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
        s.lookahead += n;
        if (s.lookahead + s.insert >= MIN_MATCH) {
          str = s.strstart - s.insert;
          s.ins_h = s.window[str];
          s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
          while (s.insert) {
            s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);
            s.prev[str & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = str;
            str++;
            s.insert--;
            if (s.lookahead + s.insert < MIN_MATCH) {
              break;
            }
          }
        }
      } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
    };
    var deflate_stored = (s, flush) => {
      let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;
      let len, left, have, last = 0;
      let used = s.strm.avail_in;
      do {
        len = 65535;
        have = s.bi_valid + 42 >> 3;
        if (s.strm.avail_out < have) {
          break;
        }
        have = s.strm.avail_out - have;
        left = s.strstart - s.block_start;
        if (len > left + s.strm.avail_in) {
          len = left + s.strm.avail_in;
        }
        if (len > have) {
          len = have;
        }
        if (len < min_block && (len === 0 && flush !== Z_FINISH || flush === Z_NO_FLUSH || len !== left + s.strm.avail_in)) {
          break;
        }
        last = flush === Z_FINISH && len === left + s.strm.avail_in ? 1 : 0;
        _tr_stored_block(s, 0, 0, last);
        s.pending_buf[s.pending - 4] = len;
        s.pending_buf[s.pending - 3] = len >> 8;
        s.pending_buf[s.pending - 2] = ~len;
        s.pending_buf[s.pending - 1] = ~len >> 8;
        flush_pending(s.strm);
        if (left) {
          if (left > len) {
            left = len;
          }
          s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);
          s.strm.next_out += left;
          s.strm.avail_out -= left;
          s.strm.total_out += left;
          s.block_start += left;
          len -= left;
        }
        if (len) {
          read_buf(s.strm, s.strm.output, s.strm.next_out, len);
          s.strm.next_out += len;
          s.strm.avail_out -= len;
          s.strm.total_out += len;
        }
      } while (last === 0);
      used -= s.strm.avail_in;
      if (used) {
        if (used >= s.w_size) {
          s.matches = 2;
          s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);
          s.strstart = s.w_size;
          s.insert = s.strstart;
        } else {
          if (s.window_size - s.strstart <= used) {
            s.strstart -= s.w_size;
            s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
            if (s.matches < 2) {
              s.matches++;
            }
            if (s.insert > s.strstart) {
              s.insert = s.strstart;
            }
          }
          s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);
          s.strstart += used;
          s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;
        }
        s.block_start = s.strstart;
      }
      if (s.high_water < s.strstart) {
        s.high_water = s.strstart;
      }
      if (last) {
        return BS_FINISH_DONE;
      }
      if (flush !== Z_NO_FLUSH && flush !== Z_FINISH && s.strm.avail_in === 0 && s.strstart === s.block_start) {
        return BS_BLOCK_DONE;
      }
      have = s.window_size - s.strstart;
      if (s.strm.avail_in > have && s.block_start >= s.w_size) {
        s.block_start -= s.w_size;
        s.strstart -= s.w_size;
        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
        if (s.matches < 2) {
          s.matches++;
        }
        have += s.w_size;
        if (s.insert > s.strstart) {
          s.insert = s.strstart;
        }
      }
      if (have > s.strm.avail_in) {
        have = s.strm.avail_in;
      }
      if (have) {
        read_buf(s.strm, s.window, s.strstart, have);
        s.strstart += have;
        s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;
      }
      if (s.high_water < s.strstart) {
        s.high_water = s.strstart;
      }
      have = s.bi_valid + 42 >> 3;
      have = s.pending_buf_size - have > 65535 ? 65535 : s.pending_buf_size - have;
      min_block = have > s.w_size ? s.w_size : have;
      left = s.strstart - s.block_start;
      if (left >= min_block || (left || flush === Z_FINISH) && flush !== Z_NO_FLUSH && s.strm.avail_in === 0 && left <= have) {
        len = left > have ? have : left;
        last = flush === Z_FINISH && s.strm.avail_in === 0 && len === left ? 1 : 0;
        _tr_stored_block(s, s.block_start, len, last);
        s.block_start += len;
        flush_pending(s.strm);
      }
      return last ? BS_FINISH_STARTED : BS_NEED_MORE;
    };
    var deflate_fast = (s, flush) => {
      let hash_head;
      let bflush;
      for (; ; ) {
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) {
            break;
          }
        }
        hash_head = 0;
        if (s.lookahead >= MIN_MATCH) {
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        }
        if (hash_head !== 0 && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
          s.match_length = longest_match(s, hash_head);
        }
        if (s.match_length >= MIN_MATCH) {
          bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
          s.lookahead -= s.match_length;
          if (s.match_length <= s.max_lazy_match && s.lookahead >= MIN_MATCH) {
            s.match_length--;
            do {
              s.strstart++;
              s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
            } while (--s.match_length !== 0);
            s.strstart++;
          } else {
            s.strstart += s.match_length;
            s.match_length = 0;
            s.ins_h = s.window[s.strstart];
            s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);
          }
        } else {
          bflush = _tr_tally(s, 0, s.window[s.strstart]);
          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        }
      }
      s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
      if (flush === Z_FINISH) {
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        return BS_FINISH_DONE;
      }
      if (s.sym_next) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      return BS_BLOCK_DONE;
    };
    var deflate_slow = (s, flush) => {
      let hash_head;
      let bflush;
      let max_insert;
      for (; ; ) {
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) {
            break;
          }
        }
        hash_head = 0;
        if (s.lookahead >= MIN_MATCH) {
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        }
        s.prev_length = s.match_length;
        s.prev_match = s.match_start;
        s.match_length = MIN_MATCH - 1;
        if (hash_head !== 0 && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
          s.match_length = longest_match(s, hash_head);
          if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096)) {
            s.match_length = MIN_MATCH - 1;
          }
        }
        if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
          max_insert = s.strstart + s.lookahead - MIN_MATCH;
          bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
          s.lookahead -= s.prev_length - 1;
          s.prev_length -= 2;
          do {
            if (++s.strstart <= max_insert) {
              s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
            }
          } while (--s.prev_length !== 0);
          s.match_available = 0;
          s.match_length = MIN_MATCH - 1;
          s.strstart++;
          if (bflush) {
            flush_block_only(s, false);
            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
          }
        } else if (s.match_available) {
          bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
          if (bflush) {
            flush_block_only(s, false);
          }
          s.strstart++;
          s.lookahead--;
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        } else {
          s.match_available = 1;
          s.strstart++;
          s.lookahead--;
        }
      }
      if (s.match_available) {
        bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
        s.match_available = 0;
      }
      s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
      if (flush === Z_FINISH) {
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        return BS_FINISH_DONE;
      }
      if (s.sym_next) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      return BS_BLOCK_DONE;
    };
    var deflate_rle = (s, flush) => {
      let bflush;
      let prev;
      let scan, strend;
      const _win = s.window;
      for (; ; ) {
        if (s.lookahead <= MAX_MATCH) {
          fill_window(s);
          if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) {
            break;
          }
        }
        s.match_length = 0;
        if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
          scan = s.strstart - 1;
          prev = _win[scan];
          if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
            strend = s.strstart + MAX_MATCH;
            do {
            } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
            s.match_length = MAX_MATCH - (strend - scan);
            if (s.match_length > s.lookahead) {
              s.match_length = s.lookahead;
            }
          }
        }
        if (s.match_length >= MIN_MATCH) {
          bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);
          s.lookahead -= s.match_length;
          s.strstart += s.match_length;
          s.match_length = 0;
        } else {
          bflush = _tr_tally(s, 0, s.window[s.strstart]);
          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH) {
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        return BS_FINISH_DONE;
      }
      if (s.sym_next) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      return BS_BLOCK_DONE;
    };
    var deflate_huff = (s, flush) => {
      let bflush;
      for (; ; ) {
        if (s.lookahead === 0) {
          fill_window(s);
          if (s.lookahead === 0) {
            if (flush === Z_NO_FLUSH) {
              return BS_NEED_MORE;
            }
            break;
          }
        }
        s.match_length = 0;
        bflush = _tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
        if (bflush) {
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH) {
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        return BS_FINISH_DONE;
      }
      if (s.sym_next) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      return BS_BLOCK_DONE;
    };
    function Config(good_length, max_lazy, nice_length, max_chain, func) {
      this.good_length = good_length;
      this.max_lazy = max_lazy;
      this.nice_length = nice_length;
      this.max_chain = max_chain;
      this.func = func;
    }
    var configuration_table = [
      /*      good lazy nice chain */
      new Config(0, 0, 0, 0, deflate_stored),
      /* 0 store only */
      new Config(4, 4, 8, 4, deflate_fast),
      /* 1 max speed, no lazy matches */
      new Config(4, 5, 16, 8, deflate_fast),
      /* 2 */
      new Config(4, 6, 32, 32, deflate_fast),
      /* 3 */
      new Config(4, 4, 16, 16, deflate_slow),
      /* 4 lazy matches */
      new Config(8, 16, 32, 32, deflate_slow),
      /* 5 */
      new Config(8, 16, 128, 128, deflate_slow),
      /* 6 */
      new Config(8, 32, 128, 256, deflate_slow),
      /* 7 */
      new Config(32, 128, 258, 1024, deflate_slow),
      /* 8 */
      new Config(32, 258, 258, 4096, deflate_slow)
      /* 9 max compression */
    ];
    var lm_init = (s) => {
      s.window_size = 2 * s.w_size;
      zero2(s.head);
      s.max_lazy_match = configuration_table[s.level].max_lazy;
      s.good_match = configuration_table[s.level].good_length;
      s.nice_match = configuration_table[s.level].nice_length;
      s.max_chain_length = configuration_table[s.level].max_chain;
      s.strstart = 0;
      s.block_start = 0;
      s.lookahead = 0;
      s.insert = 0;
      s.match_length = s.prev_length = MIN_MATCH - 1;
      s.match_available = 0;
      s.ins_h = 0;
    };
    function DeflateState() {
      this.strm = null;
      this.status = 0;
      this.pending_buf = null;
      this.pending_buf_size = 0;
      this.pending_out = 0;
      this.pending = 0;
      this.wrap = 0;
      this.gzhead = null;
      this.gzindex = 0;
      this.method = Z_DEFLATED;
      this.last_flush = -1;
      this.w_size = 0;
      this.w_bits = 0;
      this.w_mask = 0;
      this.window = null;
      this.window_size = 0;
      this.prev = null;
      this.head = null;
      this.ins_h = 0;
      this.hash_size = 0;
      this.hash_bits = 0;
      this.hash_mask = 0;
      this.hash_shift = 0;
      this.block_start = 0;
      this.match_length = 0;
      this.prev_match = 0;
      this.match_available = 0;
      this.strstart = 0;
      this.match_start = 0;
      this.lookahead = 0;
      this.prev_length = 0;
      this.max_chain_length = 0;
      this.max_lazy_match = 0;
      this.level = 0;
      this.strategy = 0;
      this.good_match = 0;
      this.nice_match = 0;
      this.dyn_ltree = new Uint16Array(HEAP_SIZE * 2);
      this.dyn_dtree = new Uint16Array((2 * D_CODES + 1) * 2);
      this.bl_tree = new Uint16Array((2 * BL_CODES + 1) * 2);
      zero2(this.dyn_ltree);
      zero2(this.dyn_dtree);
      zero2(this.bl_tree);
      this.l_desc = null;
      this.d_desc = null;
      this.bl_desc = null;
      this.bl_count = new Uint16Array(MAX_BITS + 1);
      this.heap = new Uint16Array(2 * L_CODES + 1);
      zero2(this.heap);
      this.heap_len = 0;
      this.heap_max = 0;
      this.depth = new Uint16Array(2 * L_CODES + 1);
      zero2(this.depth);
      this.sym_buf = 0;
      this.lit_bufsize = 0;
      this.sym_next = 0;
      this.sym_end = 0;
      this.opt_len = 0;
      this.static_len = 0;
      this.matches = 0;
      this.insert = 0;
      this.bi_buf = 0;
      this.bi_valid = 0;
    }
    var deflateStateCheck = (strm) => {
      if (!strm) {
        return 1;
      }
      const s = strm.state;
      if (!s || s.strm !== strm || s.status !== INIT_STATE && //#ifdef GZIP
      s.status !== GZIP_STATE && //#endif
      s.status !== EXTRA_STATE && s.status !== NAME_STATE && s.status !== COMMENT_STATE && s.status !== HCRC_STATE && s.status !== BUSY_STATE && s.status !== FINISH_STATE) {
        return 1;
      }
      return 0;
    };
    var deflateResetKeep = (strm) => {
      if (deflateStateCheck(strm)) {
        return err(strm, Z_STREAM_ERROR);
      }
      strm.total_in = strm.total_out = 0;
      strm.data_type = Z_UNKNOWN;
      const s = strm.state;
      s.pending = 0;
      s.pending_out = 0;
      if (s.wrap < 0) {
        s.wrap = -s.wrap;
      }
      s.status = //#ifdef GZIP
      s.wrap === 2 ? GZIP_STATE : (
        //#endif
        s.wrap ? INIT_STATE : BUSY_STATE
      );
      strm.adler = s.wrap === 2 ? 0 : 1;
      s.last_flush = -2;
      _tr_init(s);
      return Z_OK;
    };
    var deflateReset = (strm) => {
      const ret = deflateResetKeep(strm);
      if (ret === Z_OK) {
        lm_init(strm.state);
      }
      return ret;
    };
    var deflateSetHeader = (strm, head) => {
      if (deflateStateCheck(strm) || strm.state.wrap !== 2) {
        return Z_STREAM_ERROR;
      }
      strm.state.gzhead = head;
      return Z_OK;
    };
    var deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {
      if (!strm) {
        return Z_STREAM_ERROR;
      }
      let wrap = 1;
      if (level === Z_DEFAULT_COMPRESSION) {
        level = 6;
      }
      if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
      } else if (windowBits > 15) {
        wrap = 2;
        windowBits -= 16;
      }
      if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED || windowBits === 8 && wrap !== 1) {
        return err(strm, Z_STREAM_ERROR);
      }
      if (windowBits === 8) {
        windowBits = 9;
      }
      const s = new DeflateState();
      strm.state = s;
      s.strm = strm;
      s.status = INIT_STATE;
      s.wrap = wrap;
      s.gzhead = null;
      s.w_bits = windowBits;
      s.w_size = 1 << s.w_bits;
      s.w_mask = s.w_size - 1;
      s.hash_bits = memLevel + 7;
      s.hash_size = 1 << s.hash_bits;
      s.hash_mask = s.hash_size - 1;
      s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
      s.window = new Uint8Array(s.w_size * 2);
      s.head = new Uint16Array(s.hash_size);
      s.prev = new Uint16Array(s.w_size);
      s.lit_bufsize = 1 << memLevel + 6;
      s.pending_buf_size = s.lit_bufsize * 4;
      s.pending_buf = new Uint8Array(s.pending_buf_size);
      s.sym_buf = s.lit_bufsize;
      s.sym_end = (s.lit_bufsize - 1) * 3;
      s.level = level;
      s.strategy = strategy;
      s.method = method;
      return deflateReset(strm);
    };
    var deflateInit = (strm, level) => {
      return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
    };
    var deflate = (strm, flush) => {
      if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {
        return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
      }
      const s = strm.state;
      if (!strm.output || strm.avail_in !== 0 && !strm.input || s.status === FINISH_STATE && flush !== Z_FINISH) {
        return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
      }
      const old_flush = s.last_flush;
      s.last_flush = flush;
      if (s.pending !== 0) {
        flush_pending(strm);
        if (strm.avail_out === 0) {
          s.last_flush = -1;
          return Z_OK;
        }
      } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
        return err(strm, Z_BUF_ERROR);
      }
      if (s.status === FINISH_STATE && strm.avail_in !== 0) {
        return err(strm, Z_BUF_ERROR);
      }
      if (s.status === INIT_STATE && s.wrap === 0) {
        s.status = BUSY_STATE;
      }
      if (s.status === INIT_STATE) {
        let header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;
        let level_flags = -1;
        if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
          level_flags = 0;
        } else if (s.level < 6) {
          level_flags = 1;
        } else if (s.level === 6) {
          level_flags = 2;
        } else {
          level_flags = 3;
        }
        header |= level_flags << 6;
        if (s.strstart !== 0) {
          header |= PRESET_DICT;
        }
        header += 31 - header % 31;
        putShortMSB(s, header);
        if (s.strstart !== 0) {
          putShortMSB(s, strm.adler >>> 16);
          putShortMSB(s, strm.adler & 65535);
        }
        strm.adler = 1;
        s.status = BUSY_STATE;
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK;
        }
      }
      if (s.status === GZIP_STATE) {
        strm.adler = 0;
        put_byte(s, 31);
        put_byte(s, 139);
        put_byte(s, 8);
        if (!s.gzhead) {
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
          put_byte(s, OS_CODE);
          s.status = BUSY_STATE;
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK;
          }
        } else {
          put_byte(
            s,
            (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16)
          );
          put_byte(s, s.gzhead.time & 255);
          put_byte(s, s.gzhead.time >> 8 & 255);
          put_byte(s, s.gzhead.time >> 16 & 255);
          put_byte(s, s.gzhead.time >> 24 & 255);
          put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
          put_byte(s, s.gzhead.os & 255);
          if (s.gzhead.extra && s.gzhead.extra.length) {
            put_byte(s, s.gzhead.extra.length & 255);
            put_byte(s, s.gzhead.extra.length >> 8 & 255);
          }
          if (s.gzhead.hcrc) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
          }
          s.gzindex = 0;
          s.status = EXTRA_STATE;
        }
      }
      if (s.status === EXTRA_STATE) {
        if (s.gzhead.extra) {
          let beg = s.pending;
          let left = (s.gzhead.extra.length & 65535) - s.gzindex;
          while (s.pending + left > s.pending_buf_size) {
            let copy = s.pending_buf_size - s.pending;
            s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);
            s.pending = s.pending_buf_size;
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            s.gzindex += copy;
            flush_pending(strm);
            if (s.pending !== 0) {
              s.last_flush = -1;
              return Z_OK;
            }
            beg = 0;
            left -= copy;
          }
          let gzhead_extra = new Uint8Array(s.gzhead.extra);
          s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);
          s.pending += left;
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          s.gzindex = 0;
        }
        s.status = NAME_STATE;
      }
      if (s.status === NAME_STATE) {
        if (s.gzhead.name) {
          let beg = s.pending;
          let val;
          do {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              if (s.pending !== 0) {
                s.last_flush = -1;
                return Z_OK;
              }
              beg = 0;
            }
            if (s.gzindex < s.gzhead.name.length) {
              val = s.gzhead.name.charCodeAt(s.gzindex++) & 255;
            } else {
              val = 0;
            }
            put_byte(s, val);
          } while (val !== 0);
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          s.gzindex = 0;
        }
        s.status = COMMENT_STATE;
      }
      if (s.status === COMMENT_STATE) {
        if (s.gzhead.comment) {
          let beg = s.pending;
          let val;
          do {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              if (s.pending !== 0) {
                s.last_flush = -1;
                return Z_OK;
              }
              beg = 0;
            }
            if (s.gzindex < s.gzhead.comment.length) {
              val = s.gzhead.comment.charCodeAt(s.gzindex++) & 255;
            } else {
              val = 0;
            }
            put_byte(s, val);
          } while (val !== 0);
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
        }
        s.status = HCRC_STATE;
      }
      if (s.status === HCRC_STATE) {
        if (s.gzhead.hcrc) {
          if (s.pending + 2 > s.pending_buf_size) {
            flush_pending(strm);
            if (s.pending !== 0) {
              s.last_flush = -1;
              return Z_OK;
            }
          }
          put_byte(s, strm.adler & 255);
          put_byte(s, strm.adler >> 8 & 255);
          strm.adler = 0;
        }
        s.status = BUSY_STATE;
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK;
        }
      }
      if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
        let bstate = s.level === 0 ? deflate_stored(s, flush) : s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);
        if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
          s.status = FINISH_STATE;
        }
        if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
          if (strm.avail_out === 0) {
            s.last_flush = -1;
          }
          return Z_OK;
        }
        if (bstate === BS_BLOCK_DONE) {
          if (flush === Z_PARTIAL_FLUSH) {
            _tr_align(s);
          } else if (flush !== Z_BLOCK) {
            _tr_stored_block(s, 0, 0, false);
            if (flush === Z_FULL_FLUSH) {
              zero2(s.head);
              if (s.lookahead === 0) {
                s.strstart = 0;
                s.block_start = 0;
                s.insert = 0;
              }
            }
          }
          flush_pending(strm);
          if (strm.avail_out === 0) {
            s.last_flush = -1;
            return Z_OK;
          }
        }
      }
      if (flush !== Z_FINISH) {
        return Z_OK;
      }
      if (s.wrap <= 0) {
        return Z_STREAM_END;
      }
      if (s.wrap === 2) {
        put_byte(s, strm.adler & 255);
        put_byte(s, strm.adler >> 8 & 255);
        put_byte(s, strm.adler >> 16 & 255);
        put_byte(s, strm.adler >> 24 & 255);
        put_byte(s, strm.total_in & 255);
        put_byte(s, strm.total_in >> 8 & 255);
        put_byte(s, strm.total_in >> 16 & 255);
        put_byte(s, strm.total_in >> 24 & 255);
      } else {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 65535);
      }
      flush_pending(strm);
      if (s.wrap > 0) {
        s.wrap = -s.wrap;
      }
      return s.pending !== 0 ? Z_OK : Z_STREAM_END;
    };
    var deflateEnd = (strm) => {
      if (deflateStateCheck(strm)) {
        return Z_STREAM_ERROR;
      }
      const status = strm.state.status;
      strm.state = null;
      return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
    };
    var deflateSetDictionary = (strm, dictionary) => {
      let dictLength = dictionary.length;
      if (deflateStateCheck(strm)) {
        return Z_STREAM_ERROR;
      }
      const s = strm.state;
      const wrap = s.wrap;
      if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {
        return Z_STREAM_ERROR;
      }
      if (wrap === 1) {
        strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
      }
      s.wrap = 0;
      if (dictLength >= s.w_size) {
        if (wrap === 0) {
          zero2(s.head);
          s.strstart = 0;
          s.block_start = 0;
          s.insert = 0;
        }
        let tmpDict = new Uint8Array(s.w_size);
        tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
        dictionary = tmpDict;
        dictLength = s.w_size;
      }
      const avail = strm.avail_in;
      const next = strm.next_in;
      const input = strm.input;
      strm.avail_in = dictLength;
      strm.next_in = 0;
      strm.input = dictionary;
      fill_window(s);
      while (s.lookahead >= MIN_MATCH) {
        let str = s.strstart;
        let n = s.lookahead - (MIN_MATCH - 1);
        do {
          s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);
          s.prev[str & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = str;
          str++;
        } while (--n);
        s.strstart = str;
        s.lookahead = MIN_MATCH - 1;
        fill_window(s);
      }
      s.strstart += s.lookahead;
      s.block_start = s.strstart;
      s.insert = s.lookahead;
      s.lookahead = 0;
      s.match_length = s.prev_length = MIN_MATCH - 1;
      s.match_available = 0;
      strm.next_in = next;
      strm.input = input;
      strm.avail_in = avail;
      s.wrap = wrap;
      return Z_OK;
    };
    module.exports.deflateInit = deflateInit;
    module.exports.deflateInit2 = deflateInit2;
    module.exports.deflateReset = deflateReset;
    module.exports.deflateResetKeep = deflateResetKeep;
    module.exports.deflateSetHeader = deflateSetHeader;
    module.exports.deflate = deflate;
    module.exports.deflateEnd = deflateEnd;
    module.exports.deflateSetDictionary = deflateSetDictionary;
    module.exports.deflateInfo = "pako deflate (from Nodeca project)";
  }
});

// node_modules/pako/lib/utils/common.js
var require_common2 = __commonJS({
  "node_modules/pako/lib/utils/common.js"(exports, module) {
    "use strict";
    var _has = (obj, key) => {
      return Object.prototype.hasOwnProperty.call(obj, key);
    };
    module.exports.assign = function(obj) {
      const sources = Array.prototype.slice.call(arguments, 1);
      while (sources.length) {
        const source = sources.shift();
        if (!source) {
          continue;
        }
        if (typeof source !== "object") {
          throw new TypeError(source + "must be non-object");
        }
        for (const p in source) {
          if (_has(source, p)) {
            obj[p] = source[p];
          }
        }
      }
      return obj;
    };
    module.exports.flattenChunks = (chunks) => {
      let len = 0;
      for (let i = 0, l = chunks.length; i < l; i++) {
        len += chunks[i].length;
      }
      const result = new Uint8Array(len);
      for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
        let chunk = chunks[i];
        result.set(chunk, pos);
        pos += chunk.length;
      }
      return result;
    };
  }
});

// node_modules/pako/lib/utils/strings.js
var require_strings = __commonJS({
  "node_modules/pako/lib/utils/strings.js"(exports, module) {
    "use strict";
    var STR_APPLY_UIA_OK = true;
    try {
      String.fromCharCode.apply(null, new Uint8Array(1));
    } catch (__) {
      STR_APPLY_UIA_OK = false;
    }
    var _utf8len = new Uint8Array(256);
    for (let q = 0; q < 256; q++) {
      _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;
    }
    _utf8len[254] = _utf8len[254] = 1;
    module.exports.string2buf = (str) => {
      if (typeof TextEncoder === "function" && TextEncoder.prototype.encode) {
        return new TextEncoder().encode(str);
      }
      let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
      for (m_pos = 0; m_pos < str_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
          c2 = str.charCodeAt(m_pos + 1);
          if ((c2 & 64512) === 56320) {
            c = 65536 + (c - 55296 << 10) + (c2 - 56320);
            m_pos++;
          }
        }
        buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;
      }
      buf = new Uint8Array(buf_len);
      for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
          c2 = str.charCodeAt(m_pos + 1);
          if ((c2 & 64512) === 56320) {
            c = 65536 + (c - 55296 << 10) + (c2 - 56320);
            m_pos++;
          }
        }
        if (c < 128) {
          buf[i++] = c;
        } else if (c < 2048) {
          buf[i++] = 192 | c >>> 6;
          buf[i++] = 128 | c & 63;
        } else if (c < 65536) {
          buf[i++] = 224 | c >>> 12;
          buf[i++] = 128 | c >>> 6 & 63;
          buf[i++] = 128 | c & 63;
        } else {
          buf[i++] = 240 | c >>> 18;
          buf[i++] = 128 | c >>> 12 & 63;
          buf[i++] = 128 | c >>> 6 & 63;
          buf[i++] = 128 | c & 63;
        }
      }
      return buf;
    };
    var buf2binstring = (buf, len) => {
      if (len < 65534) {
        if (buf.subarray && STR_APPLY_UIA_OK) {
          return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
        }
      }
      let result = "";
      for (let i = 0; i < len; i++) {
        result += String.fromCharCode(buf[i]);
      }
      return result;
    };
    module.exports.buf2string = (buf, max) => {
      const len = max || buf.length;
      if (typeof TextDecoder === "function" && TextDecoder.prototype.decode) {
        return new TextDecoder().decode(buf.subarray(0, max));
      }
      let i, out;
      const utf16buf = new Array(len * 2);
      for (out = 0, i = 0; i < len; ) {
        let c = buf[i++];
        if (c < 128) {
          utf16buf[out++] = c;
          continue;
        }
        let c_len = _utf8len[c];
        if (c_len > 4) {
          utf16buf[out++] = 65533;
          i += c_len - 1;
          continue;
        }
        c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7;
        while (c_len > 1 && i < len) {
          c = c << 6 | buf[i++] & 63;
          c_len--;
        }
        if (c_len > 1) {
          utf16buf[out++] = 65533;
          continue;
        }
        if (c < 65536) {
          utf16buf[out++] = c;
        } else {
          c -= 65536;
          utf16buf[out++] = 55296 | c >> 10 & 1023;
          utf16buf[out++] = 56320 | c & 1023;
        }
      }
      return buf2binstring(utf16buf, out);
    };
    module.exports.utf8border = (buf, max) => {
      max = max || buf.length;
      if (max > buf.length) {
        max = buf.length;
      }
      let pos = max - 1;
      while (pos >= 0 && (buf[pos] & 192) === 128) {
        pos--;
      }
      if (pos < 0) {
        return max;
      }
      if (pos === 0) {
        return max;
      }
      return pos + _utf8len[buf[pos]] > max ? pos : max;
    };
  }
});

// node_modules/pako/lib/zlib/zstream.js
var require_zstream = __commonJS({
  "node_modules/pako/lib/zlib/zstream.js"(exports, module) {
    "use strict";
    function ZStream() {
      this.input = null;
      this.next_in = 0;
      this.avail_in = 0;
      this.total_in = 0;
      this.output = null;
      this.next_out = 0;
      this.avail_out = 0;
      this.total_out = 0;
      this.msg = "";
      this.state = null;
      this.data_type = 2;
      this.adler = 0;
    }
    module.exports = ZStream;
  }
});

// node_modules/pako/lib/deflate.js
var require_deflate2 = __commonJS({
  "node_modules/pako/lib/deflate.js"(exports, module) {
    "use strict";
    var zlib_deflate = require_deflate();
    var utils = require_common2();
    var strings = require_strings();
    var msg = require_messages();
    var ZStream = require_zstream();
    var toString = Object.prototype.toString;
    var {
      Z_NO_FLUSH,
      Z_SYNC_FLUSH,
      Z_FULL_FLUSH,
      Z_FINISH,
      Z_OK,
      Z_STREAM_END,
      Z_DEFAULT_COMPRESSION,
      Z_DEFAULT_STRATEGY,
      Z_DEFLATED
    } = require_constants();
    function Deflate(options) {
      this.options = utils.assign({
        level: Z_DEFAULT_COMPRESSION,
        method: Z_DEFLATED,
        chunkSize: 16384,
        windowBits: 15,
        memLevel: 8,
        strategy: Z_DEFAULT_STRATEGY
      }, options || {});
      let opt = this.options;
      if (opt.raw && opt.windowBits > 0) {
        opt.windowBits = -opt.windowBits;
      } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {
        opt.windowBits += 16;
      }
      this.err = 0;
      this.msg = "";
      this.ended = false;
      this.chunks = [];
      this.strm = new ZStream();
      this.strm.avail_out = 0;
      let status = zlib_deflate.deflateInit2(
        this.strm,
        opt.level,
        opt.method,
        opt.windowBits,
        opt.memLevel,
        opt.strategy
      );
      if (status !== Z_OK) {
        throw new Error(msg[status]);
      }
      if (opt.header) {
        zlib_deflate.deflateSetHeader(this.strm, opt.header);
      }
      if (opt.dictionary) {
        let dict;
        if (typeof opt.dictionary === "string") {
          dict = strings.string2buf(opt.dictionary);
        } else if (toString.call(opt.dictionary) === "[object ArrayBuffer]") {
          dict = new Uint8Array(opt.dictionary);
        } else {
          dict = opt.dictionary;
        }
        status = zlib_deflate.deflateSetDictionary(this.strm, dict);
        if (status !== Z_OK) {
          throw new Error(msg[status]);
        }
        this._dict_set = true;
      }
    }
    Deflate.prototype.push = function(data, flush_mode) {
      const strm = this.strm;
      const chunkSize = this.options.chunkSize;
      let status, _flush_mode;
      if (this.ended) {
        return false;
      }
      if (flush_mode === ~~flush_mode)
        _flush_mode = flush_mode;
      else
        _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;
      if (typeof data === "string") {
        strm.input = strings.string2buf(data);
      } else if (toString.call(data) === "[object ArrayBuffer]") {
        strm.input = new Uint8Array(data);
      } else {
        strm.input = data;
      }
      strm.next_in = 0;
      strm.avail_in = strm.input.length;
      for (; ; ) {
        if (strm.avail_out === 0) {
          strm.output = new Uint8Array(chunkSize);
          strm.next_out = 0;
          strm.avail_out = chunkSize;
        }
        if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {
          this.onData(strm.output.subarray(0, strm.next_out));
          strm.avail_out = 0;
          continue;
        }
        status = zlib_deflate.deflate(strm, _flush_mode);
        if (status === Z_STREAM_END) {
          if (strm.next_out > 0) {
            this.onData(strm.output.subarray(0, strm.next_out));
          }
          status = zlib_deflate.deflateEnd(this.strm);
          this.onEnd(status);
          this.ended = true;
          return status === Z_OK;
        }
        if (strm.avail_out === 0) {
          this.onData(strm.output);
          continue;
        }
        if (_flush_mode > 0 && strm.next_out > 0) {
          this.onData(strm.output.subarray(0, strm.next_out));
          strm.avail_out = 0;
          continue;
        }
        if (strm.avail_in === 0)
          break;
      }
      return true;
    };
    Deflate.prototype.onData = function(chunk) {
      this.chunks.push(chunk);
    };
    Deflate.prototype.onEnd = function(status) {
      if (status === Z_OK) {
        this.result = utils.flattenChunks(this.chunks);
      }
      this.chunks = [];
      this.err = status;
      this.msg = this.strm.msg;
    };
    function deflate(input, options) {
      const deflator = new Deflate(options);
      deflator.push(input, true);
      if (deflator.err) {
        throw deflator.msg || msg[deflator.err];
      }
      return deflator.result;
    }
    function deflateRaw(input, options) {
      options = options || {};
      options.raw = true;
      return deflate(input, options);
    }
    function gzip(input, options) {
      options = options || {};
      options.gzip = true;
      return deflate(input, options);
    }
    module.exports.Deflate = Deflate;
    module.exports.deflate = deflate;
    module.exports.deflateRaw = deflateRaw;
    module.exports.gzip = gzip;
    module.exports.constants = require_constants();
  }
});

// node_modules/pako/lib/zlib/inffast.js
var require_inffast = __commonJS({
  "node_modules/pako/lib/zlib/inffast.js"(exports, module) {
    "use strict";
    var BAD = 16209;
    var TYPE = 16191;
    module.exports = function inflate_fast(strm, start) {
      let _in;
      let last;
      let _out;
      let beg;
      let end;
      let dmax;
      let wsize;
      let whave;
      let wnext;
      let s_window;
      let hold;
      let bits;
      let lcode;
      let dcode;
      let lmask;
      let dmask;
      let here;
      let op;
      let len;
      let dist;
      let from;
      let from_source;
      let input, output;
      const state = strm.state;
      _in = strm.next_in;
      input = strm.input;
      last = _in + (strm.avail_in - 5);
      _out = strm.next_out;
      output = strm.output;
      beg = _out - (start - strm.avail_out);
      end = _out + (strm.avail_out - 257);
      dmax = state.dmax;
      wsize = state.wsize;
      whave = state.whave;
      wnext = state.wnext;
      s_window = state.window;
      hold = state.hold;
      bits = state.bits;
      lcode = state.lencode;
      dcode = state.distcode;
      lmask = (1 << state.lenbits) - 1;
      dmask = (1 << state.distbits) - 1;
      top:
        do {
          if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
          }
          here = lcode[hold & lmask];
          dolen:
            for (; ; ) {
              op = here >>> 24;
              hold >>>= op;
              bits -= op;
              op = here >>> 16 & 255;
              if (op === 0) {
                output[_out++] = here & 65535;
              } else if (op & 16) {
                len = here & 65535;
                op &= 15;
                if (op) {
                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;
                  }
                  len += hold & (1 << op) - 1;
                  hold >>>= op;
                  bits -= op;
                }
                if (bits < 15) {
                  hold += input[_in++] << bits;
                  bits += 8;
                  hold += input[_in++] << bits;
                  bits += 8;
                }
                here = dcode[hold & dmask];
                dodist:
                  for (; ; ) {
                    op = here >>> 24;
                    hold >>>= op;
                    bits -= op;
                    op = here >>> 16 & 255;
                    if (op & 16) {
                      dist = here & 65535;
                      op &= 15;
                      if (bits < op) {
                        hold += input[_in++] << bits;
                        bits += 8;
                        if (bits < op) {
                          hold += input[_in++] << bits;
                          bits += 8;
                        }
                      }
                      dist += hold & (1 << op) - 1;
                      if (dist > dmax) {
                        strm.msg = "invalid distance too far back";
                        state.mode = BAD;
                        break top;
                      }
                      hold >>>= op;
                      bits -= op;
                      op = _out - beg;
                      if (dist > op) {
                        op = dist - op;
                        if (op > whave) {
                          if (state.sane) {
                            strm.msg = "invalid distance too far back";
                            state.mode = BAD;
                            break top;
                          }
                        }
                        from = 0;
                        from_source = s_window;
                        if (wnext === 0) {
                          from += wsize - op;
                          if (op < len) {
                            len -= op;
                            do {
                              output[_out++] = s_window[from++];
                            } while (--op);
                            from = _out - dist;
                            from_source = output;
                          }
                        } else if (wnext < op) {
                          from += wsize + wnext - op;
                          op -= wnext;
                          if (op < len) {
                            len -= op;
                            do {
                              output[_out++] = s_window[from++];
                            } while (--op);
                            from = 0;
                            if (wnext < len) {
                              op = wnext;
                              len -= op;
                              do {
                                output[_out++] = s_window[from++];
                              } while (--op);
                              from = _out - dist;
                              from_source = output;
                            }
                          }
                        } else {
                          from += wnext - op;
                          if (op < len) {
                            len -= op;
                            do {
                              output[_out++] = s_window[from++];
                            } while (--op);
                            from = _out - dist;
                            from_source = output;
                          }
                        }
                        while (len > 2) {
                          output[_out++] = from_source[from++];
                          output[_out++] = from_source[from++];
                          output[_out++] = from_source[from++];
                          len -= 3;
                        }
                        if (len) {
                          output[_out++] = from_source[from++];
                          if (len > 1) {
                            output[_out++] = from_source[from++];
                          }
                        }
                      } else {
                        from = _out - dist;
                        do {
                          output[_out++] = output[from++];
                          output[_out++] = output[from++];
                          output[_out++] = output[from++];
                          len -= 3;
                        } while (len > 2);
                        if (len) {
                          output[_out++] = output[from++];
                          if (len > 1) {
                            output[_out++] = output[from++];
                          }
                        }
                      }
                    } else if ((op & 64) === 0) {
                      here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
                      continue dodist;
                    } else {
                      strm.msg = "invalid distance code";
                      state.mode = BAD;
                      break top;
                    }
                    break;
                  }
              } else if ((op & 64) === 0) {
                here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
                continue dolen;
              } else if (op & 32) {
                state.mode = TYPE;
                break top;
              } else {
                strm.msg = "invalid literal/length code";
                state.mode = BAD;
                break top;
              }
              break;
            }
        } while (_in < last && _out < end);
      len = bits >> 3;
      _in -= len;
      bits -= len << 3;
      hold &= (1 << bits) - 1;
      strm.next_in = _in;
      strm.next_out = _out;
      strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
      strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
      state.hold = hold;
      state.bits = bits;
      return;
    };
  }
});

// node_modules/pako/lib/zlib/inftrees.js
var require_inftrees = __commonJS({
  "node_modules/pako/lib/zlib/inftrees.js"(exports, module) {
    "use strict";
    var MAXBITS = 15;
    var ENOUGH_LENS = 852;
    var ENOUGH_DISTS = 592;
    var CODES = 0;
    var LENS = 1;
    var DISTS = 2;
    var lbase = new Uint16Array([
      /* Length codes 257..285 base */
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      13,
      15,
      17,
      19,
      23,
      27,
      31,
      35,
      43,
      51,
      59,
      67,
      83,
      99,
      115,
      131,
      163,
      195,
      227,
      258,
      0,
      0
    ]);
    var lext = new Uint8Array([
      /* Length codes 257..285 extra */
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      17,
      17,
      17,
      17,
      18,
      18,
      18,
      18,
      19,
      19,
      19,
      19,
      20,
      20,
      20,
      20,
      21,
      21,
      21,
      21,
      16,
      72,
      78
    ]);
    var dbase = new Uint16Array([
      /* Distance codes 0..29 base */
      1,
      2,
      3,
      4,
      5,
      7,
      9,
      13,
      17,
      25,
      33,
      49,
      65,
      97,
      129,
      193,
      257,
      385,
      513,
      769,
      1025,
      1537,
      2049,
      3073,
      4097,
      6145,
      8193,
      12289,
      16385,
      24577,
      0,
      0
    ]);
    var dext = new Uint8Array([
      /* Distance codes 0..29 extra */
      16,
      16,
      16,
      16,
      17,
      17,
      18,
      18,
      19,
      19,
      20,
      20,
      21,
      21,
      22,
      22,
      23,
      23,
      24,
      24,
      25,
      25,
      26,
      26,
      27,
      27,
      28,
      28,
      29,
      29,
      64,
      64
    ]);
    var inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) => {
      const bits = opts.bits;
      let len = 0;
      let sym = 0;
      let min = 0, max = 0;
      let root = 0;
      let curr = 0;
      let drop = 0;
      let left = 0;
      let used = 0;
      let huff = 0;
      let incr;
      let fill;
      let low;
      let mask2;
      let next;
      let base = null;
      let match;
      const count = new Uint16Array(MAXBITS + 1);
      const offs = new Uint16Array(MAXBITS + 1);
      let extra = null;
      let here_bits, here_op, here_val;
      for (len = 0; len <= MAXBITS; len++) {
        count[len] = 0;
      }
      for (sym = 0; sym < codes; sym++) {
        count[lens[lens_index + sym]]++;
      }
      root = bits;
      for (max = MAXBITS; max >= 1; max--) {
        if (count[max] !== 0) {
          break;
        }
      }
      if (root > max) {
        root = max;
      }
      if (max === 0) {
        table[table_index++] = 1 << 24 | 64 << 16 | 0;
        table[table_index++] = 1 << 24 | 64 << 16 | 0;
        opts.bits = 1;
        return 0;
      }
      for (min = 1; min < max; min++) {
        if (count[min] !== 0) {
          break;
        }
      }
      if (root < min) {
        root = min;
      }
      left = 1;
      for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
        if (left < 0) {
          return -1;
        }
      }
      if (left > 0 && (type === CODES || max !== 1)) {
        return -1;
      }
      offs[1] = 0;
      for (len = 1; len < MAXBITS; len++) {
        offs[len + 1] = offs[len] + count[len];
      }
      for (sym = 0; sym < codes; sym++) {
        if (lens[lens_index + sym] !== 0) {
          work[offs[lens[lens_index + sym]]++] = sym;
        }
      }
      if (type === CODES) {
        base = extra = work;
        match = 20;
      } else if (type === LENS) {
        base = lbase;
        extra = lext;
        match = 257;
      } else {
        base = dbase;
        extra = dext;
        match = 0;
      }
      huff = 0;
      sym = 0;
      len = min;
      next = table_index;
      curr = root;
      drop = 0;
      low = -1;
      used = 1 << root;
      mask2 = used - 1;
      if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
        return 1;
      }
      for (; ; ) {
        here_bits = len - drop;
        if (work[sym] + 1 < match) {
          here_op = 0;
          here_val = work[sym];
        } else if (work[sym] >= match) {
          here_op = extra[work[sym] - match];
          here_val = base[work[sym] - match];
        } else {
          here_op = 32 + 64;
          here_val = 0;
        }
        incr = 1 << len - drop;
        fill = 1 << curr;
        min = fill;
        do {
          fill -= incr;
          table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
        } while (fill !== 0);
        incr = 1 << len - 1;
        while (huff & incr) {
          incr >>= 1;
        }
        if (incr !== 0) {
          huff &= incr - 1;
          huff += incr;
        } else {
          huff = 0;
        }
        sym++;
        if (--count[len] === 0) {
          if (len === max) {
            break;
          }
          len = lens[lens_index + work[sym]];
        }
        if (len > root && (huff & mask2) !== low) {
          if (drop === 0) {
            drop = root;
          }
          next += min;
          curr = len - drop;
          left = 1 << curr;
          while (curr + drop < max) {
            left -= count[curr + drop];
            if (left <= 0) {
              break;
            }
            curr++;
            left <<= 1;
          }
          used += 1 << curr;
          if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
            return 1;
          }
          low = huff & mask2;
          table[low] = root << 24 | curr << 16 | next - table_index | 0;
        }
      }
      if (huff !== 0) {
        table[next + huff] = len - drop << 24 | 64 << 16 | 0;
      }
      opts.bits = root;
      return 0;
    };
    module.exports = inflate_table;
  }
});

// node_modules/pako/lib/zlib/inflate.js
var require_inflate = __commonJS({
  "node_modules/pako/lib/zlib/inflate.js"(exports, module) {
    "use strict";
    var adler32 = require_adler32();
    var crc32 = require_crc32();
    var inflate_fast = require_inffast();
    var inflate_table = require_inftrees();
    var CODES = 0;
    var LENS = 1;
    var DISTS = 2;
    var {
      Z_FINISH,
      Z_BLOCK,
      Z_TREES,
      Z_OK,
      Z_STREAM_END,
      Z_NEED_DICT,
      Z_STREAM_ERROR,
      Z_DATA_ERROR,
      Z_MEM_ERROR,
      Z_BUF_ERROR,
      Z_DEFLATED
    } = require_constants();
    var HEAD = 16180;
    var FLAGS = 16181;
    var TIME = 16182;
    var OS = 16183;
    var EXLEN = 16184;
    var EXTRA = 16185;
    var NAME = 16186;
    var COMMENT = 16187;
    var HCRC = 16188;
    var DICTID = 16189;
    var DICT = 16190;
    var TYPE = 16191;
    var TYPEDO = 16192;
    var STORED = 16193;
    var COPY_ = 16194;
    var COPY = 16195;
    var TABLE = 16196;
    var LENLENS = 16197;
    var CODELENS = 16198;
    var LEN_ = 16199;
    var LEN = 16200;
    var LENEXT = 16201;
    var DIST = 16202;
    var DISTEXT = 16203;
    var MATCH = 16204;
    var LIT = 16205;
    var CHECK = 16206;
    var LENGTH = 16207;
    var DONE = 16208;
    var BAD = 16209;
    var MEM = 16210;
    var SYNC = 16211;
    var ENOUGH_LENS = 852;
    var ENOUGH_DISTS = 592;
    var MAX_WBITS = 15;
    var DEF_WBITS = MAX_WBITS;
    var zswap32 = (q) => {
      return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((q & 65280) << 8) + ((q & 255) << 24);
    };
    function InflateState() {
      this.strm = null;
      this.mode = 0;
      this.last = false;
      this.wrap = 0;
      this.havedict = false;
      this.flags = 0;
      this.dmax = 0;
      this.check = 0;
      this.total = 0;
      this.head = null;
      this.wbits = 0;
      this.wsize = 0;
      this.whave = 0;
      this.wnext = 0;
      this.window = null;
      this.hold = 0;
      this.bits = 0;
      this.length = 0;
      this.offset = 0;
      this.extra = 0;
      this.lencode = null;
      this.distcode = null;
      this.lenbits = 0;
      this.distbits = 0;
      this.ncode = 0;
      this.nlen = 0;
      this.ndist = 0;
      this.have = 0;
      this.next = null;
      this.lens = new Uint16Array(320);
      this.work = new Uint16Array(288);
      this.lendyn = null;
      this.distdyn = null;
      this.sane = 0;
      this.back = 0;
      this.was = 0;
    }
    var inflateStateCheck = (strm) => {
      if (!strm) {
        return 1;
      }
      const state = strm.state;
      if (!state || state.strm !== strm || state.mode < HEAD || state.mode > SYNC) {
        return 1;
      }
      return 0;
    };
    var inflateResetKeep = (strm) => {
      if (inflateStateCheck(strm)) {
        return Z_STREAM_ERROR;
      }
      const state = strm.state;
      strm.total_in = strm.total_out = state.total = 0;
      strm.msg = "";
      if (state.wrap) {
        strm.adler = state.wrap & 1;
      }
      state.mode = HEAD;
      state.last = 0;
      state.havedict = 0;
      state.flags = -1;
      state.dmax = 32768;
      state.head = null;
      state.hold = 0;
      state.bits = 0;
      state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
      state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);
      state.sane = 1;
      state.back = -1;
      return Z_OK;
    };
    var inflateReset = (strm) => {
      if (inflateStateCheck(strm)) {
        return Z_STREAM_ERROR;
      }
      const state = strm.state;
      state.wsize = 0;
      state.whave = 0;
      state.wnext = 0;
      return inflateResetKeep(strm);
    };
    var inflateReset2 = (strm, windowBits) => {
      let wrap;
      if (inflateStateCheck(strm)) {
        return Z_STREAM_ERROR;
      }
      const state = strm.state;
      if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
      } else {
        wrap = (windowBits >> 4) + 5;
        if (windowBits < 48) {
          windowBits &= 15;
        }
      }
      if (windowBits && (windowBits < 8 || windowBits > 15)) {
        return Z_STREAM_ERROR;
      }
      if (state.window !== null && state.wbits !== windowBits) {
        state.window = null;
      }
      state.wrap = wrap;
      state.wbits = windowBits;
      return inflateReset(strm);
    };
    var inflateInit2 = (strm, windowBits) => {
      if (!strm) {
        return Z_STREAM_ERROR;
      }
      const state = new InflateState();
      strm.state = state;
      state.strm = strm;
      state.window = null;
      state.mode = HEAD;
      const ret = inflateReset2(strm, windowBits);
      if (ret !== Z_OK) {
        strm.state = null;
      }
      return ret;
    };
    var inflateInit = (strm) => {
      return inflateInit2(strm, DEF_WBITS);
    };
    var virgin = true;
    var lenfix;
    var distfix;
    var fixedtables = (state) => {
      if (virgin) {
        lenfix = new Int32Array(512);
        distfix = new Int32Array(32);
        let sym = 0;
        while (sym < 144) {
          state.lens[sym++] = 8;
        }
        while (sym < 256) {
          state.lens[sym++] = 9;
        }
        while (sym < 280) {
          state.lens[sym++] = 7;
        }
        while (sym < 288) {
          state.lens[sym++] = 8;
        }
        inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, { bits: 9 });
        sym = 0;
        while (sym < 32) {
          state.lens[sym++] = 5;
        }
        inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, { bits: 5 });
        virgin = false;
      }
      state.lencode = lenfix;
      state.lenbits = 9;
      state.distcode = distfix;
      state.distbits = 5;
    };
    var updatewindow = (strm, src, end, copy) => {
      let dist;
      const state = strm.state;
      if (state.window === null) {
        state.wsize = 1 << state.wbits;
        state.wnext = 0;
        state.whave = 0;
        state.window = new Uint8Array(state.wsize);
      }
      if (copy >= state.wsize) {
        state.window.set(src.subarray(end - state.wsize, end), 0);
        state.wnext = 0;
        state.whave = state.wsize;
      } else {
        dist = state.wsize - state.wnext;
        if (dist > copy) {
          dist = copy;
        }
        state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
        copy -= dist;
        if (copy) {
          state.window.set(src.subarray(end - copy, end), 0);
          state.wnext = copy;
          state.whave = state.wsize;
        } else {
          state.wnext += dist;
          if (state.wnext === state.wsize) {
            state.wnext = 0;
          }
          if (state.whave < state.wsize) {
            state.whave += dist;
          }
        }
      }
      return 0;
    };
    var inflate = (strm, flush) => {
      let state;
      let input, output;
      let next;
      let put;
      let have, left;
      let hold;
      let bits;
      let _in, _out;
      let copy;
      let from;
      let from_source;
      let here = 0;
      let here_bits, here_op, here_val;
      let last_bits, last_op, last_val;
      let len;
      let ret;
      const hbuf = new Uint8Array(4);
      let opts;
      let n;
      const order = (
        /* permutation of code lengths */
        new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15])
      );
      if (inflateStateCheck(strm) || !strm.output || !strm.input && strm.avail_in !== 0) {
        return Z_STREAM_ERROR;
      }
      state = strm.state;
      if (state.mode === TYPE) {
        state.mode = TYPEDO;
      }
      put = strm.next_out;
      output = strm.output;
      left = strm.avail_out;
      next = strm.next_in;
      input = strm.input;
      have = strm.avail_in;
      hold = state.hold;
      bits = state.bits;
      _in = have;
      _out = left;
      ret = Z_OK;
      inf_leave:
        for (; ; ) {
          switch (state.mode) {
            case HEAD:
              if (state.wrap === 0) {
                state.mode = TYPEDO;
                break;
              }
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (state.wrap & 2 && hold === 35615) {
                if (state.wbits === 0) {
                  state.wbits = 15;
                }
                state.check = 0;
                hbuf[0] = hold & 255;
                hbuf[1] = hold >>> 8 & 255;
                state.check = crc32(state.check, hbuf, 2, 0);
                hold = 0;
                bits = 0;
                state.mode = FLAGS;
                break;
              }
              if (state.head) {
                state.head.done = false;
              }
              if (!(state.wrap & 1) || /* check if zlib header allowed */
              (((hold & 255) << 8) + (hold >> 8)) % 31) {
                strm.msg = "incorrect header check";
                state.mode = BAD;
                break;
              }
              if ((hold & 15) !== Z_DEFLATED) {
                strm.msg = "unknown compression method";
                state.mode = BAD;
                break;
              }
              hold >>>= 4;
              bits -= 4;
              len = (hold & 15) + 8;
              if (state.wbits === 0) {
                state.wbits = len;
              }
              if (len > 15 || len > state.wbits) {
                strm.msg = "invalid window size";
                state.mode = BAD;
                break;
              }
              state.dmax = 1 << state.wbits;
              state.flags = 0;
              strm.adler = state.check = 1;
              state.mode = hold & 512 ? DICTID : TYPE;
              hold = 0;
              bits = 0;
              break;
            case FLAGS:
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state.flags = hold;
              if ((state.flags & 255) !== Z_DEFLATED) {
                strm.msg = "unknown compression method";
                state.mode = BAD;
                break;
              }
              if (state.flags & 57344) {
                strm.msg = "unknown header flags set";
                state.mode = BAD;
                break;
              }
              if (state.head) {
                state.head.text = hold >> 8 & 1;
              }
              if (state.flags & 512 && state.wrap & 4) {
                hbuf[0] = hold & 255;
                hbuf[1] = hold >>> 8 & 255;
                state.check = crc32(state.check, hbuf, 2, 0);
              }
              hold = 0;
              bits = 0;
              state.mode = TIME;
            case TIME:
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (state.head) {
                state.head.time = hold;
              }
              if (state.flags & 512 && state.wrap & 4) {
                hbuf[0] = hold & 255;
                hbuf[1] = hold >>> 8 & 255;
                hbuf[2] = hold >>> 16 & 255;
                hbuf[3] = hold >>> 24 & 255;
                state.check = crc32(state.check, hbuf, 4, 0);
              }
              hold = 0;
              bits = 0;
              state.mode = OS;
            case OS:
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (state.head) {
                state.head.xflags = hold & 255;
                state.head.os = hold >> 8;
              }
              if (state.flags & 512 && state.wrap & 4) {
                hbuf[0] = hold & 255;
                hbuf[1] = hold >>> 8 & 255;
                state.check = crc32(state.check, hbuf, 2, 0);
              }
              hold = 0;
              bits = 0;
              state.mode = EXLEN;
            case EXLEN:
              if (state.flags & 1024) {
                while (bits < 16) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                state.length = hold;
                if (state.head) {
                  state.head.extra_len = hold;
                }
                if (state.flags & 512 && state.wrap & 4) {
                  hbuf[0] = hold & 255;
                  hbuf[1] = hold >>> 8 & 255;
                  state.check = crc32(state.check, hbuf, 2, 0);
                }
                hold = 0;
                bits = 0;
              } else if (state.head) {
                state.head.extra = null;
              }
              state.mode = EXTRA;
            case EXTRA:
              if (state.flags & 1024) {
                copy = state.length;
                if (copy > have) {
                  copy = have;
                }
                if (copy) {
                  if (state.head) {
                    len = state.head.extra_len - state.length;
                    if (!state.head.extra) {
                      state.head.extra = new Uint8Array(state.head.extra_len);
                    }
                    state.head.extra.set(
                      input.subarray(
                        next,
                        // extra field is limited to 65536 bytes
                        // - no need for additional size check
                        next + copy
                      ),
                      /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                      len
                    );
                  }
                  if (state.flags & 512 && state.wrap & 4) {
                    state.check = crc32(state.check, input, copy, next);
                  }
                  have -= copy;
                  next += copy;
                  state.length -= copy;
                }
                if (state.length) {
                  break inf_leave;
                }
              }
              state.length = 0;
              state.mode = NAME;
            case NAME:
              if (state.flags & 2048) {
                if (have === 0) {
                  break inf_leave;
                }
                copy = 0;
                do {
                  len = input[next + copy++];
                  if (state.head && len && state.length < 65536) {
                    state.head.name += String.fromCharCode(len);
                  }
                } while (len && copy < have);
                if (state.flags & 512 && state.wrap & 4) {
                  state.check = crc32(state.check, input, copy, next);
                }
                have -= copy;
                next += copy;
                if (len) {
                  break inf_leave;
                }
              } else if (state.head) {
                state.head.name = null;
              }
              state.length = 0;
              state.mode = COMMENT;
            case COMMENT:
              if (state.flags & 4096) {
                if (have === 0) {
                  break inf_leave;
                }
                copy = 0;
                do {
                  len = input[next + copy++];
                  if (state.head && len && state.length < 65536) {
                    state.head.comment += String.fromCharCode(len);
                  }
                } while (len && copy < have);
                if (state.flags & 512 && state.wrap & 4) {
                  state.check = crc32(state.check, input, copy, next);
                }
                have -= copy;
                next += copy;
                if (len) {
                  break inf_leave;
                }
              } else if (state.head) {
                state.head.comment = null;
              }
              state.mode = HCRC;
            case HCRC:
              if (state.flags & 512) {
                while (bits < 16) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                if (state.wrap & 4 && hold !== (state.check & 65535)) {
                  strm.msg = "header crc mismatch";
                  state.mode = BAD;
                  break;
                }
                hold = 0;
                bits = 0;
              }
              if (state.head) {
                state.head.hcrc = state.flags >> 9 & 1;
                state.head.done = true;
              }
              strm.adler = state.check = 0;
              state.mode = TYPE;
              break;
            case DICTID:
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              strm.adler = state.check = zswap32(hold);
              hold = 0;
              bits = 0;
              state.mode = DICT;
            case DICT:
              if (state.havedict === 0) {
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits;
                return Z_NEED_DICT;
              }
              strm.adler = state.check = 1;
              state.mode = TYPE;
            case TYPE:
              if (flush === Z_BLOCK || flush === Z_TREES) {
                break inf_leave;
              }
            case TYPEDO:
              if (state.last) {
                hold >>>= bits & 7;
                bits -= bits & 7;
                state.mode = CHECK;
                break;
              }
              while (bits < 3) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state.last = hold & 1;
              hold >>>= 1;
              bits -= 1;
              switch (hold & 3) {
                case 0:
                  state.mode = STORED;
                  break;
                case 1:
                  fixedtables(state);
                  state.mode = LEN_;
                  if (flush === Z_TREES) {
                    hold >>>= 2;
                    bits -= 2;
                    break inf_leave;
                  }
                  break;
                case 2:
                  state.mode = TABLE;
                  break;
                case 3:
                  strm.msg = "invalid block type";
                  state.mode = BAD;
              }
              hold >>>= 2;
              bits -= 2;
              break;
            case STORED:
              hold >>>= bits & 7;
              bits -= bits & 7;
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {
                strm.msg = "invalid stored block lengths";
                state.mode = BAD;
                break;
              }
              state.length = hold & 65535;
              hold = 0;
              bits = 0;
              state.mode = COPY_;
              if (flush === Z_TREES) {
                break inf_leave;
              }
            case COPY_:
              state.mode = COPY;
            case COPY:
              copy = state.length;
              if (copy) {
                if (copy > have) {
                  copy = have;
                }
                if (copy > left) {
                  copy = left;
                }
                if (copy === 0) {
                  break inf_leave;
                }
                output.set(input.subarray(next, next + copy), put);
                have -= copy;
                next += copy;
                left -= copy;
                put += copy;
                state.length -= copy;
                break;
              }
              state.mode = TYPE;
              break;
            case TABLE:
              while (bits < 14) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state.nlen = (hold & 31) + 257;
              hold >>>= 5;
              bits -= 5;
              state.ndist = (hold & 31) + 1;
              hold >>>= 5;
              bits -= 5;
              state.ncode = (hold & 15) + 4;
              hold >>>= 4;
              bits -= 4;
              if (state.nlen > 286 || state.ndist > 30) {
                strm.msg = "too many length or distance symbols";
                state.mode = BAD;
                break;
              }
              state.have = 0;
              state.mode = LENLENS;
            case LENLENS:
              while (state.have < state.ncode) {
                while (bits < 3) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                state.lens[order[state.have++]] = hold & 7;
                hold >>>= 3;
                bits -= 3;
              }
              while (state.have < 19) {
                state.lens[order[state.have++]] = 0;
              }
              state.lencode = state.lendyn;
              state.lenbits = 7;
              opts = { bits: state.lenbits };
              ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
              state.lenbits = opts.bits;
              if (ret) {
                strm.msg = "invalid code lengths set";
                state.mode = BAD;
                break;
              }
              state.have = 0;
              state.mode = CODELENS;
            case CODELENS:
              while (state.have < state.nlen + state.ndist) {
                for (; ; ) {
                  here = state.lencode[hold & (1 << state.lenbits) - 1];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 255;
                  here_val = here & 65535;
                  if (here_bits <= bits) {
                    break;
                  }
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                if (here_val < 16) {
                  hold >>>= here_bits;
                  bits -= here_bits;
                  state.lens[state.have++] = here_val;
                } else {
                  if (here_val === 16) {
                    n = here_bits + 2;
                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    hold >>>= here_bits;
                    bits -= here_bits;
                    if (state.have === 0) {
                      strm.msg = "invalid bit length repeat";
                      state.mode = BAD;
                      break;
                    }
                    len = state.lens[state.have - 1];
                    copy = 3 + (hold & 3);
                    hold >>>= 2;
                    bits -= 2;
                  } else if (here_val === 17) {
                    n = here_bits + 3;
                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    hold >>>= here_bits;
                    bits -= here_bits;
                    len = 0;
                    copy = 3 + (hold & 7);
                    hold >>>= 3;
                    bits -= 3;
                  } else {
                    n = here_bits + 7;
                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    hold >>>= here_bits;
                    bits -= here_bits;
                    len = 0;
                    copy = 11 + (hold & 127);
                    hold >>>= 7;
                    bits -= 7;
                  }
                  if (state.have + copy > state.nlen + state.ndist) {
                    strm.msg = "invalid bit length repeat";
                    state.mode = BAD;
                    break;
                  }
                  while (copy--) {
                    state.lens[state.have++] = len;
                  }
                }
              }
              if (state.mode === BAD) {
                break;
              }
              if (state.lens[256] === 0) {
                strm.msg = "invalid code -- missing end-of-block";
                state.mode = BAD;
                break;
              }
              state.lenbits = 9;
              opts = { bits: state.lenbits };
              ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
              state.lenbits = opts.bits;
              if (ret) {
                strm.msg = "invalid literal/lengths set";
                state.mode = BAD;
                break;
              }
              state.distbits = 6;
              state.distcode = state.distdyn;
              opts = { bits: state.distbits };
              ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
              state.distbits = opts.bits;
              if (ret) {
                strm.msg = "invalid distances set";
                state.mode = BAD;
                break;
              }
              state.mode = LEN_;
              if (flush === Z_TREES) {
                break inf_leave;
              }
            case LEN_:
              state.mode = LEN;
            case LEN:
              if (have >= 6 && left >= 258) {
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits;
                inflate_fast(strm, _out);
                put = strm.next_out;
                output = strm.output;
                left = strm.avail_out;
                next = strm.next_in;
                input = strm.input;
                have = strm.avail_in;
                hold = state.hold;
                bits = state.bits;
                if (state.mode === TYPE) {
                  state.back = -1;
                }
                break;
              }
              state.back = 0;
              for (; ; ) {
                here = state.lencode[hold & (1 << state.lenbits) - 1];
                here_bits = here >>> 24;
                here_op = here >>> 16 & 255;
                here_val = here & 65535;
                if (here_bits <= bits) {
                  break;
                }
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (here_op && (here_op & 240) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;
                for (; ; ) {
                  here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 255;
                  here_val = here & 65535;
                  if (last_bits + here_bits <= bits) {
                    break;
                  }
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= last_bits;
                bits -= last_bits;
                state.back += last_bits;
              }
              hold >>>= here_bits;
              bits -= here_bits;
              state.back += here_bits;
              state.length = here_val;
              if (here_op === 0) {
                state.mode = LIT;
                break;
              }
              if (here_op & 32) {
                state.back = -1;
                state.mode = TYPE;
                break;
              }
              if (here_op & 64) {
                strm.msg = "invalid literal/length code";
                state.mode = BAD;
                break;
              }
              state.extra = here_op & 15;
              state.mode = LENEXT;
            case LENEXT:
              if (state.extra) {
                n = state.extra;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                state.length += hold & (1 << state.extra) - 1;
                hold >>>= state.extra;
                bits -= state.extra;
                state.back += state.extra;
              }
              state.was = state.length;
              state.mode = DIST;
            case DIST:
              for (; ; ) {
                here = state.distcode[hold & (1 << state.distbits) - 1];
                here_bits = here >>> 24;
                here_op = here >>> 16 & 255;
                here_val = here & 65535;
                if (here_bits <= bits) {
                  break;
                }
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if ((here_op & 240) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;
                for (; ; ) {
                  here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 255;
                  here_val = here & 65535;
                  if (last_bits + here_bits <= bits) {
                    break;
                  }
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= last_bits;
                bits -= last_bits;
                state.back += last_bits;
              }
              hold >>>= here_bits;
              bits -= here_bits;
              state.back += here_bits;
              if (here_op & 64) {
                strm.msg = "invalid distance code";
                state.mode = BAD;
                break;
              }
              state.offset = here_val;
              state.extra = here_op & 15;
              state.mode = DISTEXT;
            case DISTEXT:
              if (state.extra) {
                n = state.extra;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                state.offset += hold & (1 << state.extra) - 1;
                hold >>>= state.extra;
                bits -= state.extra;
                state.back += state.extra;
              }
              if (state.offset > state.dmax) {
                strm.msg = "invalid distance too far back";
                state.mode = BAD;
                break;
              }
              state.mode = MATCH;
            case MATCH:
              if (left === 0) {
                break inf_leave;
              }
              copy = _out - left;
              if (state.offset > copy) {
                copy = state.offset - copy;
                if (copy > state.whave) {
                  if (state.sane) {
                    strm.msg = "invalid distance too far back";
                    state.mode = BAD;
                    break;
                  }
                }
                if (copy > state.wnext) {
                  copy -= state.wnext;
                  from = state.wsize - copy;
                } else {
                  from = state.wnext - copy;
                }
                if (copy > state.length) {
                  copy = state.length;
                }
                from_source = state.window;
              } else {
                from_source = output;
                from = put - state.offset;
                copy = state.length;
              }
              if (copy > left) {
                copy = left;
              }
              left -= copy;
              state.length -= copy;
              do {
                output[put++] = from_source[from++];
              } while (--copy);
              if (state.length === 0) {
                state.mode = LEN;
              }
              break;
            case LIT:
              if (left === 0) {
                break inf_leave;
              }
              output[put++] = state.length;
              left--;
              state.mode = LEN;
              break;
            case CHECK:
              if (state.wrap) {
                while (bits < 32) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold |= input[next++] << bits;
                  bits += 8;
                }
                _out -= left;
                strm.total_out += _out;
                state.total += _out;
                if (state.wrap & 4 && _out) {
                  strm.adler = state.check = /*UPDATE_CHECK(state.check, put - _out, _out);*/
                  state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);
                }
                _out = left;
                if (state.wrap & 4 && (state.flags ? hold : zswap32(hold)) !== state.check) {
                  strm.msg = "incorrect data check";
                  state.mode = BAD;
                  break;
                }
                hold = 0;
                bits = 0;
              }
              state.mode = LENGTH;
            case LENGTH:
              if (state.wrap && state.flags) {
                while (bits < 32) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                if (state.wrap & 4 && hold !== (state.total & 4294967295)) {
                  strm.msg = "incorrect length check";
                  state.mode = BAD;
                  break;
                }
                hold = 0;
                bits = 0;
              }
              state.mode = DONE;
            case DONE:
              ret = Z_STREAM_END;
              break inf_leave;
            case BAD:
              ret = Z_DATA_ERROR;
              break inf_leave;
            case MEM:
              return Z_MEM_ERROR;
            case SYNC:
            default:
              return Z_STREAM_ERROR;
          }
        }
      strm.next_out = put;
      strm.avail_out = left;
      strm.next_in = next;
      strm.avail_in = have;
      state.hold = hold;
      state.bits = bits;
      if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {
        if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
          state.mode = MEM;
          return Z_MEM_ERROR;
        }
      }
      _in -= strm.avail_in;
      _out -= strm.avail_out;
      strm.total_in += _in;
      strm.total_out += _out;
      state.total += _out;
      if (state.wrap & 4 && _out) {
        strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/
        state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);
      }
      strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
      if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {
        ret = Z_BUF_ERROR;
      }
      return ret;
    };
    var inflateEnd = (strm) => {
      if (inflateStateCheck(strm)) {
        return Z_STREAM_ERROR;
      }
      let state = strm.state;
      if (state.window) {
        state.window = null;
      }
      strm.state = null;
      return Z_OK;
    };
    var inflateGetHeader = (strm, head) => {
      if (inflateStateCheck(strm)) {
        return Z_STREAM_ERROR;
      }
      const state = strm.state;
      if ((state.wrap & 2) === 0) {
        return Z_STREAM_ERROR;
      }
      state.head = head;
      head.done = false;
      return Z_OK;
    };
    var inflateSetDictionary = (strm, dictionary) => {
      const dictLength = dictionary.length;
      let state;
      let dictid;
      let ret;
      if (inflateStateCheck(strm)) {
        return Z_STREAM_ERROR;
      }
      state = strm.state;
      if (state.wrap !== 0 && state.mode !== DICT) {
        return Z_STREAM_ERROR;
      }
      if (state.mode === DICT) {
        dictid = 1;
        dictid = adler32(dictid, dictionary, dictLength, 0);
        if (dictid !== state.check) {
          return Z_DATA_ERROR;
        }
      }
      ret = updatewindow(strm, dictionary, dictLength, dictLength);
      if (ret) {
        state.mode = MEM;
        return Z_MEM_ERROR;
      }
      state.havedict = 1;
      return Z_OK;
    };
    module.exports.inflateReset = inflateReset;
    module.exports.inflateReset2 = inflateReset2;
    module.exports.inflateResetKeep = inflateResetKeep;
    module.exports.inflateInit = inflateInit;
    module.exports.inflateInit2 = inflateInit2;
    module.exports.inflate = inflate;
    module.exports.inflateEnd = inflateEnd;
    module.exports.inflateGetHeader = inflateGetHeader;
    module.exports.inflateSetDictionary = inflateSetDictionary;
    module.exports.inflateInfo = "pako inflate (from Nodeca project)";
  }
});

// node_modules/pako/lib/zlib/gzheader.js
var require_gzheader = __commonJS({
  "node_modules/pako/lib/zlib/gzheader.js"(exports, module) {
    "use strict";
    function GZheader() {
      this.text = 0;
      this.time = 0;
      this.xflags = 0;
      this.os = 0;
      this.extra = null;
      this.extra_len = 0;
      this.name = "";
      this.comment = "";
      this.hcrc = 0;
      this.done = false;
    }
    module.exports = GZheader;
  }
});

// node_modules/pako/lib/inflate.js
var require_inflate2 = __commonJS({
  "node_modules/pako/lib/inflate.js"(exports, module) {
    "use strict";
    var zlib_inflate = require_inflate();
    var utils = require_common2();
    var strings = require_strings();
    var msg = require_messages();
    var ZStream = require_zstream();
    var GZheader = require_gzheader();
    var toString = Object.prototype.toString;
    var {
      Z_NO_FLUSH,
      Z_FINISH,
      Z_OK,
      Z_STREAM_END,
      Z_NEED_DICT,
      Z_STREAM_ERROR,
      Z_DATA_ERROR,
      Z_MEM_ERROR
    } = require_constants();
    function Inflate(options) {
      this.options = utils.assign({
        chunkSize: 1024 * 64,
        windowBits: 15,
        to: ""
      }, options || {});
      const opt = this.options;
      if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
        opt.windowBits = -opt.windowBits;
        if (opt.windowBits === 0) {
          opt.windowBits = -15;
        }
      }
      if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {
        opt.windowBits += 32;
      }
      if (opt.windowBits > 15 && opt.windowBits < 48) {
        if ((opt.windowBits & 15) === 0) {
          opt.windowBits |= 15;
        }
      }
      this.err = 0;
      this.msg = "";
      this.ended = false;
      this.chunks = [];
      this.strm = new ZStream();
      this.strm.avail_out = 0;
      let status = zlib_inflate.inflateInit2(
        this.strm,
        opt.windowBits
      );
      if (status !== Z_OK) {
        throw new Error(msg[status]);
      }
      this.header = new GZheader();
      zlib_inflate.inflateGetHeader(this.strm, this.header);
      if (opt.dictionary) {
        if (typeof opt.dictionary === "string") {
          opt.dictionary = strings.string2buf(opt.dictionary);
        } else if (toString.call(opt.dictionary) === "[object ArrayBuffer]") {
          opt.dictionary = new Uint8Array(opt.dictionary);
        }
        if (opt.raw) {
          status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);
          if (status !== Z_OK) {
            throw new Error(msg[status]);
          }
        }
      }
    }
    Inflate.prototype.push = function(data, flush_mode) {
      const strm = this.strm;
      const chunkSize = this.options.chunkSize;
      const dictionary = this.options.dictionary;
      let status, _flush_mode, last_avail_out;
      if (this.ended)
        return false;
      if (flush_mode === ~~flush_mode)
        _flush_mode = flush_mode;
      else
        _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;
      if (toString.call(data) === "[object ArrayBuffer]") {
        strm.input = new Uint8Array(data);
      } else {
        strm.input = data;
      }
      strm.next_in = 0;
      strm.avail_in = strm.input.length;
      for (; ; ) {
        if (strm.avail_out === 0) {
          strm.output = new Uint8Array(chunkSize);
          strm.next_out = 0;
          strm.avail_out = chunkSize;
        }
        status = zlib_inflate.inflate(strm, _flush_mode);
        if (status === Z_NEED_DICT && dictionary) {
          status = zlib_inflate.inflateSetDictionary(strm, dictionary);
          if (status === Z_OK) {
            status = zlib_inflate.inflate(strm, _flush_mode);
          } else if (status === Z_DATA_ERROR) {
            status = Z_NEED_DICT;
          }
        }
        while (strm.avail_in > 0 && status === Z_STREAM_END && strm.state.wrap > 0 && data[strm.next_in] !== 0) {
          zlib_inflate.inflateReset(strm);
          status = zlib_inflate.inflate(strm, _flush_mode);
        }
        switch (status) {
          case Z_STREAM_ERROR:
          case Z_DATA_ERROR:
          case Z_NEED_DICT:
          case Z_MEM_ERROR:
            this.onEnd(status);
            this.ended = true;
            return false;
        }
        last_avail_out = strm.avail_out;
        if (strm.next_out) {
          if (strm.avail_out === 0 || status === Z_STREAM_END) {
            if (this.options.to === "string") {
              let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
              let tail = strm.next_out - next_out_utf8;
              let utf8str = strings.buf2string(strm.output, next_out_utf8);
              strm.next_out = tail;
              strm.avail_out = chunkSize - tail;
              if (tail)
                strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);
              this.onData(utf8str);
            } else {
              this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
            }
          }
        }
        if (status === Z_OK && last_avail_out === 0)
          continue;
        if (status === Z_STREAM_END) {
          status = zlib_inflate.inflateEnd(this.strm);
          this.onEnd(status);
          this.ended = true;
          return true;
        }
        if (strm.avail_in === 0)
          break;
      }
      return true;
    };
    Inflate.prototype.onData = function(chunk) {
      this.chunks.push(chunk);
    };
    Inflate.prototype.onEnd = function(status) {
      if (status === Z_OK) {
        if (this.options.to === "string") {
          this.result = this.chunks.join("");
        } else {
          this.result = utils.flattenChunks(this.chunks);
        }
      }
      this.chunks = [];
      this.err = status;
      this.msg = this.strm.msg;
    };
    function inflate(input, options) {
      const inflator = new Inflate(options);
      inflator.push(input);
      if (inflator.err)
        throw inflator.msg || msg[inflator.err];
      return inflator.result;
    }
    function inflateRaw(input, options) {
      options = options || {};
      options.raw = true;
      return inflate(input, options);
    }
    module.exports.Inflate = Inflate;
    module.exports.inflate = inflate;
    module.exports.inflateRaw = inflateRaw;
    module.exports.ungzip = inflate;
    module.exports.constants = require_constants();
  }
});

// node_modules/pako/index.js
var require_pako = __commonJS({
  "node_modules/pako/index.js"(exports, module) {
    "use strict";
    var { Deflate, deflate, deflateRaw, gzip } = require_deflate2();
    var { Inflate, inflate, inflateRaw, ungzip } = require_inflate2();
    var constants = require_constants();
    module.exports.Deflate = Deflate;
    module.exports.deflate = deflate;
    module.exports.deflateRaw = deflateRaw;
    module.exports.gzip = gzip;
    module.exports.Inflate = Inflate;
    module.exports.inflate = inflate;
    module.exports.inflateRaw = inflateRaw;
    module.exports.ungzip = ungzip;
    module.exports.constants = constants;
  }
});

// node_modules/@mtproto/core/src/tl/parser/index.js
var require_parser = __commonJS({
  "node_modules/@mtproto/core/src/tl/parser/index.js"(exports, module) {
    var parserMap = /* @__PURE__ */ new Map([
      [481674261, function() {
        return this.vector(this.predicate, true);
      }],
      [85337187, function() {
        const result = { _: "mt_resPQ" };
        result.nonce = this.int128();
        result.server_nonce = this.int128();
        result.pq = this.bytes();
        result.server_public_key_fingerprints = this.vector(this.long, false);
        return result;
      }],
      [2211011308, function() {
        const result = { _: "mt_p_q_inner_data" };
        result.pq = this.bytes();
        result.p = this.bytes();
        result.q = this.bytes();
        result.nonce = this.int128();
        result.server_nonce = this.int128();
        result.new_nonce = this.int256();
        return result;
      }],
      [2851430293, function() {
        const result = { _: "mt_p_q_inner_data_dc" };
        result.pq = this.bytes();
        result.p = this.bytes();
        result.q = this.bytes();
        result.nonce = this.int128();
        result.server_nonce = this.int128();
        result.new_nonce = this.int256();
        result.dc = this.int();
        return result;
      }],
      [1013613780, function() {
        const result = { _: "mt_p_q_inner_data_temp" };
        result.pq = this.bytes();
        result.p = this.bytes();
        result.q = this.bytes();
        result.nonce = this.int128();
        result.server_nonce = this.int128();
        result.new_nonce = this.int256();
        result.expires_in = this.int();
        return result;
      }],
      [1459478408, function() {
        const result = { _: "mt_p_q_inner_data_temp_dc" };
        result.pq = this.bytes();
        result.p = this.bytes();
        result.q = this.bytes();
        result.nonce = this.int128();
        result.server_nonce = this.int128();
        result.new_nonce = this.int256();
        result.dc = this.int();
        result.expires_in = this.int();
        return result;
      }],
      [2043348061, function() {
        const result = { _: "mt_server_DH_params_fail" };
        result.nonce = this.int128();
        result.server_nonce = this.int128();
        result.new_nonce_hash = this.int128();
        return result;
      }],
      [3504867164, function() {
        const result = { _: "mt_server_DH_params_ok" };
        result.nonce = this.int128();
        result.server_nonce = this.int128();
        result.encrypted_answer = this.bytes();
        return result;
      }],
      [3045658042, function() {
        const result = { _: "mt_server_DH_inner_data" };
        result.nonce = this.int128();
        result.server_nonce = this.int128();
        result.g = this.int();
        result.dh_prime = this.bytes();
        result.g_a = this.bytes();
        result.server_time = this.int();
        return result;
      }],
      [1715713620, function() {
        const result = { _: "mt_client_DH_inner_data" };
        result.nonce = this.int128();
        result.server_nonce = this.int128();
        result.retry_id = this.long();
        result.g_b = this.bytes();
        return result;
      }],
      [1003222836, function() {
        const result = { _: "mt_dh_gen_ok" };
        result.nonce = this.int128();
        result.server_nonce = this.int128();
        result.new_nonce_hash1 = this.int128();
        return result;
      }],
      [1188831161, function() {
        const result = { _: "mt_dh_gen_retry" };
        result.nonce = this.int128();
        result.server_nonce = this.int128();
        result.new_nonce_hash2 = this.int128();
        return result;
      }],
      [2795351554, function() {
        const result = { _: "mt_dh_gen_fail" };
        result.nonce = this.int128();
        result.server_nonce = this.int128();
        result.new_nonce_hash3 = this.int128();
        return result;
      }],
      [4082920705, function() {
        const result = { _: "mt_rpc_result" };
        result.req_msg_id = this.long();
        result.result = this.predicate();
        return result;
      }],
      [558156313, function() {
        const result = { _: "mt_rpc_error" };
        result.error_code = this.int();
        result.error_message = this.string();
        return result;
      }],
      [1579864942, function() {
        const result = { _: "mt_rpc_answer_unknown" };
        return result;
      }],
      [3447252358, function() {
        const result = { _: "mt_rpc_answer_dropped_running" };
        return result;
      }],
      [2755319991, function() {
        const result = { _: "mt_rpc_answer_dropped" };
        result.msg_id = this.long();
        result.seq_no = this.int();
        result.bytes = this.int();
        return result;
      }],
      [155834844, function() {
        const result = { _: "mt_future_salt" };
        result.valid_since = this.int();
        result.valid_until = this.int();
        result.salt = this.long();
        return result;
      }],
      [2924480661, function() {
        const result = { _: "mt_future_salts" };
        result.req_msg_id = this.long();
        result.now = this.int();
        result.salts = this.vector(this.predicate, false);
        return result;
      }],
      [880243653, function() {
        const result = { _: "mt_pong" };
        result.msg_id = this.long();
        result.ping_id = this.long();
        return result;
      }],
      [2663516424, function() {
        const result = { _: "mt_new_session_created" };
        result.first_msg_id = this.long();
        result.unique_id = this.long();
        result.server_salt = this.long();
        return result;
      }],
      [1945237724, function() {
        const result = { _: "mt_msg_container" };
        result.messages = this.vector(this.mt_message, true);
        return result;
      }],
      [1538843921, function() {
        const result = { _: "mt_message" };
        result.msg_id = this.long();
        result.seqno = this.int();
        result.bytes = this.int();
        result.body = this.predicate();
        return result;
      }],
      [3764405938, function() {
        const result = { _: "mt_msg_copy" };
        result.orig_message = this.predicate();
        return result;
      }],
      [812830625, function() {
        return this.gzip();
      }],
      [1658238041, function() {
        const result = { _: "mt_msgs_ack" };
        result.msg_ids = this.vector(this.long, false);
        return result;
      }],
      [2817521681, function() {
        const result = { _: "mt_bad_msg_notification" };
        result.bad_msg_id = this.long();
        result.bad_msg_seqno = this.int();
        result.error_code = this.int();
        return result;
      }],
      [3987424379, function() {
        const result = { _: "mt_bad_server_salt" };
        result.bad_msg_id = this.long();
        result.bad_msg_seqno = this.int();
        result.error_code = this.int();
        result.new_server_salt = this.long();
        return result;
      }],
      [2105940488, function() {
        const result = { _: "mt_msg_resend_req" };
        result.msg_ids = this.vector(this.long, false);
        return result;
      }],
      [2249243371, function() {
        const result = { _: "mt_msg_resend_ans_req" };
        result.msg_ids = this.vector(this.long, false);
        return result;
      }],
      [3664378706, function() {
        const result = { _: "mt_msgs_state_req" };
        result.msg_ids = this.vector(this.long, false);
        return result;
      }],
      [81704317, function() {
        const result = { _: "mt_msgs_state_info" };
        result.req_msg_id = this.long();
        result.info = this.bytes();
        return result;
      }],
      [2361446705, function() {
        const result = { _: "mt_msgs_all_info" };
        result.msg_ids = this.vector(this.long, false);
        result.info = this.bytes();
        return result;
      }],
      [661470918, function() {
        const result = { _: "mt_msg_detailed_info" };
        result.msg_id = this.long();
        result.answer_msg_id = this.long();
        result.bytes = this.int();
        result.status = this.int();
        return result;
      }],
      [2157819615, function() {
        const result = { _: "mt_msg_new_detailed_info" };
        result.answer_msg_id = this.long();
        result.bytes = this.int();
        result.status = this.int();
        return result;
      }],
      [1973679973, function() {
        const result = { _: "mt_bind_auth_key_inner" };
        result.nonce = this.long();
        result.temp_auth_key_id = this.long();
        result.perm_auth_key_id = this.long();
        result.temp_session_id = this.long();
        result.expires_at = this.int();
        return result;
      }],
      [4133544404, function() {
        const result = { _: "mt_destroy_auth_key_ok" };
        return result;
      }],
      [178201177, function() {
        const result = { _: "mt_destroy_auth_key_none" };
        return result;
      }],
      [3926956819, function() {
        const result = { _: "mt_destroy_auth_key_fail" };
        return result;
      }],
      [3793765884, function() {
        const result = { _: "mt_destroy_session_ok" };
        result.session_id = this.long();
        return result;
      }],
      [1658015945, function() {
        const result = { _: "mt_destroy_session_none" };
        result.session_id = this.long();
        return result;
      }],
      [3162085175, function() {
        return false;
      }],
      [2574415285, function() {
        return true;
      }],
      [1072550713, function() {
        return true;
      }],
      [481674261, function() {
        return this.vector(this.predicate, true);
      }],
      [3300522427, function() {
        const result = { _: "error" };
        result.code = this.int();
        result.text = this.string();
        return result;
      }],
      [1450380236, function() {
        return null;
      }],
      [2134579434, function() {
        const result = { _: "inputPeerEmpty" };
        return result;
      }],
      [2107670217, function() {
        const result = { _: "inputPeerSelf" };
        return result;
      }],
      [900291769, function() {
        const result = { _: "inputPeerChat" };
        result.chat_id = this.long();
        return result;
      }],
      [3112732367, function() {
        const result = { _: "inputUserEmpty" };
        return result;
      }],
      [4156666175, function() {
        const result = { _: "inputUserSelf" };
        return result;
      }],
      [4086478836, function() {
        const result = { _: "inputPhoneContact" };
        result.client_id = this.long();
        result.phone = this.string();
        result.first_name = this.string();
        result.last_name = this.string();
        return result;
      }],
      [4113560191, function() {
        const result = { _: "inputFile" };
        result.id = this.long();
        result.parts = this.int();
        result.name = this.string();
        result.md5_checksum = this.string();
        return result;
      }],
      [2523198847, function() {
        const result = { _: "inputMediaEmpty" };
        return result;
      }],
      [505969924, function() {
        const result = { _: "inputMediaUploadedPhoto" };
        result.flags = this.int();
        result.spoiler = !!(result.flags & 4);
        result.file = this.predicate();
        if (result.flags & 1)
          result.stickers = this.vector(this.predicate);
        if (result.flags & 2)
          result.ttl_seconds = this.int();
        return result;
      }],
      [3015312949, function() {
        const result = { _: "inputMediaPhoto" };
        result.flags = this.int();
        result.spoiler = !!(result.flags & 2);
        result.id = this.predicate();
        if (result.flags & 1)
          result.ttl_seconds = this.int();
        return result;
      }],
      [4190388548, function() {
        const result = { _: "inputMediaGeoPoint" };
        result.geo_point = this.predicate();
        return result;
      }],
      [4171988475, function() {
        const result = { _: "inputMediaContact" };
        result.phone_number = this.string();
        result.first_name = this.string();
        result.last_name = this.string();
        result.vcard = this.string();
        return result;
      }],
      [480546647, function() {
        const result = { _: "inputChatPhotoEmpty" };
        return result;
      }],
      [3184373440, function() {
        const result = { _: "inputChatUploadedPhoto" };
        result.flags = this.int();
        if (result.flags & 1)
          result.file = this.predicate();
        if (result.flags & 2)
          result.video = this.predicate();
        if (result.flags & 4)
          result.video_start_ts = this.double();
        if (result.flags & 8)
          result.video_emoji_markup = this.predicate();
        return result;
      }],
      [2303962423, function() {
        const result = { _: "inputChatPhoto" };
        result.id = this.predicate();
        return result;
      }],
      [3837862870, function() {
        const result = { _: "inputGeoPointEmpty" };
        return result;
      }],
      [1210199983, function() {
        const result = { _: "inputGeoPoint" };
        result.flags = this.int();
        result.lat = this.double();
        result.long = this.double();
        if (result.flags & 1)
          result.accuracy_radius = this.int();
        return result;
      }],
      [483901197, function() {
        const result = { _: "inputPhotoEmpty" };
        return result;
      }],
      [1001634122, function() {
        const result = { _: "inputPhoto" };
        result.id = this.long();
        result.access_hash = this.long();
        result.file_reference = this.bytes();
        return result;
      }],
      [3755650017, function() {
        const result = { _: "inputFileLocation" };
        result.volume_id = this.long();
        result.local_id = this.int();
        result.secret = this.long();
        result.file_reference = this.bytes();
        return result;
      }],
      [1498486562, function() {
        const result = { _: "peerUser" };
        result.user_id = this.long();
        return result;
      }],
      [918946202, function() {
        const result = { _: "peerChat" };
        result.chat_id = this.long();
        return result;
      }],
      [2861972229, function() {
        const result = { _: "storage.fileUnknown" };
        return result;
      }],
      [1086091090, function() {
        const result = { _: "storage.filePartial" };
        return result;
      }],
      [8322574, function() {
        const result = { _: "storage.fileJpeg" };
        return result;
      }],
      [3403786975, function() {
        const result = { _: "storage.fileGif" };
        return result;
      }],
      [172975040, function() {
        const result = { _: "storage.filePng" };
        return result;
      }],
      [2921222285, function() {
        const result = { _: "storage.filePdf" };
        return result;
      }],
      [1384777335, function() {
        const result = { _: "storage.fileMp3" };
        return result;
      }],
      [1258941372, function() {
        const result = { _: "storage.fileMov" };
        return result;
      }],
      [3016663268, function() {
        const result = { _: "storage.fileMp4" };
        return result;
      }],
      [276907596, function() {
        const result = { _: "storage.fileWebp" };
        return result;
      }],
      [3552332666, function() {
        const result = { _: "userEmpty" };
        result.id = this.long();
        return result;
      }],
      [1326562017, function() {
        const result = { _: "userProfilePhotoEmpty" };
        return result;
      }],
      [2194798342, function() {
        const result = { _: "userProfilePhoto" };
        result.flags = this.int();
        result.has_video = !!(result.flags & 1);
        result.personal = !!(result.flags & 4);
        result.photo_id = this.long();
        if (result.flags & 2)
          result.stripped_thumb = this.bytes();
        result.dc_id = this.int();
        return result;
      }],
      [164646985, function() {
        const result = { _: "userStatusEmpty" };
        return result;
      }],
      [3988339017, function() {
        const result = { _: "userStatusOnline" };
        result.expires = this.int();
        return result;
      }],
      [9203775, function() {
        const result = { _: "userStatusOffline" };
        result.was_online = this.int();
        return result;
      }],
      [693512293, function() {
        const result = { _: "chatEmpty" };
        result.id = this.long();
        return result;
      }],
      [1103884886, function() {
        const result = { _: "chat" };
        result.flags = this.int();
        result.creator = !!(result.flags & 1);
        result.left = !!(result.flags & 4);
        result.deactivated = !!(result.flags & 32);
        result.call_active = !!(result.flags & 8388608);
        result.call_not_empty = !!(result.flags & 16777216);
        result.noforwards = !!(result.flags & 33554432);
        result.id = this.long();
        result.title = this.string();
        result.photo = this.predicate();
        result.participants_count = this.int();
        result.date = this.int();
        result.version = this.int();
        if (result.flags & 64)
          result.migrated_to = this.predicate();
        if (result.flags & 16384)
          result.admin_rights = this.predicate();
        if (result.flags & 262144)
          result.default_banned_rights = this.predicate();
        return result;
      }],
      [1704108455, function() {
        const result = { _: "chatForbidden" };
        result.id = this.long();
        result.title = this.string();
        return result;
      }],
      [3386052920, function() {
        const result = { _: "chatFull" };
        result.flags = this.int();
        result.can_set_username = !!(result.flags & 128);
        result.has_scheduled = !!(result.flags & 256);
        result.translations_disabled = !!(result.flags & 524288);
        result.id = this.long();
        result.about = this.string();
        result.participants = this.predicate();
        if (result.flags & 4)
          result.chat_photo = this.predicate();
        result.notify_settings = this.predicate();
        if (result.flags & 8192)
          result.exported_invite = this.predicate();
        if (result.flags & 8)
          result.bot_info = this.vector(this.predicate);
        if (result.flags & 64)
          result.pinned_msg_id = this.int();
        if (result.flags & 2048)
          result.folder_id = this.int();
        if (result.flags & 4096)
          result.call = this.predicate();
        if (result.flags & 16384)
          result.ttl_period = this.int();
        if (result.flags & 32768)
          result.groupcall_default_join_as = this.predicate();
        if (result.flags & 65536)
          result.theme_emoticon = this.string();
        if (result.flags & 131072)
          result.requests_pending = this.int();
        if (result.flags & 131072)
          result.recent_requesters = this.vector(this.long);
        if (result.flags & 262144)
          result.available_reactions = this.predicate();
        return result;
      }],
      [3224190983, function() {
        const result = { _: "chatParticipant" };
        result.user_id = this.long();
        result.inviter_id = this.long();
        result.date = this.int();
        return result;
      }],
      [2271466465, function() {
        const result = { _: "chatParticipantsForbidden" };
        result.flags = this.int();
        result.chat_id = this.long();
        if (result.flags & 1)
          result.self_participant = this.predicate();
        return result;
      }],
      [1018991608, function() {
        const result = { _: "chatParticipants" };
        result.chat_id = this.long();
        result.participants = this.vector(this.predicate, false);
        result.version = this.int();
        return result;
      }],
      [935395612, function() {
        const result = { _: "chatPhotoEmpty" };
        return result;
      }],
      [476978193, function() {
        const result = { _: "chatPhoto" };
        result.flags = this.int();
        result.has_video = !!(result.flags & 1);
        result.photo_id = this.long();
        if (result.flags & 2)
          result.stripped_thumb = this.bytes();
        result.dc_id = this.int();
        return result;
      }],
      [2426849924, function() {
        const result = { _: "messageEmpty" };
        result.flags = this.int();
        result.id = this.int();
        if (result.flags & 1)
          result.peer_id = this.predicate();
        return result;
      }],
      [940666592, function() {
        const result = { _: "message" };
        result.flags = this.int();
        result.out = !!(result.flags & 2);
        result.mentioned = !!(result.flags & 16);
        result.media_unread = !!(result.flags & 32);
        result.silent = !!(result.flags & 8192);
        result.post = !!(result.flags & 16384);
        result.from_scheduled = !!(result.flags & 262144);
        result.legacy = !!(result.flags & 524288);
        result.edit_hide = !!(result.flags & 2097152);
        result.pinned = !!(result.flags & 16777216);
        result.noforwards = !!(result.flags & 67108864);
        result.id = this.int();
        if (result.flags & 256)
          result.from_id = this.predicate();
        result.peer_id = this.predicate();
        if (result.flags & 4)
          result.fwd_from = this.predicate();
        if (result.flags & 2048)
          result.via_bot_id = this.long();
        if (result.flags & 8)
          result.reply_to = this.predicate();
        result.date = this.int();
        result.message = this.string();
        if (result.flags & 512)
          result.media = this.predicate();
        if (result.flags & 64)
          result.reply_markup = this.predicate();
        if (result.flags & 128)
          result.entities = this.vector(this.predicate);
        if (result.flags & 1024)
          result.views = this.int();
        if (result.flags & 1024)
          result.forwards = this.int();
        if (result.flags & 8388608)
          result.replies = this.predicate();
        if (result.flags & 32768)
          result.edit_date = this.int();
        if (result.flags & 65536)
          result.post_author = this.string();
        if (result.flags & 131072)
          result.grouped_id = this.long();
        if (result.flags & 1048576)
          result.reactions = this.predicate();
        if (result.flags & 4194304)
          result.restriction_reason = this.vector(this.predicate);
        if (result.flags & 33554432)
          result.ttl_period = this.int();
        return result;
      }],
      [721967202, function() {
        const result = { _: "messageService" };
        result.flags = this.int();
        result.out = !!(result.flags & 2);
        result.mentioned = !!(result.flags & 16);
        result.media_unread = !!(result.flags & 32);
        result.silent = !!(result.flags & 8192);
        result.post = !!(result.flags & 16384);
        result.legacy = !!(result.flags & 524288);
        result.id = this.int();
        if (result.flags & 256)
          result.from_id = this.predicate();
        result.peer_id = this.predicate();
        if (result.flags & 8)
          result.reply_to = this.predicate();
        result.date = this.int();
        result.action = this.predicate();
        if (result.flags & 33554432)
          result.ttl_period = this.int();
        return result;
      }],
      [1038967584, function() {
        const result = { _: "messageMediaEmpty" };
        return result;
      }],
      [1766936791, function() {
        const result = { _: "messageMediaPhoto" };
        result.flags = this.int();
        result.spoiler = !!(result.flags & 8);
        if (result.flags & 1)
          result.photo = this.predicate();
        if (result.flags & 4)
          result.ttl_seconds = this.int();
        return result;
      }],
      [1457575028, function() {
        const result = { _: "messageMediaGeo" };
        result.geo = this.predicate();
        return result;
      }],
      [1882335561, function() {
        const result = { _: "messageMediaContact" };
        result.phone_number = this.string();
        result.first_name = this.string();
        result.last_name = this.string();
        result.vcard = this.string();
        result.user_id = this.long();
        return result;
      }],
      [2676290718, function() {
        const result = { _: "messageMediaUnsupported" };
        return result;
      }],
      [3064919984, function() {
        const result = { _: "messageActionEmpty" };
        return result;
      }],
      [3175599021, function() {
        const result = { _: "messageActionChatCreate" };
        result.title = this.string();
        result.users = this.vector(this.long, false);
        return result;
      }],
      [3047280218, function() {
        const result = { _: "messageActionChatEditTitle" };
        result.title = this.string();
        return result;
      }],
      [2144015272, function() {
        const result = { _: "messageActionChatEditPhoto" };
        result.photo = this.predicate();
        return result;
      }],
      [2514746351, function() {
        const result = { _: "messageActionChatDeletePhoto" };
        return result;
      }],
      [365886720, function() {
        const result = { _: "messageActionChatAddUser" };
        result.users = this.vector(this.long, false);
        return result;
      }],
      [2755604684, function() {
        const result = { _: "messageActionChatDeleteUser" };
        result.user_id = this.long();
        return result;
      }],
      [3582593222, function() {
        const result = { _: "dialog" };
        result.flags = this.int();
        result.pinned = !!(result.flags & 4);
        result.unread_mark = !!(result.flags & 8);
        result.peer = this.predicate();
        result.top_message = this.int();
        result.read_inbox_max_id = this.int();
        result.read_outbox_max_id = this.int();
        result.unread_count = this.int();
        result.unread_mentions_count = this.int();
        result.unread_reactions_count = this.int();
        result.notify_settings = this.predicate();
        if (result.flags & 1)
          result.pts = this.int();
        if (result.flags & 2)
          result.draft = this.predicate();
        if (result.flags & 16)
          result.folder_id = this.int();
        if (result.flags & 32)
          result.ttl_period = this.int();
        return result;
      }],
      [590459437, function() {
        const result = { _: "photoEmpty" };
        result.id = this.long();
        return result;
      }],
      [4212750949, function() {
        const result = { _: "photo" };
        result.flags = this.int();
        result.has_stickers = !!(result.flags & 1);
        result.id = this.long();
        result.access_hash = this.long();
        result.file_reference = this.bytes();
        result.date = this.int();
        result.sizes = this.vector(this.predicate, false);
        if (result.flags & 2)
          result.video_sizes = this.vector(this.predicate);
        result.dc_id = this.int();
        return result;
      }],
      [236446268, function() {
        const result = { _: "photoSizeEmpty" };
        result.type = this.string();
        return result;
      }],
      [1976012384, function() {
        const result = { _: "photoSize" };
        result.type = this.string();
        result.w = this.int();
        result.h = this.int();
        result.size = this.int();
        return result;
      }],
      [35527382, function() {
        const result = { _: "photoCachedSize" };
        result.type = this.string();
        result.w = this.int();
        result.h = this.int();
        result.bytes = this.bytes();
        return result;
      }],
      [286776671, function() {
        const result = { _: "geoPointEmpty" };
        return result;
      }],
      [2997024355, function() {
        const result = { _: "geoPoint" };
        result.flags = this.int();
        result.long = this.double();
        result.lat = this.double();
        result.access_hash = this.long();
        if (result.flags & 1)
          result.accuracy_radius = this.int();
        return result;
      }],
      [1577067778, function() {
        const result = { _: "auth.sentCode" };
        result.flags = this.int();
        result.type = this.predicate();
        result.phone_code_hash = this.string();
        if (result.flags & 2)
          result.next_type = this.predicate();
        if (result.flags & 4)
          result.timeout = this.int();
        return result;
      }],
      [782418132, function() {
        const result = { _: "auth.authorization" };
        result.flags = this.int();
        result.setup_password_required = !!(result.flags & 2);
        if (result.flags & 2)
          result.otherwise_relogin_days = this.int();
        if (result.flags & 1)
          result.tmp_sessions = this.int();
        if (result.flags & 4)
          result.future_auth_token = this.bytes();
        result.user = this.predicate();
        return result;
      }],
      [3023364792, function() {
        const result = { _: "auth.exportedAuthorization" };
        result.id = this.long();
        result.bytes = this.bytes();
        return result;
      }],
      [3099351820, function() {
        const result = { _: "inputNotifyPeer" };
        result.peer = this.predicate();
        return result;
      }],
      [423314455, function() {
        const result = { _: "inputNotifyUsers" };
        return result;
      }],
      [1251338318, function() {
        const result = { _: "inputNotifyChats" };
        return result;
      }],
      [3743350827, function() {
        const result = { _: "inputPeerNotifySettings" };
        result.flags = this.int();
        if (result.flags & 1)
          result.show_previews = this.predicate();
        if (result.flags & 2)
          result.silent = this.predicate();
        if (result.flags & 4)
          result.mute_until = this.int();
        if (result.flags & 8)
          result.sound = this.predicate();
        return result;
      }],
      [2822439974, function() {
        const result = { _: "peerNotifySettings" };
        result.flags = this.int();
        if (result.flags & 1)
          result.show_previews = this.predicate();
        if (result.flags & 2)
          result.silent = this.predicate();
        if (result.flags & 4)
          result.mute_until = this.int();
        if (result.flags & 8)
          result.ios_sound = this.predicate();
        if (result.flags & 16)
          result.android_sound = this.predicate();
        if (result.flags & 32)
          result.other_sound = this.predicate();
        return result;
      }],
      [2769817869, function() {
        const result = { _: "peerSettings" };
        result.flags = this.int();
        result.report_spam = !!(result.flags & 1);
        result.add_contact = !!(result.flags & 2);
        result.block_contact = !!(result.flags & 4);
        result.share_contact = !!(result.flags & 8);
        result.need_contacts_exception = !!(result.flags & 16);
        result.report_geo = !!(result.flags & 32);
        result.autoarchived = !!(result.flags & 128);
        result.invite_members = !!(result.flags & 256);
        result.request_chat_broadcast = !!(result.flags & 1024);
        if (result.flags & 64)
          result.geo_distance = this.int();
        if (result.flags & 512)
          result.request_chat_title = this.string();
        if (result.flags & 512)
          result.request_chat_date = this.int();
        return result;
      }],
      [2755118061, function() {
        const result = { _: "wallPaper" };
        result.id = this.long();
        result.flags = this.int();
        result.creator = !!(result.flags & 1);
        result.default = !!(result.flags & 2);
        result.pattern = !!(result.flags & 8);
        result.dark = !!(result.flags & 16);
        result.access_hash = this.long();
        result.slug = this.string();
        result.document = this.predicate();
        if (result.flags & 4)
          result.settings = this.predicate();
        return result;
      }],
      [1490799288, function() {
        const result = { _: "inputReportReasonSpam" };
        return result;
      }],
      [505595789, function() {
        const result = { _: "inputReportReasonViolence" };
        return result;
      }],
      [777640226, function() {
        const result = { _: "inputReportReasonPornography" };
        return result;
      }],
      [2918469347, function() {
        const result = { _: "inputReportReasonChildAbuse" };
        return result;
      }],
      [3252986545, function() {
        const result = { _: "inputReportReasonOther" };
        return result;
      }],
      [2481642323, function() {
        const result = { _: "userFull" };
        result.flags = this.int();
        result.blocked = !!(result.flags & 1);
        result.phone_calls_available = !!(result.flags & 16);
        result.phone_calls_private = !!(result.flags & 32);
        result.can_pin_message = !!(result.flags & 128);
        result.has_scheduled = !!(result.flags & 4096);
        result.video_calls_available = !!(result.flags & 8192);
        result.voice_messages_forbidden = !!(result.flags & 1048576);
        result.translations_disabled = !!(result.flags & 8388608);
        result.id = this.long();
        if (result.flags & 2)
          result.about = this.string();
        result.settings = this.predicate();
        if (result.flags & 2097152)
          result.personal_photo = this.predicate();
        if (result.flags & 4)
          result.profile_photo = this.predicate();
        if (result.flags & 4194304)
          result.fallback_photo = this.predicate();
        result.notify_settings = this.predicate();
        if (result.flags & 8)
          result.bot_info = this.predicate();
        if (result.flags & 64)
          result.pinned_msg_id = this.int();
        result.common_chats_count = this.int();
        if (result.flags & 2048)
          result.folder_id = this.int();
        if (result.flags & 16384)
          result.ttl_period = this.int();
        if (result.flags & 32768)
          result.theme_emoticon = this.string();
        if (result.flags & 65536)
          result.private_forward_name = this.string();
        if (result.flags & 131072)
          result.bot_group_admin_rights = this.predicate();
        if (result.flags & 262144)
          result.bot_broadcast_admin_rights = this.predicate();
        if (result.flags & 524288)
          result.premium_gifts = this.vector(this.predicate);
        if (result.flags & 16777216)
          result.wallpaper = this.predicate();
        return result;
      }],
      [341499403, function() {
        const result = { _: "contact" };
        result.user_id = this.long();
        result.mutual = this.predicate();
        return result;
      }],
      [3242081360, function() {
        const result = { _: "importedContact" };
        result.user_id = this.long();
        result.client_id = this.long();
        return result;
      }],
      [383348795, function() {
        const result = { _: "contactStatus" };
        result.user_id = this.long();
        result.status = this.predicate();
        return result;
      }],
      [3075189202, function() {
        const result = { _: "contacts.contactsNotModified" };
        return result;
      }],
      [3941105218, function() {
        const result = { _: "contacts.contacts" };
        result.contacts = this.vector(this.predicate, false);
        result.saved_count = this.int();
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [2010127419, function() {
        const result = { _: "contacts.importedContacts" };
        result.imported = this.vector(this.predicate, false);
        result.popular_invites = this.vector(this.predicate, false);
        result.retry_contacts = this.vector(this.long, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [182326673, function() {
        const result = { _: "contacts.blocked" };
        result.blocked = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [3781575060, function() {
        const result = { _: "contacts.blockedSlice" };
        result.count = this.int();
        result.blocked = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [364538944, function() {
        const result = { _: "messages.dialogs" };
        result.dialogs = this.vector(this.predicate, false);
        result.messages = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [1910543603, function() {
        const result = { _: "messages.dialogsSlice" };
        result.count = this.int();
        result.dialogs = this.vector(this.predicate, false);
        result.messages = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [2356252295, function() {
        const result = { _: "messages.messages" };
        result.messages = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [978610270, function() {
        const result = { _: "messages.messagesSlice" };
        result.flags = this.int();
        result.inexact = !!(result.flags & 2);
        result.count = this.int();
        if (result.flags & 1)
          result.next_rate = this.int();
        if (result.flags & 4)
          result.offset_id_offset = this.int();
        result.messages = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [1694474197, function() {
        const result = { _: "messages.chats" };
        result.chats = this.vector(this.predicate, false);
        return result;
      }],
      [3856126364, function() {
        const result = { _: "messages.chatFull" };
        result.full_chat = this.predicate();
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [3025955281, function() {
        const result = { _: "messages.affectedHistory" };
        result.pts = this.int();
        result.pts_count = this.int();
        result.offset = this.int();
        return result;
      }],
      [1474492012, function() {
        const result = { _: "inputMessagesFilterEmpty" };
        return result;
      }],
      [2517214492, function() {
        const result = { _: "inputMessagesFilterPhotos" };
        return result;
      }],
      [2680163941, function() {
        const result = { _: "inputMessagesFilterVideo" };
        return result;
      }],
      [1458172132, function() {
        const result = { _: "inputMessagesFilterPhotoVideo" };
        return result;
      }],
      [2665345416, function() {
        const result = { _: "inputMessagesFilterDocument" };
        return result;
      }],
      [2129714567, function() {
        const result = { _: "inputMessagesFilterUrl" };
        return result;
      }],
      [4291323271, function() {
        const result = { _: "inputMessagesFilterGif" };
        return result;
      }],
      [522914557, function() {
        const result = { _: "updateNewMessage" };
        result.message = this.predicate();
        result.pts = this.int();
        result.pts_count = this.int();
        return result;
      }],
      [1318109142, function() {
        const result = { _: "updateMessageID" };
        result.id = this.int();
        result.random_id = this.long();
        return result;
      }],
      [2718806245, function() {
        const result = { _: "updateDeleteMessages" };
        result.messages = this.vector(this.int, false);
        result.pts = this.int();
        result.pts_count = this.int();
        return result;
      }],
      [3223225727, function() {
        const result = { _: "updateUserTyping" };
        result.user_id = this.long();
        result.action = this.predicate();
        return result;
      }],
      [2202565360, function() {
        const result = { _: "updateChatUserTyping" };
        result.chat_id = this.long();
        result.from_id = this.predicate();
        result.action = this.predicate();
        return result;
      }],
      [125178264, function() {
        const result = { _: "updateChatParticipants" };
        result.participants = this.predicate();
        return result;
      }],
      [3854432478, function() {
        const result = { _: "updateUserStatus" };
        result.user_id = this.long();
        result.status = this.predicate();
        return result;
      }],
      [2810480932, function() {
        const result = { _: "updateUserName" };
        result.user_id = this.long();
        result.first_name = this.string();
        result.last_name = this.string();
        result.usernames = this.vector(this.predicate, false);
        return result;
      }],
      [2775329342, function() {
        const result = { _: "updates.state" };
        result.pts = this.int();
        result.qts = this.int();
        result.date = this.int();
        result.seq = this.int();
        result.unread_count = this.int();
        return result;
      }],
      [1567990072, function() {
        const result = { _: "updates.differenceEmpty" };
        result.date = this.int();
        result.seq = this.int();
        return result;
      }],
      [16030880, function() {
        const result = { _: "updates.difference" };
        result.new_messages = this.vector(this.predicate, false);
        result.new_encrypted_messages = this.vector(this.predicate, false);
        result.other_updates = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        result.state = this.predicate();
        return result;
      }],
      [2835028353, function() {
        const result = { _: "updates.differenceSlice" };
        result.new_messages = this.vector(this.predicate, false);
        result.new_encrypted_messages = this.vector(this.predicate, false);
        result.other_updates = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        result.intermediate_state = this.predicate();
        return result;
      }],
      [3809980286, function() {
        const result = { _: "updatesTooLong" };
        return result;
      }],
      [826001400, function() {
        const result = { _: "updateShortMessage" };
        result.flags = this.int();
        result.out = !!(result.flags & 2);
        result.mentioned = !!(result.flags & 16);
        result.media_unread = !!(result.flags & 32);
        result.silent = !!(result.flags & 8192);
        result.id = this.int();
        result.user_id = this.long();
        result.message = this.string();
        result.pts = this.int();
        result.pts_count = this.int();
        result.date = this.int();
        if (result.flags & 4)
          result.fwd_from = this.predicate();
        if (result.flags & 2048)
          result.via_bot_id = this.long();
        if (result.flags & 8)
          result.reply_to = this.predicate();
        if (result.flags & 128)
          result.entities = this.vector(this.predicate);
        if (result.flags & 33554432)
          result.ttl_period = this.int();
        return result;
      }],
      [1299050149, function() {
        const result = { _: "updateShortChatMessage" };
        result.flags = this.int();
        result.out = !!(result.flags & 2);
        result.mentioned = !!(result.flags & 16);
        result.media_unread = !!(result.flags & 32);
        result.silent = !!(result.flags & 8192);
        result.id = this.int();
        result.from_id = this.long();
        result.chat_id = this.long();
        result.message = this.string();
        result.pts = this.int();
        result.pts_count = this.int();
        result.date = this.int();
        if (result.flags & 4)
          result.fwd_from = this.predicate();
        if (result.flags & 2048)
          result.via_bot_id = this.long();
        if (result.flags & 8)
          result.reply_to = this.predicate();
        if (result.flags & 128)
          result.entities = this.vector(this.predicate);
        if (result.flags & 33554432)
          result.ttl_period = this.int();
        return result;
      }],
      [2027216577, function() {
        const result = { _: "updateShort" };
        result.update = this.predicate();
        result.date = this.int();
        return result;
      }],
      [1918567619, function() {
        const result = { _: "updatesCombined" };
        result.updates = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.date = this.int();
        result.seq_start = this.int();
        result.seq = this.int();
        return result;
      }],
      [1957577280, function() {
        const result = { _: "updates" };
        result.updates = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.date = this.int();
        result.seq = this.int();
        return result;
      }],
      [2378853029, function() {
        const result = { _: "photos.photos" };
        result.photos = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [352657236, function() {
        const result = { _: "photos.photosSlice" };
        result.count = this.int();
        result.photos = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [539045032, function() {
        const result = { _: "photos.photo" };
        result.photo = this.predicate();
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [157948117, function() {
        const result = { _: "upload.file" };
        result.type = this.predicate();
        result.mtime = this.int();
        result.bytes = this.bytes();
        return result;
      }],
      [414687501, function() {
        const result = { _: "dcOption" };
        result.flags = this.int();
        result.ipv6 = !!(result.flags & 1);
        result.media_only = !!(result.flags & 2);
        result.tcpo_only = !!(result.flags & 4);
        result.cdn = !!(result.flags & 8);
        result.static = !!(result.flags & 16);
        result.this_port_only = !!(result.flags & 32);
        result.id = this.int();
        result.ip_address = this.string();
        result.port = this.int();
        if (result.flags & 1024)
          result.secret = this.bytes();
        return result;
      }],
      [3424265246, function() {
        const result = { _: "config" };
        result.flags = this.int();
        result.default_p2p_contacts = !!(result.flags & 8);
        result.preload_featured_stickers = !!(result.flags & 16);
        result.revoke_pm_inbox = !!(result.flags & 64);
        result.blocked_mode = !!(result.flags & 256);
        result.force_try_ipv6 = !!(result.flags & 16384);
        result.date = this.int();
        result.expires = this.int();
        result.test_mode = this.predicate();
        result.this_dc = this.int();
        result.dc_options = this.vector(this.predicate, false);
        result.dc_txt_domain_name = this.string();
        result.chat_size_max = this.int();
        result.megagroup_size_max = this.int();
        result.forwarded_count_max = this.int();
        result.online_update_period_ms = this.int();
        result.offline_blur_timeout_ms = this.int();
        result.offline_idle_timeout_ms = this.int();
        result.online_cloud_timeout_ms = this.int();
        result.notify_cloud_delay_ms = this.int();
        result.notify_default_delay_ms = this.int();
        result.push_chat_period_ms = this.int();
        result.push_chat_limit = this.int();
        result.edit_time_limit = this.int();
        result.revoke_time_limit = this.int();
        result.revoke_pm_time_limit = this.int();
        result.rating_e_decay = this.int();
        result.stickers_recent_limit = this.int();
        result.channels_read_media_period = this.int();
        if (result.flags & 1)
          result.tmp_sessions = this.int();
        result.call_receive_timeout_ms = this.int();
        result.call_ring_timeout_ms = this.int();
        result.call_connect_timeout_ms = this.int();
        result.call_packet_timeout_ms = this.int();
        result.me_url_prefix = this.string();
        if (result.flags & 128)
          result.autoupdate_url_prefix = this.string();
        if (result.flags & 512)
          result.gif_search_username = this.string();
        if (result.flags & 1024)
          result.venue_search_username = this.string();
        if (result.flags & 2048)
          result.img_search_username = this.string();
        if (result.flags & 4096)
          result.static_maps_provider = this.string();
        result.caption_length_max = this.int();
        result.message_length_max = this.int();
        result.webfile_dc_id = this.int();
        if (result.flags & 4)
          result.suggested_lang_code = this.string();
        if (result.flags & 4)
          result.lang_pack_version = this.int();
        if (result.flags & 4)
          result.base_lang_pack_version = this.int();
        if (result.flags & 32768)
          result.reactions_default = this.predicate();
        if (result.flags & 65536)
          result.autologin_token = this.string();
        return result;
      }],
      [2384074613, function() {
        const result = { _: "nearestDc" };
        result.country = this.string();
        result.this_dc = this.int();
        result.nearest_dc = this.int();
        return result;
      }],
      [3434860080, function() {
        const result = { _: "help.appUpdate" };
        result.flags = this.int();
        result.can_not_skip = !!(result.flags & 1);
        result.id = this.int();
        result.version = this.string();
        result.text = this.string();
        result.entities = this.vector(this.predicate, false);
        if (result.flags & 2)
          result.document = this.predicate();
        if (result.flags & 4)
          result.url = this.string();
        if (result.flags & 8)
          result.sticker = this.predicate();
        return result;
      }],
      [3294258486, function() {
        const result = { _: "help.noAppUpdate" };
        return result;
      }],
      [415997816, function() {
        const result = { _: "help.inviteText" };
        result.message = this.string();
        return result;
      }],
      [314359194, function() {
        const result = { _: "updateNewEncryptedMessage" };
        result.message = this.predicate();
        result.qts = this.int();
        return result;
      }],
      [386986326, function() {
        const result = { _: "updateEncryptedChatTyping" };
        result.chat_id = this.int();
        return result;
      }],
      [3030575245, function() {
        const result = { _: "updateEncryption" };
        result.chat = this.predicate();
        result.date = this.int();
        return result;
      }],
      [956179895, function() {
        const result = { _: "updateEncryptedMessagesRead" };
        result.chat_id = this.int();
        result.max_date = this.int();
        result.date = this.int();
        return result;
      }],
      [2877210784, function() {
        const result = { _: "encryptedChatEmpty" };
        result.id = this.int();
        return result;
      }],
      [1722964307, function() {
        const result = { _: "encryptedChatWaiting" };
        result.id = this.int();
        result.access_hash = this.long();
        result.date = this.int();
        result.admin_id = this.long();
        result.participant_id = this.long();
        return result;
      }],
      [1223809356, function() {
        const result = { _: "encryptedChatRequested" };
        result.flags = this.int();
        if (result.flags & 1)
          result.folder_id = this.int();
        result.id = this.int();
        result.access_hash = this.long();
        result.date = this.int();
        result.admin_id = this.long();
        result.participant_id = this.long();
        result.g_a = this.bytes();
        return result;
      }],
      [1643173063, function() {
        const result = { _: "encryptedChat" };
        result.id = this.int();
        result.access_hash = this.long();
        result.date = this.int();
        result.admin_id = this.long();
        result.participant_id = this.long();
        result.g_a_or_b = this.bytes();
        result.key_fingerprint = this.long();
        return result;
      }],
      [505183301, function() {
        const result = { _: "encryptedChatDiscarded" };
        result.flags = this.int();
        result.history_deleted = !!(result.flags & 1);
        result.id = this.int();
        return result;
      }],
      [4047615457, function() {
        const result = { _: "inputEncryptedChat" };
        result.chat_id = this.int();
        result.access_hash = this.long();
        return result;
      }],
      [3256830334, function() {
        const result = { _: "encryptedFileEmpty" };
        return result;
      }],
      [2818608344, function() {
        const result = { _: "encryptedFile" };
        result.id = this.long();
        result.access_hash = this.long();
        result.size = this.long();
        result.dc_id = this.int();
        result.key_fingerprint = this.int();
        return result;
      }],
      [406307684, function() {
        const result = { _: "inputEncryptedFileEmpty" };
        return result;
      }],
      [1690108678, function() {
        const result = { _: "inputEncryptedFileUploaded" };
        result.id = this.long();
        result.parts = this.int();
        result.md5_checksum = this.string();
        result.key_fingerprint = this.int();
        return result;
      }],
      [1511503333, function() {
        const result = { _: "inputEncryptedFile" };
        result.id = this.long();
        result.access_hash = this.long();
        return result;
      }],
      [4112735573, function() {
        const result = { _: "inputEncryptedFileLocation" };
        result.id = this.long();
        result.access_hash = this.long();
        return result;
      }],
      [3977822488, function() {
        const result = { _: "encryptedMessage" };
        result.random_id = this.long();
        result.chat_id = this.int();
        result.date = this.int();
        result.bytes = this.bytes();
        result.file = this.predicate();
        return result;
      }],
      [594758406, function() {
        const result = { _: "encryptedMessageService" };
        result.random_id = this.long();
        result.chat_id = this.int();
        result.date = this.int();
        result.bytes = this.bytes();
        return result;
      }],
      [3236054581, function() {
        const result = { _: "messages.dhConfigNotModified" };
        result.random = this.bytes();
        return result;
      }],
      [740433629, function() {
        const result = { _: "messages.dhConfig" };
        result.g = this.int();
        result.p = this.bytes();
        result.version = this.int();
        result.random = this.bytes();
        return result;
      }],
      [1443858741, function() {
        const result = { _: "messages.sentEncryptedMessage" };
        result.date = this.int();
        return result;
      }],
      [2492727090, function() {
        const result = { _: "messages.sentEncryptedFile" };
        result.date = this.int();
        result.file = this.predicate();
        return result;
      }],
      [4199484341, function() {
        const result = { _: "inputFileBig" };
        result.id = this.long();
        result.parts = this.int();
        result.name = this.string();
        return result;
      }],
      [767652808, function() {
        const result = { _: "inputEncryptedFileBigUploaded" };
        result.id = this.long();
        result.parts = this.int();
        result.key_fingerprint = this.int();
        return result;
      }],
      [1037718609, function() {
        const result = { _: "updateChatParticipantAdd" };
        result.chat_id = this.long();
        result.user_id = this.long();
        result.inviter_id = this.long();
        result.date = this.int();
        result.version = this.int();
        return result;
      }],
      [3811523959, function() {
        const result = { _: "updateChatParticipantDelete" };
        result.chat_id = this.long();
        result.user_id = this.long();
        result.version = this.int();
        return result;
      }],
      [2388564083, function() {
        const result = { _: "updateDcOptions" };
        result.dc_options = this.vector(this.predicate, false);
        return result;
      }],
      [1530447553, function() {
        const result = { _: "inputMediaUploadedDocument" };
        result.flags = this.int();
        result.nosound_video = !!(result.flags & 8);
        result.force_file = !!(result.flags & 16);
        result.spoiler = !!(result.flags & 32);
        result.file = this.predicate();
        if (result.flags & 4)
          result.thumb = this.predicate();
        result.mime_type = this.string();
        result.attributes = this.vector(this.predicate, false);
        if (result.flags & 1)
          result.stickers = this.vector(this.predicate);
        if (result.flags & 2)
          result.ttl_seconds = this.int();
        return result;
      }],
      [860303448, function() {
        const result = { _: "inputMediaDocument" };
        result.flags = this.int();
        result.spoiler = !!(result.flags & 4);
        result.id = this.predicate();
        if (result.flags & 1)
          result.ttl_seconds = this.int();
        if (result.flags & 2)
          result.query = this.string();
        return result;
      }],
      [2628808919, function() {
        const result = { _: "messageMediaDocument" };
        result.flags = this.int();
        result.nopremium = !!(result.flags & 8);
        result.spoiler = !!(result.flags & 16);
        if (result.flags & 1)
          result.document = this.predicate();
        if (result.flags & 4)
          result.ttl_seconds = this.int();
        return result;
      }],
      [1928391342, function() {
        const result = { _: "inputDocumentEmpty" };
        return result;
      }],
      [448771445, function() {
        const result = { _: "inputDocument" };
        result.id = this.long();
        result.access_hash = this.long();
        result.file_reference = this.bytes();
        return result;
      }],
      [3134223748, function() {
        const result = { _: "inputDocumentFileLocation" };
        result.id = this.long();
        result.access_hash = this.long();
        result.file_reference = this.bytes();
        result.thumb_size = this.string();
        return result;
      }],
      [922273905, function() {
        const result = { _: "documentEmpty" };
        result.id = this.long();
        return result;
      }],
      [2413085912, function() {
        const result = { _: "document" };
        result.flags = this.int();
        result.id = this.long();
        result.access_hash = this.long();
        result.file_reference = this.bytes();
        result.date = this.int();
        result.mime_type = this.string();
        result.size = this.long();
        if (result.flags & 1)
          result.thumbs = this.vector(this.predicate);
        if (result.flags & 2)
          result.video_thumbs = this.vector(this.predicate);
        result.dc_id = this.int();
        result.attributes = this.vector(this.predicate, false);
        return result;
      }],
      [398898678, function() {
        const result = { _: "help.support" };
        result.phone_number = this.string();
        result.user = this.predicate();
        return result;
      }],
      [2681474008, function() {
        const result = { _: "notifyPeer" };
        result.peer = this.predicate();
        return result;
      }],
      [3033021260, function() {
        const result = { _: "notifyUsers" };
        return result;
      }],
      [3221737155, function() {
        const result = { _: "notifyChats" };
        return result;
      }],
      [3200411887, function() {
        const result = { _: "updateNotifySettings" };
        result.peer = this.predicate();
        result.notify_settings = this.predicate();
        return result;
      }],
      [381645902, function() {
        const result = { _: "sendMessageTypingAction" };
        return result;
      }],
      [4250847477, function() {
        const result = { _: "sendMessageCancelAction" };
        return result;
      }],
      [2710034031, function() {
        const result = { _: "sendMessageRecordVideoAction" };
        return result;
      }],
      [3916839660, function() {
        const result = { _: "sendMessageUploadVideoAction" };
        result.progress = this.int();
        return result;
      }],
      [3576656887, function() {
        const result = { _: "sendMessageRecordAudioAction" };
        return result;
      }],
      [4082227115, function() {
        const result = { _: "sendMessageUploadAudioAction" };
        result.progress = this.int();
        return result;
      }],
      [3520285222, function() {
        const result = { _: "sendMessageUploadPhotoAction" };
        result.progress = this.int();
        return result;
      }],
      [2852968932, function() {
        const result = { _: "sendMessageUploadDocumentAction" };
        result.progress = this.int();
        return result;
      }],
      [393186209, function() {
        const result = { _: "sendMessageGeoLocationAction" };
        return result;
      }],
      [1653390447, function() {
        const result = { _: "sendMessageChooseContactAction" };
        return result;
      }],
      [3004386717, function() {
        const result = { _: "contacts.found" };
        result.my_results = this.vector(this.predicate, false);
        result.results = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [3957614617, function() {
        const result = { _: "updateServiceNotification" };
        result.flags = this.int();
        result.popup = !!(result.flags & 1);
        if (result.flags & 2)
          result.inbox_date = this.int();
        result.type = this.string();
        result.message = this.string();
        result.media = this.predicate();
        result.entities = this.vector(this.predicate, false);
        return result;
      }],
      [3798942449, function() {
        const result = { _: "userStatusRecently" };
        return result;
      }],
      [129960444, function() {
        const result = { _: "userStatusLastWeek" };
        return result;
      }],
      [2011940674, function() {
        const result = { _: "userStatusLastMonth" };
        return result;
      }],
      [3996854058, function() {
        const result = { _: "updatePrivacy" };
        result.key = this.predicate();
        result.rules = this.vector(this.predicate, false);
        return result;
      }],
      [1335282456, function() {
        const result = { _: "inputPrivacyKeyStatusTimestamp" };
        return result;
      }],
      [3157175088, function() {
        const result = { _: "privacyKeyStatusTimestamp" };
        return result;
      }],
      [218751099, function() {
        const result = { _: "inputPrivacyValueAllowContacts" };
        return result;
      }],
      [407582158, function() {
        const result = { _: "inputPrivacyValueAllowAll" };
        return result;
      }],
      [320652927, function() {
        const result = { _: "inputPrivacyValueAllowUsers" };
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [195371015, function() {
        const result = { _: "inputPrivacyValueDisallowContacts" };
        return result;
      }],
      [3597362889, function() {
        const result = { _: "inputPrivacyValueDisallowAll" };
        return result;
      }],
      [2417034343, function() {
        const result = { _: "inputPrivacyValueDisallowUsers" };
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [4294843308, function() {
        const result = { _: "privacyValueAllowContacts" };
        return result;
      }],
      [1698855810, function() {
        const result = { _: "privacyValueAllowAll" };
        return result;
      }],
      [3096469426, function() {
        const result = { _: "privacyValueAllowUsers" };
        result.users = this.vector(this.long, false);
        return result;
      }],
      [4169726490, function() {
        const result = { _: "privacyValueDisallowContacts" };
        return result;
      }],
      [2339628899, function() {
        const result = { _: "privacyValueDisallowAll" };
        return result;
      }],
      [3831632193, function() {
        const result = { _: "privacyValueDisallowUsers" };
        result.users = this.vector(this.long, false);
        return result;
      }],
      [1352683077, function() {
        const result = { _: "account.privacyRules" };
        result.rules = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [3100684255, function() {
        const result = { _: "accountDaysTTL" };
        result.days = this.int();
        return result;
      }],
      [88680979, function() {
        const result = { _: "updateUserPhone" };
        result.user_id = this.long();
        result.phone = this.string();
        return result;
      }],
      [1815593308, function() {
        const result = { _: "documentAttributeImageSize" };
        result.w = this.int();
        result.h = this.int();
        return result;
      }],
      [297109817, function() {
        const result = { _: "documentAttributeAnimated" };
        return result;
      }],
      [1662637586, function() {
        const result = { _: "documentAttributeSticker" };
        result.flags = this.int();
        result.mask = !!(result.flags & 2);
        result.alt = this.string();
        result.stickerset = this.predicate();
        if (result.flags & 1)
          result.mask_coords = this.predicate();
        return result;
      }],
      [250621158, function() {
        const result = { _: "documentAttributeVideo" };
        result.flags = this.int();
        result.round_message = !!(result.flags & 1);
        result.supports_streaming = !!(result.flags & 2);
        result.duration = this.int();
        result.w = this.int();
        result.h = this.int();
        return result;
      }],
      [2555574726, function() {
        const result = { _: "documentAttributeAudio" };
        result.flags = this.int();
        result.voice = !!(result.flags & 1024);
        result.duration = this.int();
        if (result.flags & 1)
          result.title = this.string();
        if (result.flags & 2)
          result.performer = this.string();
        if (result.flags & 4)
          result.waveform = this.bytes();
        return result;
      }],
      [358154344, function() {
        const result = { _: "documentAttributeFilename" };
        result.file_name = this.string();
        return result;
      }],
      [4050950690, function() {
        const result = { _: "messages.stickersNotModified" };
        return result;
      }],
      [816245886, function() {
        const result = { _: "messages.stickers" };
        result.hash = this.long();
        result.stickers = this.vector(this.predicate, false);
        return result;
      }],
      [313694676, function() {
        const result = { _: "stickerPack" };
        result.emoticon = this.string();
        result.documents = this.vector(this.long, false);
        return result;
      }],
      [3898999491, function() {
        const result = { _: "messages.allStickersNotModified" };
        return result;
      }],
      [3451637435, function() {
        const result = { _: "messages.allStickers" };
        result.hash = this.long();
        result.sets = this.vector(this.predicate, false);
        return result;
      }],
      [2627162079, function() {
        const result = { _: "updateReadHistoryInbox" };
        result.flags = this.int();
        if (result.flags & 1)
          result.folder_id = this.int();
        result.peer = this.predicate();
        result.max_id = this.int();
        result.still_unread_count = this.int();
        result.pts = this.int();
        result.pts_count = this.int();
        return result;
      }],
      [791617983, function() {
        const result = { _: "updateReadHistoryOutbox" };
        result.peer = this.predicate();
        result.max_id = this.int();
        result.pts = this.int();
        result.pts_count = this.int();
        return result;
      }],
      [2228326789, function() {
        const result = { _: "messages.affectedMessages" };
        result.pts = this.int();
        result.pts_count = this.int();
        return result;
      }],
      [2139689491, function() {
        const result = { _: "updateWebPage" };
        result.webpage = this.predicate();
        result.pts = this.int();
        result.pts_count = this.int();
        return result;
      }],
      [3943987176, function() {
        const result = { _: "webPageEmpty" };
        result.id = this.long();
        return result;
      }],
      [3313949212, function() {
        const result = { _: "webPagePending" };
        result.id = this.long();
        result.date = this.int();
        return result;
      }],
      [3902555570, function() {
        const result = { _: "webPage" };
        result.flags = this.int();
        result.id = this.long();
        result.url = this.string();
        result.display_url = this.string();
        result.hash = this.int();
        if (result.flags & 1)
          result.type = this.string();
        if (result.flags & 2)
          result.site_name = this.string();
        if (result.flags & 4)
          result.title = this.string();
        if (result.flags & 8)
          result.description = this.string();
        if (result.flags & 16)
          result.photo = this.predicate();
        if (result.flags & 32)
          result.embed_url = this.string();
        if (result.flags & 32)
          result.embed_type = this.string();
        if (result.flags & 64)
          result.embed_width = this.int();
        if (result.flags & 64)
          result.embed_height = this.int();
        if (result.flags & 128)
          result.duration = this.int();
        if (result.flags & 256)
          result.author = this.string();
        if (result.flags & 512)
          result.document = this.predicate();
        if (result.flags & 1024)
          result.cached_page = this.predicate();
        if (result.flags & 4096)
          result.attributes = this.vector(this.predicate);
        return result;
      }],
      [2737690112, function() {
        const result = { _: "messageMediaWebPage" };
        result.webpage = this.predicate();
        return result;
      }],
      [2902578717, function() {
        const result = { _: "authorization" };
        result.flags = this.int();
        result.current = !!(result.flags & 1);
        result.official_app = !!(result.flags & 2);
        result.password_pending = !!(result.flags & 4);
        result.encrypted_requests_disabled = !!(result.flags & 8);
        result.call_requests_disabled = !!(result.flags & 16);
        result.hash = this.long();
        result.device_model = this.string();
        result.platform = this.string();
        result.system_version = this.string();
        result.api_id = this.int();
        result.app_name = this.string();
        result.app_version = this.string();
        result.date_created = this.int();
        result.date_active = this.int();
        result.ip = this.string();
        result.country = this.string();
        result.region = this.string();
        return result;
      }],
      [1275039392, function() {
        const result = { _: "account.authorizations" };
        result.authorization_ttl_days = this.int();
        result.authorizations = this.vector(this.predicate, false);
        return result;
      }],
      [2507886843, function() {
        const result = { _: "account.password" };
        result.flags = this.int();
        result.has_recovery = !!(result.flags & 1);
        result.has_secure_values = !!(result.flags & 2);
        result.has_password = !!(result.flags & 4);
        if (result.flags & 4)
          result.current_algo = this.predicate();
        if (result.flags & 4)
          result.srp_B = this.bytes();
        if (result.flags & 4)
          result.srp_id = this.long();
        if (result.flags & 8)
          result.hint = this.string();
        if (result.flags & 16)
          result.email_unconfirmed_pattern = this.string();
        result.new_algo = this.predicate();
        result.new_secure_algo = this.predicate();
        result.secure_random = this.bytes();
        if (result.flags & 32)
          result.pending_reset_date = this.int();
        if (result.flags & 64)
          result.login_email_pattern = this.string();
        return result;
      }],
      [2589733861, function() {
        const result = { _: "account.passwordSettings" };
        result.flags = this.int();
        if (result.flags & 1)
          result.email = this.string();
        if (result.flags & 2)
          result.secure_settings = this.predicate();
        return result;
      }],
      [3258394569, function() {
        const result = { _: "account.passwordInputSettings" };
        result.flags = this.int();
        if (result.flags & 1)
          result.new_algo = this.predicate();
        if (result.flags & 1)
          result.new_password_hash = this.bytes();
        if (result.flags & 1)
          result.hint = this.string();
        if (result.flags & 2)
          result.email = this.string();
        if (result.flags & 4)
          result.new_secure_settings = this.predicate();
        return result;
      }],
      [326715557, function() {
        const result = { _: "auth.passwordRecovery" };
        result.email_pattern = this.string();
        return result;
      }],
      [3242007569, function() {
        const result = { _: "inputMediaVenue" };
        result.geo_point = this.predicate();
        result.title = this.string();
        result.address = this.string();
        result.provider = this.string();
        result.venue_id = this.string();
        result.venue_type = this.string();
        return result;
      }],
      [784356159, function() {
        const result = { _: "messageMediaVenue" };
        result.geo = this.predicate();
        result.title = this.string();
        result.address = this.string();
        result.provider = this.string();
        result.venue_id = this.string();
        result.venue_type = this.string();
        return result;
      }],
      [2743383929, function() {
        const result = { _: "receivedNotifyMessage" };
        result.id = this.int();
        result.flags = this.int();
        return result;
      }],
      [179611673, function() {
        const result = { _: "chatInviteExported" };
        result.flags = this.int();
        result.revoked = !!(result.flags & 1);
        result.permanent = !!(result.flags & 32);
        result.request_needed = !!(result.flags & 64);
        result.link = this.string();
        result.admin_id = this.long();
        result.date = this.int();
        if (result.flags & 16)
          result.start_date = this.int();
        if (result.flags & 2)
          result.expire_date = this.int();
        if (result.flags & 4)
          result.usage_limit = this.int();
        if (result.flags & 8)
          result.usage = this.int();
        if (result.flags & 128)
          result.requested = this.int();
        if (result.flags & 256)
          result.title = this.string();
        return result;
      }],
      [1516793212, function() {
        const result = { _: "chatInviteAlready" };
        result.chat = this.predicate();
        return result;
      }],
      [806110401, function() {
        const result = { _: "chatInvite" };
        result.flags = this.int();
        result.channel = !!(result.flags & 1);
        result.broadcast = !!(result.flags & 2);
        result.public = !!(result.flags & 4);
        result.megagroup = !!(result.flags & 8);
        result.request_needed = !!(result.flags & 64);
        result.title = this.string();
        if (result.flags & 32)
          result.about = this.string();
        result.photo = this.predicate();
        result.participants_count = this.int();
        if (result.flags & 16)
          result.participants = this.vector(this.predicate);
        return result;
      }],
      [51520707, function() {
        const result = { _: "messageActionChatJoinedByLink" };
        result.inviter_id = this.long();
        return result;
      }],
      [1757493555, function() {
        const result = { _: "updateReadMessagesContents" };
        result.messages = this.vector(this.int, false);
        result.pts = this.int();
        result.pts_count = this.int();
        return result;
      }],
      [4290128789, function() {
        const result = { _: "inputStickerSetEmpty" };
        return result;
      }],
      [2649203305, function() {
        const result = { _: "inputStickerSetID" };
        result.id = this.long();
        result.access_hash = this.long();
        return result;
      }],
      [2250033312, function() {
        const result = { _: "inputStickerSetShortName" };
        result.short_name = this.string();
        return result;
      }],
      [768691932, function() {
        const result = { _: "stickerSet" };
        result.flags = this.int();
        result.archived = !!(result.flags & 2);
        result.official = !!(result.flags & 4);
        result.masks = !!(result.flags & 8);
        result.animated = !!(result.flags & 32);
        result.videos = !!(result.flags & 64);
        result.emojis = !!(result.flags & 128);
        if (result.flags & 1)
          result.installed_date = this.int();
        result.id = this.long();
        result.access_hash = this.long();
        result.title = this.string();
        result.short_name = this.string();
        if (result.flags & 16)
          result.thumbs = this.vector(this.predicate);
        if (result.flags & 16)
          result.thumb_dc_id = this.int();
        if (result.flags & 16)
          result.thumb_version = this.int();
        if (result.flags & 256)
          result.thumb_document_id = this.long();
        result.count = this.int();
        result.hash = this.int();
        return result;
      }],
      [1846886166, function() {
        const result = { _: "messages.stickerSet" };
        result.set = this.predicate();
        result.packs = this.vector(this.predicate, false);
        result.keywords = this.vector(this.predicate, false);
        result.documents = this.vector(this.predicate, false);
        return result;
      }],
      [2409088552, function() {
        const result = { _: "user" };
        result.flags = this.int();
        result.self = !!(result.flags & 1024);
        result.contact = !!(result.flags & 2048);
        result.mutual_contact = !!(result.flags & 4096);
        result.deleted = !!(result.flags & 8192);
        result.bot = !!(result.flags & 16384);
        result.bot_chat_history = !!(result.flags & 32768);
        result.bot_nochats = !!(result.flags & 65536);
        result.verified = !!(result.flags & 131072);
        result.restricted = !!(result.flags & 262144);
        result.min = !!(result.flags & 1048576);
        result.bot_inline_geo = !!(result.flags & 2097152);
        result.support = !!(result.flags & 8388608);
        result.scam = !!(result.flags & 16777216);
        result.apply_min_photo = !!(result.flags & 33554432);
        result.fake = !!(result.flags & 67108864);
        result.bot_attach_menu = !!(result.flags & 134217728);
        result.premium = !!(result.flags & 268435456);
        result.attach_menu_enabled = !!(result.flags & 536870912);
        result.flags2 = this.int();
        result.bot_can_edit = !!(result.flags2 & 2);
        result.id = this.long();
        if (result.flags & 1)
          result.access_hash = this.long();
        if (result.flags & 2)
          result.first_name = this.string();
        if (result.flags & 4)
          result.last_name = this.string();
        if (result.flags & 8)
          result.username = this.string();
        if (result.flags & 16)
          result.phone = this.string();
        if (result.flags & 32)
          result.photo = this.predicate();
        if (result.flags & 64)
          result.status = this.predicate();
        if (result.flags & 16384)
          result.bot_info_version = this.int();
        if (result.flags & 262144)
          result.restriction_reason = this.vector(this.predicate);
        if (result.flags & 524288)
          result.bot_inline_placeholder = this.string();
        if (result.flags & 4194304)
          result.lang_code = this.string();
        if (result.flags & 1073741824)
          result.emoji_status = this.predicate();
        if (result.flags2 & 1)
          result.usernames = this.vector(this.predicate);
        return result;
      }],
      [3262826695, function() {
        const result = { _: "botCommand" };
        result.command = this.string();
        result.description = this.string();
        return result;
      }],
      [2402290519, function() {
        const result = { _: "botInfo" };
        result.flags = this.int();
        if (result.flags & 1)
          result.user_id = this.long();
        if (result.flags & 2)
          result.description = this.string();
        if (result.flags & 16)
          result.description_photo = this.predicate();
        if (result.flags & 32)
          result.description_document = this.predicate();
        if (result.flags & 4)
          result.commands = this.vector(this.predicate);
        if (result.flags & 8)
          result.menu_button = this.predicate();
        return result;
      }],
      [2734311552, function() {
        const result = { _: "keyboardButton" };
        result.text = this.string();
        return result;
      }],
      [2002815875, function() {
        const result = { _: "keyboardButtonRow" };
        result.buttons = this.vector(this.predicate, false);
        return result;
      }],
      [2688441221, function() {
        const result = { _: "replyKeyboardHide" };
        result.flags = this.int();
        result.selective = !!(result.flags & 4);
        return result;
      }],
      [2259946248, function() {
        const result = { _: "replyKeyboardForceReply" };
        result.flags = this.int();
        result.single_use = !!(result.flags & 2);
        result.selective = !!(result.flags & 4);
        if (result.flags & 8)
          result.placeholder = this.string();
        return result;
      }],
      [2245892561, function() {
        const result = { _: "replyKeyboardMarkup" };
        result.flags = this.int();
        result.resize = !!(result.flags & 1);
        result.single_use = !!(result.flags & 2);
        result.selective = !!(result.flags & 4);
        result.persistent = !!(result.flags & 16);
        result.rows = this.vector(this.predicate, false);
        if (result.flags & 8)
          result.placeholder = this.string();
        return result;
      }],
      [3723011404, function() {
        const result = { _: "inputPeerUser" };
        result.user_id = this.long();
        result.access_hash = this.long();
        return result;
      }],
      [4061223110, function() {
        const result = { _: "inputUser" };
        result.user_id = this.long();
        result.access_hash = this.long();
        return result;
      }],
      [3146955413, function() {
        const result = { _: "messageEntityUnknown" };
        result.offset = this.int();
        result.length = this.int();
        return result;
      }],
      [4194588573, function() {
        const result = { _: "messageEntityMention" };
        result.offset = this.int();
        result.length = this.int();
        return result;
      }],
      [1868782349, function() {
        const result = { _: "messageEntityHashtag" };
        result.offset = this.int();
        result.length = this.int();
        return result;
      }],
      [1827637959, function() {
        const result = { _: "messageEntityBotCommand" };
        result.offset = this.int();
        result.length = this.int();
        return result;
      }],
      [1859134776, function() {
        const result = { _: "messageEntityUrl" };
        result.offset = this.int();
        result.length = this.int();
        return result;
      }],
      [1692693954, function() {
        const result = { _: "messageEntityEmail" };
        result.offset = this.int();
        result.length = this.int();
        return result;
      }],
      [3177253833, function() {
        const result = { _: "messageEntityBold" };
        result.offset = this.int();
        result.length = this.int();
        return result;
      }],
      [2188348256, function() {
        const result = { _: "messageEntityItalic" };
        result.offset = this.int();
        result.length = this.int();
        return result;
      }],
      [681706865, function() {
        const result = { _: "messageEntityCode" };
        result.offset = this.int();
        result.length = this.int();
        return result;
      }],
      [1938967520, function() {
        const result = { _: "messageEntityPre" };
        result.offset = this.int();
        result.length = this.int();
        result.language = this.string();
        return result;
      }],
      [1990644519, function() {
        const result = { _: "messageEntityTextUrl" };
        result.offset = this.int();
        result.length = this.int();
        result.url = this.string();
        return result;
      }],
      [2417352961, function() {
        const result = { _: "updateShortSentMessage" };
        result.flags = this.int();
        result.out = !!(result.flags & 2);
        result.id = this.int();
        result.pts = this.int();
        result.pts_count = this.int();
        result.date = this.int();
        if (result.flags & 512)
          result.media = this.predicate();
        if (result.flags & 128)
          result.entities = this.vector(this.predicate);
        if (result.flags & 33554432)
          result.ttl_period = this.int();
        return result;
      }],
      [4002160262, function() {
        const result = { _: "inputChannelEmpty" };
        return result;
      }],
      [4082822184, function() {
        const result = { _: "inputChannel" };
        result.channel_id = this.long();
        result.access_hash = this.long();
        return result;
      }],
      [2728736542, function() {
        const result = { _: "peerChannel" };
        result.channel_id = this.long();
        return result;
      }],
      [666680316, function() {
        const result = { _: "inputPeerChannel" };
        result.channel_id = this.long();
        result.access_hash = this.long();
        return result;
      }],
      [2200278116, function() {
        const result = { _: "channel" };
        result.flags = this.int();
        result.creator = !!(result.flags & 1);
        result.left = !!(result.flags & 4);
        result.broadcast = !!(result.flags & 32);
        result.verified = !!(result.flags & 128);
        result.megagroup = !!(result.flags & 256);
        result.restricted = !!(result.flags & 512);
        result.signatures = !!(result.flags & 2048);
        result.min = !!(result.flags & 4096);
        result.scam = !!(result.flags & 524288);
        result.has_link = !!(result.flags & 1048576);
        result.has_geo = !!(result.flags & 2097152);
        result.slowmode_enabled = !!(result.flags & 4194304);
        result.call_active = !!(result.flags & 8388608);
        result.call_not_empty = !!(result.flags & 16777216);
        result.fake = !!(result.flags & 33554432);
        result.gigagroup = !!(result.flags & 67108864);
        result.noforwards = !!(result.flags & 134217728);
        result.join_to_send = !!(result.flags & 268435456);
        result.join_request = !!(result.flags & 536870912);
        result.forum = !!(result.flags & 1073741824);
        result.flags2 = this.int();
        result.id = this.long();
        if (result.flags & 8192)
          result.access_hash = this.long();
        result.title = this.string();
        if (result.flags & 64)
          result.username = this.string();
        result.photo = this.predicate();
        result.date = this.int();
        if (result.flags & 512)
          result.restriction_reason = this.vector(this.predicate);
        if (result.flags & 16384)
          result.admin_rights = this.predicate();
        if (result.flags & 32768)
          result.banned_rights = this.predicate();
        if (result.flags & 262144)
          result.default_banned_rights = this.predicate();
        if (result.flags & 131072)
          result.participants_count = this.int();
        if (result.flags2 & 1)
          result.usernames = this.vector(this.predicate);
        return result;
      }],
      [399807445, function() {
        const result = { _: "channelForbidden" };
        result.flags = this.int();
        result.broadcast = !!(result.flags & 32);
        result.megagroup = !!(result.flags & 256);
        result.id = this.long();
        result.access_hash = this.long();
        result.title = this.string();
        if (result.flags & 65536)
          result.until_date = this.int();
        return result;
      }],
      [2131196633, function() {
        const result = { _: "contacts.resolvedPeer" };
        result.peer = this.predicate();
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [4063581447, function() {
        const result = { _: "channelFull" };
        result.flags = this.int();
        result.can_view_participants = !!(result.flags & 8);
        result.can_set_username = !!(result.flags & 64);
        result.can_set_stickers = !!(result.flags & 128);
        result.hidden_prehistory = !!(result.flags & 1024);
        result.can_set_location = !!(result.flags & 65536);
        result.has_scheduled = !!(result.flags & 524288);
        result.can_view_stats = !!(result.flags & 1048576);
        result.blocked = !!(result.flags & 4194304);
        result.flags2 = this.int();
        result.can_delete_channel = !!(result.flags2 & 1);
        result.antispam = !!(result.flags2 & 2);
        result.participants_hidden = !!(result.flags2 & 4);
        result.translations_disabled = !!(result.flags2 & 8);
        result.id = this.long();
        result.about = this.string();
        if (result.flags & 1)
          result.participants_count = this.int();
        if (result.flags & 2)
          result.admins_count = this.int();
        if (result.flags & 4)
          result.kicked_count = this.int();
        if (result.flags & 4)
          result.banned_count = this.int();
        if (result.flags & 8192)
          result.online_count = this.int();
        result.read_inbox_max_id = this.int();
        result.read_outbox_max_id = this.int();
        result.unread_count = this.int();
        result.chat_photo = this.predicate();
        result.notify_settings = this.predicate();
        if (result.flags & 8388608)
          result.exported_invite = this.predicate();
        result.bot_info = this.vector(this.predicate, false);
        if (result.flags & 16)
          result.migrated_from_chat_id = this.long();
        if (result.flags & 16)
          result.migrated_from_max_id = this.int();
        if (result.flags & 32)
          result.pinned_msg_id = this.int();
        if (result.flags & 256)
          result.stickerset = this.predicate();
        if (result.flags & 512)
          result.available_min_id = this.int();
        if (result.flags & 2048)
          result.folder_id = this.int();
        if (result.flags & 16384)
          result.linked_chat_id = this.long();
        if (result.flags & 32768)
          result.location = this.predicate();
        if (result.flags & 131072)
          result.slowmode_seconds = this.int();
        if (result.flags & 262144)
          result.slowmode_next_send_date = this.int();
        if (result.flags & 4096)
          result.stats_dc = this.int();
        result.pts = this.int();
        if (result.flags & 2097152)
          result.call = this.predicate();
        if (result.flags & 16777216)
          result.ttl_period = this.int();
        if (result.flags & 33554432)
          result.pending_suggestions = this.vector(this.string);
        if (result.flags & 67108864)
          result.groupcall_default_join_as = this.predicate();
        if (result.flags & 134217728)
          result.theme_emoticon = this.string();
        if (result.flags & 268435456)
          result.requests_pending = this.int();
        if (result.flags & 268435456)
          result.recent_requesters = this.vector(this.long);
        if (result.flags & 536870912)
          result.default_send_as = this.predicate();
        if (result.flags & 1073741824)
          result.available_reactions = this.predicate();
        return result;
      }],
      [182649427, function() {
        const result = { _: "messageRange" };
        result.min_id = this.int();
        result.max_id = this.int();
        return result;
      }],
      [3346446926, function() {
        const result = { _: "messages.channelMessages" };
        result.flags = this.int();
        result.inexact = !!(result.flags & 2);
        result.pts = this.int();
        result.count = this.int();
        if (result.flags & 4)
          result.offset_id_offset = this.int();
        result.messages = this.vector(this.predicate, false);
        result.topics = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [2513611922, function() {
        const result = { _: "messageActionChannelCreate" };
        result.title = this.string();
        return result;
      }],
      [277713951, function() {
        const result = { _: "updateChannelTooLong" };
        result.flags = this.int();
        result.channel_id = this.long();
        if (result.flags & 1)
          result.pts = this.int();
        return result;
      }],
      [1666927625, function() {
        const result = { _: "updateChannel" };
        result.channel_id = this.long();
        return result;
      }],
      [1656358105, function() {
        const result = { _: "updateNewChannelMessage" };
        result.message = this.predicate();
        result.pts = this.int();
        result.pts_count = this.int();
        return result;
      }],
      [2452516368, function() {
        const result = { _: "updateReadChannelInbox" };
        result.flags = this.int();
        if (result.flags & 1)
          result.folder_id = this.int();
        result.channel_id = this.long();
        result.max_id = this.int();
        result.still_unread_count = this.int();
        result.pts = this.int();
        return result;
      }],
      [3274529554, function() {
        const result = { _: "updateDeleteChannelMessages" };
        result.channel_id = this.long();
        result.messages = this.vector(this.int, false);
        result.pts = this.int();
        result.pts_count = this.int();
        return result;
      }],
      [4062620680, function() {
        const result = { _: "updateChannelMessageViews" };
        result.channel_id = this.long();
        result.id = this.int();
        result.views = this.int();
        return result;
      }],
      [1041346555, function() {
        const result = { _: "updates.channelDifferenceEmpty" };
        result.flags = this.int();
        result.final = !!(result.flags & 1);
        result.pts = this.int();
        if (result.flags & 2)
          result.timeout = this.int();
        return result;
      }],
      [2763835134, function() {
        const result = { _: "updates.channelDifferenceTooLong" };
        result.flags = this.int();
        result.final = !!(result.flags & 1);
        if (result.flags & 2)
          result.timeout = this.int();
        result.dialog = this.predicate();
        result.messages = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [543450958, function() {
        const result = { _: "updates.channelDifference" };
        result.flags = this.int();
        result.final = !!(result.flags & 1);
        result.pts = this.int();
        if (result.flags & 2)
          result.timeout = this.int();
        result.new_messages = this.vector(this.predicate, false);
        result.other_updates = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [2496933607, function() {
        const result = { _: "channelMessagesFilterEmpty" };
        return result;
      }],
      [3447183703, function() {
        const result = { _: "channelMessagesFilter" };
        result.flags = this.int();
        result.exclude_new_messages = !!(result.flags & 2);
        result.ranges = this.vector(this.predicate, false);
        return result;
      }],
      [3222013888, function() {
        const result = { _: "channelParticipant" };
        result.user_id = this.long();
        result.date = this.int();
        return result;
      }],
      [900251559, function() {
        const result = { _: "channelParticipantSelf" };
        result.flags = this.int();
        result.via_request = !!(result.flags & 1);
        result.user_id = this.long();
        result.inviter_id = this.long();
        result.date = this.int();
        return result;
      }],
      [803602899, function() {
        const result = { _: "channelParticipantCreator" };
        result.flags = this.int();
        result.user_id = this.long();
        result.admin_rights = this.predicate();
        if (result.flags & 1)
          result.rank = this.string();
        return result;
      }],
      [3728686201, function() {
        const result = { _: "channelParticipantsRecent" };
        return result;
      }],
      [3026225513, function() {
        const result = { _: "channelParticipantsAdmins" };
        return result;
      }],
      [2746567045, function() {
        const result = { _: "channelParticipantsKicked" };
        result.q = this.string();
        return result;
      }],
      [2595290799, function() {
        const result = { _: "channels.channelParticipants" };
        result.count = this.int();
        result.participants = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [3753378583, function() {
        const result = { _: "channels.channelParticipant" };
        result.participant = this.predicate();
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [3832270564, function() {
        const result = { _: "chatParticipantCreator" };
        result.user_id = this.long();
        return result;
      }],
      [2694004571, function() {
        const result = { _: "chatParticipantAdmin" };
        result.user_id = this.long();
        result.inviter_id = this.long();
        result.date = this.int();
        return result;
      }],
      [3620364706, function() {
        const result = { _: "updateChatParticipantAdmin" };
        result.chat_id = this.long();
        result.user_id = this.long();
        result.is_admin = this.predicate();
        result.version = this.int();
        return result;
      }],
      [3775102866, function() {
        const result = { _: "messageActionChatMigrateTo" };
        result.channel_id = this.long();
        return result;
      }],
      [3929622761, function() {
        const result = { _: "messageActionChannelMigrateFrom" };
        result.title = this.string();
        result.chat_id = this.long();
        return result;
      }],
      [2966521435, function() {
        const result = { _: "channelParticipantsBots" };
        return result;
      }],
      [2013922064, function() {
        const result = { _: "help.termsOfService" };
        result.flags = this.int();
        result.popup = !!(result.flags & 1);
        result.id = this.predicate();
        result.text = this.string();
        result.entities = this.vector(this.predicate, false);
        if (result.flags & 2)
          result.min_age_confirm = this.int();
        return result;
      }],
      [1753886890, function() {
        const result = { _: "updateNewStickerSet" };
        result.stickerset = this.predicate();
        return result;
      }],
      [196268545, function() {
        const result = { _: "updateStickerSetsOrder" };
        result.flags = this.int();
        result.masks = !!(result.flags & 1);
        result.emojis = !!(result.flags & 2);
        result.order = this.vector(this.long, false);
        return result;
      }],
      [834816008, function() {
        const result = { _: "updateStickerSets" };
        result.flags = this.int();
        result.masks = !!(result.flags & 1);
        result.emojis = !!(result.flags & 2);
        return result;
      }],
      [3892468898, function() {
        const result = { _: "messages.savedGifsNotModified" };
        return result;
      }],
      [2225089037, function() {
        const result = { _: "messages.savedGifs" };
        result.hash = this.long();
        result.gifs = this.vector(this.predicate, false);
        return result;
      }],
      [2473931806, function() {
        const result = { _: "updateSavedGifs" };
        return result;
      }],
      [864077702, function() {
        const result = { _: "inputBotInlineMessageMediaAuto" };
        result.flags = this.int();
        result.message = this.string();
        if (result.flags & 2)
          result.entities = this.vector(this.predicate);
        if (result.flags & 4)
          result.reply_markup = this.predicate();
        return result;
      }],
      [1036876423, function() {
        const result = { _: "inputBotInlineMessageText" };
        result.flags = this.int();
        result.no_webpage = !!(result.flags & 1);
        result.message = this.string();
        if (result.flags & 2)
          result.entities = this.vector(this.predicate);
        if (result.flags & 4)
          result.reply_markup = this.predicate();
        return result;
      }],
      [2294256409, function() {
        const result = { _: "inputBotInlineResult" };
        result.flags = this.int();
        result.id = this.string();
        result.type = this.string();
        if (result.flags & 2)
          result.title = this.string();
        if (result.flags & 4)
          result.description = this.string();
        if (result.flags & 8)
          result.url = this.string();
        if (result.flags & 16)
          result.thumb = this.predicate();
        if (result.flags & 32)
          result.content = this.predicate();
        result.send_message = this.predicate();
        return result;
      }],
      [1984755728, function() {
        const result = { _: "botInlineMessageMediaAuto" };
        result.flags = this.int();
        result.message = this.string();
        if (result.flags & 2)
          result.entities = this.vector(this.predicate);
        if (result.flags & 4)
          result.reply_markup = this.predicate();
        return result;
      }],
      [2357159394, function() {
        const result = { _: "botInlineMessageText" };
        result.flags = this.int();
        result.no_webpage = !!(result.flags & 1);
        result.message = this.string();
        if (result.flags & 2)
          result.entities = this.vector(this.predicate);
        if (result.flags & 4)
          result.reply_markup = this.predicate();
        return result;
      }],
      [295067450, function() {
        const result = { _: "botInlineResult" };
        result.flags = this.int();
        result.id = this.string();
        result.type = this.string();
        if (result.flags & 2)
          result.title = this.string();
        if (result.flags & 4)
          result.description = this.string();
        if (result.flags & 8)
          result.url = this.string();
        if (result.flags & 16)
          result.thumb = this.predicate();
        if (result.flags & 32)
          result.content = this.predicate();
        result.send_message = this.predicate();
        return result;
      }],
      [3760321270, function() {
        const result = { _: "messages.botResults" };
        result.flags = this.int();
        result.gallery = !!(result.flags & 1);
        result.query_id = this.long();
        if (result.flags & 2)
          result.next_offset = this.string();
        if (result.flags & 4)
          result.switch_pm = this.predicate();
        if (result.flags & 8)
          result.switch_webview = this.predicate();
        result.results = this.vector(this.predicate, false);
        result.cache_time = this.int();
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [1232025500, function() {
        const result = { _: "updateBotInlineQuery" };
        result.flags = this.int();
        result.query_id = this.long();
        result.user_id = this.long();
        result.query = this.string();
        if (result.flags & 1)
          result.geo = this.predicate();
        if (result.flags & 2)
          result.peer_type = this.predicate();
        result.offset = this.string();
        return result;
      }],
      [317794823, function() {
        const result = { _: "updateBotInlineSend" };
        result.flags = this.int();
        result.user_id = this.long();
        result.query = this.string();
        if (result.flags & 1)
          result.geo = this.predicate();
        result.id = this.string();
        if (result.flags & 2)
          result.msg_id = this.predicate();
        return result;
      }],
      [1358283666, function() {
        const result = { _: "inputMessagesFilterVoice" };
        return result;
      }],
      [928101534, function() {
        const result = { _: "inputMessagesFilterMusic" };
        return result;
      }],
      [3187344422, function() {
        const result = { _: "inputPrivacyKeyChatInvite" };
        return result;
      }],
      [1343122938, function() {
        const result = { _: "privacyKeyChatInvite" };
        return result;
      }],
      [1571494644, function() {
        const result = { _: "exportedMessageLink" };
        result.link = this.string();
        result.html = this.string();
        return result;
      }],
      [1601666510, function() {
        const result = { _: "messageFwdHeader" };
        result.flags = this.int();
        result.imported = !!(result.flags & 128);
        if (result.flags & 1)
          result.from_id = this.predicate();
        if (result.flags & 32)
          result.from_name = this.string();
        result.date = this.int();
        if (result.flags & 4)
          result.channel_post = this.int();
        if (result.flags & 8)
          result.post_author = this.string();
        if (result.flags & 16)
          result.saved_from_peer = this.predicate();
        if (result.flags & 16)
          result.saved_from_msg_id = this.int();
        if (result.flags & 64)
          result.psa_type = this.string();
        return result;
      }],
      [457133559, function() {
        const result = { _: "updateEditChannelMessage" };
        result.message = this.predicate();
        result.pts = this.int();
        result.pts_count = this.int();
        return result;
      }],
      [2495428845, function() {
        const result = { _: "messageActionPinMessage" };
        return result;
      }],
      [1923290508, function() {
        const result = { _: "auth.codeTypeSms" };
        return result;
      }],
      [1948046307, function() {
        const result = { _: "auth.codeTypeCall" };
        return result;
      }],
      [577556219, function() {
        const result = { _: "auth.codeTypeFlashCall" };
        return result;
      }],
      [1035688326, function() {
        const result = { _: "auth.sentCodeTypeApp" };
        result.length = this.int();
        return result;
      }],
      [3221273506, function() {
        const result = { _: "auth.sentCodeTypeSms" };
        result.length = this.int();
        return result;
      }],
      [1398007207, function() {
        const result = { _: "auth.sentCodeTypeCall" };
        result.length = this.int();
        return result;
      }],
      [2869151449, function() {
        const result = { _: "auth.sentCodeTypeFlashCall" };
        result.pattern = this.string();
        return result;
      }],
      [629866245, function() {
        const result = { _: "keyboardButtonUrl" };
        result.text = this.string();
        result.url = this.string();
        return result;
      }],
      [901503851, function() {
        const result = { _: "keyboardButtonCallback" };
        result.flags = this.int();
        result.requires_password = !!(result.flags & 1);
        result.text = this.string();
        result.data = this.bytes();
        return result;
      }],
      [2976541737, function() {
        const result = { _: "keyboardButtonRequestPhone" };
        result.text = this.string();
        return result;
      }],
      [4235815743, function() {
        const result = { _: "keyboardButtonRequestGeoLocation" };
        result.text = this.string();
        return result;
      }],
      [2478439349, function() {
        const result = { _: "keyboardButtonSwitchInline" };
        result.flags = this.int();
        result.same_peer = !!(result.flags & 1);
        result.text = this.string();
        result.query = this.string();
        if (result.flags & 2)
          result.peer_types = this.vector(this.predicate);
        return result;
      }],
      [1218642516, function() {
        const result = { _: "replyInlineMarkup" };
        result.rows = this.vector(this.predicate, false);
        return result;
      }],
      [911761060, function() {
        const result = { _: "messages.botCallbackAnswer" };
        result.flags = this.int();
        result.alert = !!(result.flags & 2);
        result.has_url = !!(result.flags & 8);
        result.native_ui = !!(result.flags & 16);
        if (result.flags & 1)
          result.message = this.string();
        if (result.flags & 4)
          result.url = this.string();
        result.cache_time = this.int();
        return result;
      }],
      [3117401229, function() {
        const result = { _: "updateBotCallbackQuery" };
        result.flags = this.int();
        result.query_id = this.long();
        result.user_id = this.long();
        result.peer = this.predicate();
        result.msg_id = this.int();
        result.chat_instance = this.long();
        if (result.flags & 1)
          result.data = this.bytes();
        if (result.flags & 2)
          result.game_short_name = this.string();
        return result;
      }],
      [649453030, function() {
        const result = { _: "messages.messageEditData" };
        result.flags = this.int();
        result.caption = !!(result.flags & 1);
        return result;
      }],
      [3825430691, function() {
        const result = { _: "updateEditMessage" };
        result.message = this.predicate();
        result.pts = this.int();
        result.pts_count = this.int();
        return result;
      }],
      [2526190213, function() {
        const result = { _: "inputBotInlineMessageMediaGeo" };
        result.flags = this.int();
        result.geo_point = this.predicate();
        if (result.flags & 1)
          result.heading = this.int();
        if (result.flags & 2)
          result.period = this.int();
        if (result.flags & 8)
          result.proximity_notification_radius = this.int();
        if (result.flags & 4)
          result.reply_markup = this.predicate();
        return result;
      }],
      [1098628881, function() {
        const result = { _: "inputBotInlineMessageMediaVenue" };
        result.flags = this.int();
        result.geo_point = this.predicate();
        result.title = this.string();
        result.address = this.string();
        result.provider = this.string();
        result.venue_id = this.string();
        result.venue_type = this.string();
        if (result.flags & 4)
          result.reply_markup = this.predicate();
        return result;
      }],
      [2800599037, function() {
        const result = { _: "inputBotInlineMessageMediaContact" };
        result.flags = this.int();
        result.phone_number = this.string();
        result.first_name = this.string();
        result.last_name = this.string();
        result.vcard = this.string();
        if (result.flags & 4)
          result.reply_markup = this.predicate();
        return result;
      }],
      [85477117, function() {
        const result = { _: "botInlineMessageMediaGeo" };
        result.flags = this.int();
        result.geo = this.predicate();
        if (result.flags & 1)
          result.heading = this.int();
        if (result.flags & 2)
          result.period = this.int();
        if (result.flags & 8)
          result.proximity_notification_radius = this.int();
        if (result.flags & 4)
          result.reply_markup = this.predicate();
        return result;
      }],
      [2324063644, function() {
        const result = { _: "botInlineMessageMediaVenue" };
        result.flags = this.int();
        result.geo = this.predicate();
        result.title = this.string();
        result.address = this.string();
        result.provider = this.string();
        result.venue_id = this.string();
        result.venue_type = this.string();
        if (result.flags & 4)
          result.reply_markup = this.predicate();
        return result;
      }],
      [416402882, function() {
        const result = { _: "botInlineMessageMediaContact" };
        result.flags = this.int();
        result.phone_number = this.string();
        result.first_name = this.string();
        result.last_name = this.string();
        result.vcard = this.string();
        if (result.flags & 4)
          result.reply_markup = this.predicate();
        return result;
      }],
      [2832753831, function() {
        const result = { _: "inputBotInlineResultPhoto" };
        result.id = this.string();
        result.type = this.string();
        result.photo = this.predicate();
        result.send_message = this.predicate();
        return result;
      }],
      [4294507972, function() {
        const result = { _: "inputBotInlineResultDocument" };
        result.flags = this.int();
        result.id = this.string();
        result.type = this.string();
        if (result.flags & 2)
          result.title = this.string();
        if (result.flags & 4)
          result.description = this.string();
        result.document = this.predicate();
        result.send_message = this.predicate();
        return result;
      }],
      [400266251, function() {
        const result = { _: "botInlineMediaResult" };
        result.flags = this.int();
        result.id = this.string();
        result.type = this.string();
        if (result.flags & 1)
          result.photo = this.predicate();
        if (result.flags & 2)
          result.document = this.predicate();
        if (result.flags & 4)
          result.title = this.string();
        if (result.flags & 8)
          result.description = this.string();
        result.send_message = this.predicate();
        return result;
      }],
      [2299280777, function() {
        const result = { _: "inputBotInlineMessageID" };
        result.dc_id = this.int();
        result.id = this.long();
        result.access_hash = this.long();
        return result;
      }],
      [1763610706, function() {
        const result = { _: "updateInlineBotCallbackQuery" };
        result.flags = this.int();
        result.query_id = this.long();
        result.user_id = this.long();
        result.msg_id = this.predicate();
        result.chat_instance = this.long();
        if (result.flags & 1)
          result.data = this.bytes();
        if (result.flags & 2)
          result.game_short_name = this.string();
        return result;
      }],
      [1008755359, function() {
        const result = { _: "inlineBotSwitchPM" };
        result.text = this.string();
        result.start_param = this.string();
        return result;
      }],
      [863093588, function() {
        const result = { _: "messages.peerDialogs" };
        result.dialogs = this.vector(this.predicate, false);
        result.messages = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        result.state = this.predicate();
        return result;
      }],
      [3989684315, function() {
        const result = { _: "topPeer" };
        result.peer = this.predicate();
        result.rating = this.double();
        return result;
      }],
      [2875595611, function() {
        const result = { _: "topPeerCategoryBotsPM" };
        return result;
      }],
      [344356834, function() {
        const result = { _: "topPeerCategoryBotsInline" };
        return result;
      }],
      [104314861, function() {
        const result = { _: "topPeerCategoryCorrespondents" };
        return result;
      }],
      [3172442442, function() {
        const result = { _: "topPeerCategoryGroups" };
        return result;
      }],
      [371037736, function() {
        const result = { _: "topPeerCategoryChannels" };
        return result;
      }],
      [4219683473, function() {
        const result = { _: "topPeerCategoryPeers" };
        result.category = this.predicate();
        result.count = this.int();
        result.peers = this.vector(this.predicate, false);
        return result;
      }],
      [3727060725, function() {
        const result = { _: "contacts.topPeersNotModified" };
        return result;
      }],
      [1891070632, function() {
        const result = { _: "contacts.topPeers" };
        result.categories = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [3699052864, function() {
        const result = { _: "messageEntityMentionName" };
        result.offset = this.int();
        result.length = this.int();
        result.user_id = this.long();
        return result;
      }],
      [546203849, function() {
        const result = { _: "inputMessageEntityMentionName" };
        result.offset = this.int();
        result.length = this.int();
        result.user_id = this.predicate();
        return result;
      }],
      [975236280, function() {
        const result = { _: "inputMessagesFilterChatPhotos" };
        return result;
      }],
      [3076495785, function() {
        const result = { _: "updateReadChannelOutbox" };
        result.channel_id = this.long();
        result.max_id = this.int();
        return result;
      }],
      [457829485, function() {
        const result = { _: "updateDraftMessage" };
        result.flags = this.int();
        result.peer = this.predicate();
        if (result.flags & 1)
          result.top_msg_id = this.int();
        result.draft = this.predicate();
        return result;
      }],
      [453805082, function() {
        const result = { _: "draftMessageEmpty" };
        result.flags = this.int();
        if (result.flags & 1)
          result.date = this.int();
        return result;
      }],
      [4253970719, function() {
        const result = { _: "draftMessage" };
        result.flags = this.int();
        result.no_webpage = !!(result.flags & 2);
        if (result.flags & 1)
          result.reply_to_msg_id = this.int();
        result.message = this.string();
        if (result.flags & 8)
          result.entities = this.vector(this.predicate);
        result.date = this.int();
        return result;
      }],
      [2679813636, function() {
        const result = { _: "messageActionHistoryClear" };
        return result;
      }],
      [3336309862, function() {
        const result = { _: "messages.featuredStickersNotModified" };
        result.count = this.int();
        return result;
      }],
      [3191351558, function() {
        const result = { _: "messages.featuredStickers" };
        result.flags = this.int();
        result.premium = !!(result.flags & 1);
        result.hash = this.long();
        result.count = this.int();
        result.sets = this.vector(this.predicate, false);
        result.unread = this.vector(this.long, false);
        return result;
      }],
      [1461528386, function() {
        const result = { _: "updateReadFeaturedStickers" };
        return result;
      }],
      [186120336, function() {
        const result = { _: "messages.recentStickersNotModified" };
        return result;
      }],
      [2295561302, function() {
        const result = { _: "messages.recentStickers" };
        result.hash = this.long();
        result.packs = this.vector(this.predicate, false);
        result.stickers = this.vector(this.predicate, false);
        result.dates = this.vector(this.int, false);
        return result;
      }],
      [2588027936, function() {
        const result = { _: "updateRecentStickers" };
        return result;
      }],
      [1338747336, function() {
        const result = { _: "messages.archivedStickers" };
        result.count = this.int();
        result.sets = this.vector(this.predicate, false);
        return result;
      }],
      [946083368, function() {
        const result = { _: "messages.stickerSetInstallResultSuccess" };
        return result;
      }],
      [904138920, function() {
        const result = { _: "messages.stickerSetInstallResultArchive" };
        result.sets = this.vector(this.predicate, false);
        return result;
      }],
      [1678812626, function() {
        const result = { _: "stickerSetCovered" };
        result.set = this.predicate();
        result.cover = this.predicate();
        return result;
      }],
      [2720652550, function() {
        const result = { _: "updateConfig" };
        return result;
      }],
      [861169551, function() {
        const result = { _: "updatePtsChanged" };
        return result;
      }],
      [3854302746, function() {
        const result = { _: "inputMediaPhotoExternal" };
        result.flags = this.int();
        result.spoiler = !!(result.flags & 2);
        result.url = this.string();
        if (result.flags & 1)
          result.ttl_seconds = this.int();
        return result;
      }],
      [4216511641, function() {
        const result = { _: "inputMediaDocumentExternal" };
        result.flags = this.int();
        result.spoiler = !!(result.flags & 2);
        result.url = this.string();
        if (result.flags & 1)
          result.ttl_seconds = this.int();
        return result;
      }],
      [872932635, function() {
        const result = { _: "stickerSetMultiCovered" };
        result.set = this.predicate();
        result.covers = this.vector(this.predicate, false);
        return result;
      }],
      [2933316530, function() {
        const result = { _: "maskCoords" };
        result.n = this.int();
        result.x = this.double();
        result.y = this.double();
        result.zoom = this.double();
        return result;
      }],
      [2550256375, function() {
        const result = { _: "documentAttributeHasStickers" };
        return result;
      }],
      [1251549527, function() {
        const result = { _: "inputStickeredMediaPhoto" };
        result.id = this.predicate();
        return result;
      }],
      [70813275, function() {
        const result = { _: "inputStickeredMediaDocument" };
        result.id = this.predicate();
        return result;
      }],
      [3187238203, function() {
        const result = { _: "game" };
        result.flags = this.int();
        result.id = this.long();
        result.access_hash = this.long();
        result.short_name = this.string();
        result.title = this.string();
        result.description = this.string();
        result.photo = this.predicate();
        if (result.flags & 1)
          result.document = this.predicate();
        return result;
      }],
      [1336154098, function() {
        const result = { _: "inputBotInlineResultGame" };
        result.id = this.string();
        result.short_name = this.string();
        result.send_message = this.predicate();
        return result;
      }],
      [1262639204, function() {
        const result = { _: "inputBotInlineMessageGame" };
        result.flags = this.int();
        if (result.flags & 4)
          result.reply_markup = this.predicate();
        return result;
      }],
      [4256272392, function() {
        const result = { _: "messageMediaGame" };
        result.game = this.predicate();
        return result;
      }],
      [3544138739, function() {
        const result = { _: "inputMediaGame" };
        result.id = this.predicate();
        return result;
      }],
      [53231223, function() {
        const result = { _: "inputGameID" };
        result.id = this.long();
        result.access_hash = this.long();
        return result;
      }],
      [3274827786, function() {
        const result = { _: "inputGameShortName" };
        result.bot_id = this.predicate();
        result.short_name = this.string();
        return result;
      }],
      [1358175439, function() {
        const result = { _: "keyboardButtonGame" };
        result.text = this.string();
        return result;
      }],
      [2460428406, function() {
        const result = { _: "messageActionGameScore" };
        result.game_id = this.long();
        result.score = this.int();
        return result;
      }],
      [1940093419, function() {
        const result = { _: "highScore" };
        result.pos = this.int();
        result.user_id = this.long();
        result.score = this.int();
        return result;
      }],
      [2587622809, function() {
        const result = { _: "messages.highScores" };
        result.scores = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [1258196845, function() {
        const result = { _: "updates.differenceTooLong" };
        result.pts = this.int();
        return result;
      }],
      [791390623, function() {
        const result = { _: "updateChannelWebPage" };
        result.channel_id = this.long();
        result.webpage = this.predicate();
        result.pts = this.int();
        result.pts_count = this.int();
        return result;
      }],
      [2631405892, function() {
        const result = { _: "messages.chatsSlice" };
        result.count = this.int();
        result.chats = this.vector(this.predicate, false);
        return result;
      }],
      [3695018575, function() {
        const result = { _: "textEmpty" };
        return result;
      }],
      [1950782688, function() {
        const result = { _: "textPlain" };
        result.text = this.string();
        return result;
      }],
      [1730456516, function() {
        const result = { _: "textBold" };
        result.text = this.predicate();
        return result;
      }],
      [3641877916, function() {
        const result = { _: "textItalic" };
        result.text = this.predicate();
        return result;
      }],
      [3240501956, function() {
        const result = { _: "textUnderline" };
        result.text = this.predicate();
        return result;
      }],
      [2616769429, function() {
        const result = { _: "textStrike" };
        result.text = this.predicate();
        return result;
      }],
      [1816074681, function() {
        const result = { _: "textFixed" };
        result.text = this.predicate();
        return result;
      }],
      [1009288385, function() {
        const result = { _: "textUrl" };
        result.text = this.predicate();
        result.url = this.string();
        result.webpage_id = this.long();
        return result;
      }],
      [3730443734, function() {
        const result = { _: "textEmail" };
        result.text = this.predicate();
        result.email = this.string();
        return result;
      }],
      [2120376535, function() {
        const result = { _: "textConcat" };
        result.texts = this.vector(this.predicate, false);
        return result;
      }],
      [324435594, function() {
        const result = { _: "pageBlockUnsupported" };
        return result;
      }],
      [1890305021, function() {
        const result = { _: "pageBlockTitle" };
        result.text = this.predicate();
        return result;
      }],
      [2415565343, function() {
        const result = { _: "pageBlockSubtitle" };
        result.text = this.predicate();
        return result;
      }],
      [3132089824, function() {
        const result = { _: "pageBlockAuthorDate" };
        result.author = this.predicate();
        result.published_date = this.int();
        return result;
      }],
      [3218105580, function() {
        const result = { _: "pageBlockHeader" };
        result.text = this.predicate();
        return result;
      }],
      [4046173921, function() {
        const result = { _: "pageBlockSubheader" };
        result.text = this.predicate();
        return result;
      }],
      [1182402406, function() {
        const result = { _: "pageBlockParagraph" };
        result.text = this.predicate();
        return result;
      }],
      [3228621118, function() {
        const result = { _: "pageBlockPreformatted" };
        result.text = this.predicate();
        result.language = this.string();
        return result;
      }],
      [1216809369, function() {
        const result = { _: "pageBlockFooter" };
        result.text = this.predicate();
        return result;
      }],
      [3676352904, function() {
        const result = { _: "pageBlockDivider" };
        return result;
      }],
      [3456972720, function() {
        const result = { _: "pageBlockAnchor" };
        result.name = this.string();
        return result;
      }],
      [3840442385, function() {
        const result = { _: "pageBlockList" };
        result.items = this.vector(this.predicate, false);
        return result;
      }],
      [641563686, function() {
        const result = { _: "pageBlockBlockquote" };
        result.text = this.predicate();
        result.caption = this.predicate();
        return result;
      }],
      [1329878739, function() {
        const result = { _: "pageBlockPullquote" };
        result.text = this.predicate();
        result.caption = this.predicate();
        return result;
      }],
      [391759200, function() {
        const result = { _: "pageBlockPhoto" };
        result.flags = this.int();
        result.photo_id = this.long();
        result.caption = this.predicate();
        if (result.flags & 1)
          result.url = this.string();
        if (result.flags & 1)
          result.webpage_id = this.long();
        return result;
      }],
      [2089805750, function() {
        const result = { _: "pageBlockVideo" };
        result.flags = this.int();
        result.autoplay = !!(result.flags & 1);
        result.loop = !!(result.flags & 2);
        result.video_id = this.long();
        result.caption = this.predicate();
        return result;
      }],
      [972174080, function() {
        const result = { _: "pageBlockCover" };
        result.cover = this.predicate();
        return result;
      }],
      [2826014149, function() {
        const result = { _: "pageBlockEmbed" };
        result.flags = this.int();
        result.full_width = !!(result.flags & 1);
        result.allow_scrolling = !!(result.flags & 8);
        if (result.flags & 2)
          result.url = this.string();
        if (result.flags & 4)
          result.html = this.string();
        if (result.flags & 16)
          result.poster_photo_id = this.long();
        if (result.flags & 32)
          result.w = this.int();
        if (result.flags & 32)
          result.h = this.int();
        result.caption = this.predicate();
        return result;
      }],
      [4065961995, function() {
        const result = { _: "pageBlockEmbedPost" };
        result.url = this.string();
        result.webpage_id = this.long();
        result.author_photo_id = this.long();
        result.author = this.string();
        result.date = this.int();
        result.blocks = this.vector(this.predicate, false);
        result.caption = this.predicate();
        return result;
      }],
      [1705048653, function() {
        const result = { _: "pageBlockCollage" };
        result.items = this.vector(this.predicate, false);
        result.caption = this.predicate();
        return result;
      }],
      [52401552, function() {
        const result = { _: "pageBlockSlideshow" };
        result.items = this.vector(this.predicate, false);
        result.caption = this.predicate();
        return result;
      }],
      [1930545681, function() {
        const result = { _: "webPageNotModified" };
        result.flags = this.int();
        if (result.flags & 1)
          result.cached_page_views = this.int();
        return result;
      }],
      [4206550111, function() {
        const result = { _: "inputPrivacyKeyPhoneCall" };
        return result;
      }],
      [1030105979, function() {
        const result = { _: "privacyKeyPhoneCall" };
        return result;
      }],
      [3714748232, function() {
        const result = { _: "sendMessageGamePlayAction" };
        return result;
      }],
      [2246320897, function() {
        const result = { _: "phoneCallDiscardReasonMissed" };
        return result;
      }],
      [3767910816, function() {
        const result = { _: "phoneCallDiscardReasonDisconnect" };
        return result;
      }],
      [1471006352, function() {
        const result = { _: "phoneCallDiscardReasonHangup" };
        return result;
      }],
      [4210550985, function() {
        const result = { _: "phoneCallDiscardReasonBusy" };
        return result;
      }],
      [1852826908, function() {
        const result = { _: "updateDialogPinned" };
        result.flags = this.int();
        result.pinned = !!(result.flags & 1);
        if (result.flags & 2)
          result.folder_id = this.int();
        result.peer = this.predicate();
        return result;
      }],
      [4195302562, function() {
        const result = { _: "updatePinnedDialogs" };
        result.flags = this.int();
        if (result.flags & 2)
          result.folder_id = this.int();
        if (result.flags & 1)
          result.order = this.vector(this.predicate);
        return result;
      }],
      [2104790276, function() {
        const result = { _: "dataJSON" };
        result.data = this.string();
        return result;
      }],
      [2199371971, function() {
        const result = { _: "updateBotWebhookJSON" };
        result.data = this.predicate();
        return result;
      }],
      [2610053286, function() {
        const result = { _: "updateBotWebhookJSONQuery" };
        result.query_id = this.long();
        result.data = this.predicate();
        result.timeout = this.int();
        return result;
      }],
      [3408489464, function() {
        const result = { _: "labeledPrice" };
        result.label = this.string();
        result.amount = this.long();
        return result;
      }],
      [1048946971, function() {
        const result = { _: "invoice" };
        result.flags = this.int();
        result.test = !!(result.flags & 1);
        result.name_requested = !!(result.flags & 2);
        result.phone_requested = !!(result.flags & 4);
        result.email_requested = !!(result.flags & 8);
        result.shipping_address_requested = !!(result.flags & 16);
        result.flexible = !!(result.flags & 32);
        result.phone_to_provider = !!(result.flags & 64);
        result.email_to_provider = !!(result.flags & 128);
        result.recurring = !!(result.flags & 512);
        result.currency = this.string();
        result.prices = this.vector(this.predicate, false);
        if (result.flags & 256)
          result.max_tip_amount = this.long();
        if (result.flags & 256)
          result.suggested_tip_amounts = this.vector(this.long);
        if (result.flags & 512)
          result.recurring_terms_url = this.string();
        return result;
      }],
      [2394269397, function() {
        const result = { _: "inputMediaInvoice" };
        result.flags = this.int();
        result.title = this.string();
        result.description = this.string();
        if (result.flags & 1)
          result.photo = this.predicate();
        result.invoice = this.predicate();
        result.payload = this.bytes();
        result.provider = this.string();
        result.provider_data = this.predicate();
        if (result.flags & 2)
          result.start_param = this.string();
        if (result.flags & 4)
          result.extended_media = this.predicate();
        return result;
      }],
      [3926049406, function() {
        const result = { _: "paymentCharge" };
        result.id = this.string();
        result.provider_charge_id = this.string();
        return result;
      }],
      [2402399015, function() {
        const result = { _: "messageActionPaymentSentMe" };
        result.flags = this.int();
        result.recurring_init = !!(result.flags & 4);
        result.recurring_used = !!(result.flags & 8);
        result.currency = this.string();
        result.total_amount = this.long();
        result.payload = this.bytes();
        if (result.flags & 1)
          result.info = this.predicate();
        if (result.flags & 2)
          result.shipping_option_id = this.string();
        result.charge = this.predicate();
        return result;
      }],
      [4138027219, function() {
        const result = { _: "messageMediaInvoice" };
        result.flags = this.int();
        result.shipping_address_requested = !!(result.flags & 2);
        result.test = !!(result.flags & 8);
        result.title = this.string();
        result.description = this.string();
        if (result.flags & 1)
          result.photo = this.predicate();
        if (result.flags & 4)
          result.receipt_msg_id = this.int();
        result.currency = this.string();
        result.total_amount = this.long();
        result.start_param = this.string();
        if (result.flags & 16)
          result.extended_media = this.predicate();
        return result;
      }],
      [512535275, function() {
        const result = { _: "postAddress" };
        result.street_line1 = this.string();
        result.street_line2 = this.string();
        result.city = this.string();
        result.state = this.string();
        result.country_iso2 = this.string();
        result.post_code = this.string();
        return result;
      }],
      [2426158996, function() {
        const result = { _: "paymentRequestedInfo" };
        result.flags = this.int();
        if (result.flags & 1)
          result.name = this.string();
        if (result.flags & 2)
          result.phone = this.string();
        if (result.flags & 4)
          result.email = this.string();
        if (result.flags & 8)
          result.shipping_address = this.predicate();
        return result;
      }],
      [2950250427, function() {
        const result = { _: "keyboardButtonBuy" };
        result.text = this.string();
        return result;
      }],
      [2518040406, function() {
        const result = { _: "messageActionPaymentSent" };
        result.flags = this.int();
        result.recurring_init = !!(result.flags & 4);
        result.recurring_used = !!(result.flags & 8);
        result.currency = this.string();
        result.total_amount = this.long();
        if (result.flags & 1)
          result.invoice_slug = this.string();
        return result;
      }],
      [3452074527, function() {
        const result = { _: "paymentSavedCredentialsCard" };
        result.id = this.string();
        result.title = this.string();
        return result;
      }],
      [475467473, function() {
        const result = { _: "webDocument" };
        result.url = this.string();
        result.access_hash = this.long();
        result.size = this.int();
        result.mime_type = this.string();
        result.attributes = this.vector(this.predicate, false);
        return result;
      }],
      [2616017741, function() {
        const result = { _: "inputWebDocument" };
        result.url = this.string();
        result.size = this.int();
        result.mime_type = this.string();
        result.attributes = this.vector(this.predicate, false);
        return result;
      }],
      [3258570374, function() {
        const result = { _: "inputWebFileLocation" };
        result.url = this.string();
        result.access_hash = this.long();
        return result;
      }],
      [568808380, function() {
        const result = { _: "upload.webFile" };
        result.size = this.int();
        result.mime_type = this.string();
        result.file_type = this.predicate();
        result.mtime = this.int();
        result.bytes = this.bytes();
        return result;
      }],
      [2684716881, function() {
        const result = { _: "payments.paymentForm" };
        result.flags = this.int();
        result.can_save_credentials = !!(result.flags & 4);
        result.password_missing = !!(result.flags & 8);
        result.form_id = this.long();
        result.bot_id = this.long();
        result.title = this.string();
        result.description = this.string();
        if (result.flags & 32)
          result.photo = this.predicate();
        result.invoice = this.predicate();
        result.provider_id = this.long();
        result.url = this.string();
        if (result.flags & 16)
          result.native_provider = this.string();
        if (result.flags & 16)
          result.native_params = this.predicate();
        if (result.flags & 64)
          result.additional_methods = this.vector(this.predicate);
        if (result.flags & 1)
          result.saved_info = this.predicate();
        if (result.flags & 2)
          result.saved_credentials = this.vector(this.predicate);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [3510966403, function() {
        const result = { _: "payments.validatedRequestedInfo" };
        result.flags = this.int();
        if (result.flags & 1)
          result.id = this.string();
        if (result.flags & 2)
          result.shipping_options = this.vector(this.predicate);
        return result;
      }],
      [1314881805, function() {
        const result = { _: "payments.paymentResult" };
        result.updates = this.predicate();
        return result;
      }],
      [1891958275, function() {
        const result = { _: "payments.paymentReceipt" };
        result.flags = this.int();
        result.date = this.int();
        result.bot_id = this.long();
        result.provider_id = this.long();
        result.title = this.string();
        result.description = this.string();
        if (result.flags & 4)
          result.photo = this.predicate();
        result.invoice = this.predicate();
        if (result.flags & 1)
          result.info = this.predicate();
        if (result.flags & 2)
          result.shipping = this.predicate();
        if (result.flags & 8)
          result.tip_amount = this.long();
        result.currency = this.string();
        result.total_amount = this.long();
        result.credentials_title = this.string();
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [4220511292, function() {
        const result = { _: "payments.savedInfo" };
        result.flags = this.int();
        result.has_saved_credentials = !!(result.flags & 2);
        if (result.flags & 1)
          result.saved_info = this.predicate();
        return result;
      }],
      [3238965967, function() {
        const result = { _: "inputPaymentCredentialsSaved" };
        result.id = this.string();
        result.tmp_password = this.bytes();
        return result;
      }],
      [873977640, function() {
        const result = { _: "inputPaymentCredentials" };
        result.flags = this.int();
        result.save = !!(result.flags & 1);
        result.data = this.predicate();
        return result;
      }],
      [3680828724, function() {
        const result = { _: "account.tmpPassword" };
        result.tmp_password = this.bytes();
        result.valid_until = this.int();
        return result;
      }],
      [3055631583, function() {
        const result = { _: "shippingOption" };
        result.id = this.string();
        result.title = this.string();
        result.prices = this.vector(this.predicate, false);
        return result;
      }],
      [3048144253, function() {
        const result = { _: "updateBotShippingQuery" };
        result.query_id = this.long();
        result.user_id = this.long();
        result.payload = this.bytes();
        result.shipping_address = this.predicate();
        return result;
      }],
      [2359990934, function() {
        const result = { _: "updateBotPrecheckoutQuery" };
        result.flags = this.int();
        result.query_id = this.long();
        result.user_id = this.long();
        result.payload = this.bytes();
        if (result.flags & 1)
          result.info = this.predicate();
        if (result.flags & 2)
          result.shipping_option_id = this.string();
        result.currency = this.string();
        result.total_amount = this.long();
        return result;
      }],
      [853188252, function() {
        const result = { _: "inputStickerSetItem" };
        result.flags = this.int();
        result.document = this.predicate();
        result.emoji = this.string();
        if (result.flags & 1)
          result.mask_coords = this.predicate();
        if (result.flags & 2)
          result.keywords = this.string();
        return result;
      }],
      [2869914398, function() {
        const result = { _: "updatePhoneCall" };
        result.phone_call = this.predicate();
        return result;
      }],
      [506920429, function() {
        const result = { _: "inputPhoneCall" };
        result.id = this.long();
        result.access_hash = this.long();
        return result;
      }],
      [1399245077, function() {
        const result = { _: "phoneCallEmpty" };
        result.id = this.long();
        return result;
      }],
      [3307368215, function() {
        const result = { _: "phoneCallWaiting" };
        result.flags = this.int();
        result.video = !!(result.flags & 64);
        result.id = this.long();
        result.access_hash = this.long();
        result.date = this.int();
        result.admin_id = this.long();
        result.participant_id = this.long();
        result.protocol = this.predicate();
        if (result.flags & 1)
          result.receive_date = this.int();
        return result;
      }],
      [347139340, function() {
        const result = { _: "phoneCallRequested" };
        result.flags = this.int();
        result.video = !!(result.flags & 64);
        result.id = this.long();
        result.access_hash = this.long();
        result.date = this.int();
        result.admin_id = this.long();
        result.participant_id = this.long();
        result.g_a_hash = this.bytes();
        result.protocol = this.predicate();
        return result;
      }],
      [912311057, function() {
        const result = { _: "phoneCallAccepted" };
        result.flags = this.int();
        result.video = !!(result.flags & 64);
        result.id = this.long();
        result.access_hash = this.long();
        result.date = this.int();
        result.admin_id = this.long();
        result.participant_id = this.long();
        result.g_b = this.bytes();
        result.protocol = this.predicate();
        return result;
      }],
      [2524937319, function() {
        const result = { _: "phoneCall" };
        result.flags = this.int();
        result.p2p_allowed = !!(result.flags & 32);
        result.video = !!(result.flags & 64);
        result.id = this.long();
        result.access_hash = this.long();
        result.date = this.int();
        result.admin_id = this.long();
        result.participant_id = this.long();
        result.g_a_or_b = this.bytes();
        result.key_fingerprint = this.long();
        result.protocol = this.predicate();
        result.connections = this.vector(this.predicate, false);
        result.start_date = this.int();
        return result;
      }],
      [1355435489, function() {
        const result = { _: "phoneCallDiscarded" };
        result.flags = this.int();
        result.need_rating = !!(result.flags & 4);
        result.need_debug = !!(result.flags & 8);
        result.video = !!(result.flags & 64);
        result.id = this.long();
        if (result.flags & 1)
          result.reason = this.predicate();
        if (result.flags & 2)
          result.duration = this.int();
        return result;
      }],
      [2629903303, function() {
        const result = { _: "phoneConnection" };
        result.flags = this.int();
        result.tcp = !!(result.flags & 1);
        result.id = this.long();
        result.ip = this.string();
        result.ipv6 = this.string();
        result.port = this.int();
        result.peer_tag = this.bytes();
        return result;
      }],
      [4236742600, function() {
        const result = { _: "phoneCallProtocol" };
        result.flags = this.int();
        result.udp_p2p = !!(result.flags & 1);
        result.udp_reflector = !!(result.flags & 2);
        result.min_layer = this.int();
        result.max_layer = this.int();
        result.library_versions = this.vector(this.string, false);
        return result;
      }],
      [3968000320, function() {
        const result = { _: "phone.phoneCall" };
        result.phone_call = this.predicate();
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [2160695144, function() {
        const result = { _: "inputMessagesFilterPhoneCalls" };
        result.flags = this.int();
        result.missed = !!(result.flags & 1);
        return result;
      }],
      [2162236031, function() {
        const result = { _: "messageActionPhoneCall" };
        result.flags = this.int();
        result.video = !!(result.flags & 4);
        result.call_id = this.long();
        if (result.flags & 1)
          result.reason = this.predicate();
        if (result.flags & 2)
          result.duration = this.int();
        return result;
      }],
      [2054952868, function() {
        const result = { _: "inputMessagesFilterRoundVoice" };
        return result;
      }],
      [3041516115, function() {
        const result = { _: "inputMessagesFilterRoundVideo" };
        return result;
      }],
      [2297593788, function() {
        const result = { _: "sendMessageRecordRoundAction" };
        return result;
      }],
      [608050278, function() {
        const result = { _: "sendMessageUploadRoundAction" };
        result.progress = this.int();
        return result;
      }],
      [4052539972, function() {
        const result = { _: "upload.fileCdnRedirect" };
        result.dc_id = this.int();
        result.file_token = this.bytes();
        result.encryption_key = this.bytes();
        result.encryption_iv = this.bytes();
        result.file_hashes = this.vector(this.predicate, false);
        return result;
      }],
      [4004045934, function() {
        const result = { _: "upload.cdnFileReuploadNeeded" };
        result.request_token = this.bytes();
        return result;
      }],
      [2845821519, function() {
        const result = { _: "upload.cdnFile" };
        result.bytes = this.bytes();
        return result;
      }],
      [3380800186, function() {
        const result = { _: "cdnPublicKey" };
        result.dc_id = this.int();
        result.public_key = this.string();
        return result;
      }],
      [1462101002, function() {
        const result = { _: "cdnConfig" };
        result.public_keys = this.vector(this.predicate, false);
        return result;
      }],
      [4011282869, function() {
        const result = { _: "pageBlockChannel" };
        result.channel = this.predicate();
        return result;
      }],
      [3402727926, function() {
        const result = { _: "langPackString" };
        result.key = this.string();
        result.value = this.string();
        return result;
      }],
      [1816636575, function() {
        const result = { _: "langPackStringPluralized" };
        result.flags = this.int();
        result.key = this.string();
        if (result.flags & 1)
          result.zero_value = this.string();
        if (result.flags & 2)
          result.one_value = this.string();
        if (result.flags & 4)
          result.two_value = this.string();
        if (result.flags & 8)
          result.few_value = this.string();
        if (result.flags & 16)
          result.many_value = this.string();
        result.other_value = this.string();
        return result;
      }],
      [695856818, function() {
        const result = { _: "langPackStringDeleted" };
        result.key = this.string();
        return result;
      }],
      [4085629430, function() {
        const result = { _: "langPackDifference" };
        result.lang_code = this.string();
        result.from_version = this.int();
        result.version = this.int();
        result.strings = this.vector(this.predicate, false);
        return result;
      }],
      [4006239459, function() {
        const result = { _: "langPackLanguage" };
        result.flags = this.int();
        result.official = !!(result.flags & 1);
        result.rtl = !!(result.flags & 4);
        result.beta = !!(result.flags & 8);
        result.name = this.string();
        result.native_name = this.string();
        result.lang_code = this.string();
        if (result.flags & 2)
          result.base_lang_code = this.string();
        result.plural_code = this.string();
        result.strings_count = this.int();
        result.translated_count = this.int();
        result.translations_url = this.string();
        return result;
      }],
      [1180041828, function() {
        const result = { _: "updateLangPackTooLong" };
        result.lang_code = this.string();
        return result;
      }],
      [1442983757, function() {
        const result = { _: "updateLangPack" };
        result.difference = this.predicate();
        return result;
      }],
      [885242707, function() {
        const result = { _: "channelParticipantAdmin" };
        result.flags = this.int();
        result.can_edit = !!(result.flags & 1);
        result.self = !!(result.flags & 2);
        result.user_id = this.long();
        if (result.flags & 2)
          result.inviter_id = this.long();
        result.promoted_by = this.long();
        result.date = this.int();
        result.admin_rights = this.predicate();
        if (result.flags & 4)
          result.rank = this.string();
        return result;
      }],
      [1844969806, function() {
        const result = { _: "channelParticipantBanned" };
        result.flags = this.int();
        result.left = !!(result.flags & 1);
        result.peer = this.predicate();
        result.kicked_by = this.long();
        result.date = this.int();
        result.banned_rights = this.predicate();
        return result;
      }],
      [338142689, function() {
        const result = { _: "channelParticipantsBanned" };
        result.q = this.string();
        return result;
      }],
      [106343499, function() {
        const result = { _: "channelParticipantsSearch" };
        result.q = this.string();
        return result;
      }],
      [3873421349, function() {
        const result = { _: "channelAdminLogEventActionChangeTitle" };
        result.prev_value = this.string();
        result.new_value = this.string();
        return result;
      }],
      [1427671598, function() {
        const result = { _: "channelAdminLogEventActionChangeAbout" };
        result.prev_value = this.string();
        result.new_value = this.string();
        return result;
      }],
      [1783299128, function() {
        const result = { _: "channelAdminLogEventActionChangeUsername" };
        result.prev_value = this.string();
        result.new_value = this.string();
        return result;
      }],
      [1129042607, function() {
        const result = { _: "channelAdminLogEventActionChangePhoto" };
        result.prev_photo = this.predicate();
        result.new_photo = this.predicate();
        return result;
      }],
      [460916654, function() {
        const result = { _: "channelAdminLogEventActionToggleInvites" };
        result.new_value = this.predicate();
        return result;
      }],
      [648939889, function() {
        const result = { _: "channelAdminLogEventActionToggleSignatures" };
        result.new_value = this.predicate();
        return result;
      }],
      [3924306968, function() {
        const result = { _: "channelAdminLogEventActionUpdatePinned" };
        result.message = this.predicate();
        return result;
      }],
      [1889215493, function() {
        const result = { _: "channelAdminLogEventActionEditMessage" };
        result.prev_message = this.predicate();
        result.new_message = this.predicate();
        return result;
      }],
      [1121994683, function() {
        const result = { _: "channelAdminLogEventActionDeleteMessage" };
        result.message = this.predicate();
        return result;
      }],
      [405815507, function() {
        const result = { _: "channelAdminLogEventActionParticipantJoin" };
        return result;
      }],
      [4170676210, function() {
        const result = { _: "channelAdminLogEventActionParticipantLeave" };
        return result;
      }],
      [3810276568, function() {
        const result = { _: "channelAdminLogEventActionParticipantInvite" };
        result.participant = this.predicate();
        return result;
      }],
      [3872931198, function() {
        const result = { _: "channelAdminLogEventActionParticipantToggleBan" };
        result.prev_participant = this.predicate();
        result.new_participant = this.predicate();
        return result;
      }],
      [3580323600, function() {
        const result = { _: "channelAdminLogEventActionParticipantToggleAdmin" };
        result.prev_participant = this.predicate();
        result.new_participant = this.predicate();
        return result;
      }],
      [531458253, function() {
        const result = { _: "channelAdminLogEvent" };
        result.id = this.long();
        result.date = this.int();
        result.user_id = this.long();
        result.action = this.predicate();
        return result;
      }],
      [3985307469, function() {
        const result = { _: "channels.adminLogResults" };
        result.events = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [3926948580, function() {
        const result = { _: "channelAdminLogEventsFilter" };
        result.flags = this.int();
        result.join = !!(result.flags & 1);
        result.leave = !!(result.flags & 2);
        result.invite = !!(result.flags & 4);
        result.ban = !!(result.flags & 8);
        result.unban = !!(result.flags & 16);
        result.kick = !!(result.flags & 32);
        result.unkick = !!(result.flags & 64);
        result.promote = !!(result.flags & 128);
        result.demote = !!(result.flags & 256);
        result.info = !!(result.flags & 512);
        result.settings = !!(result.flags & 1024);
        result.pinned = !!(result.flags & 2048);
        result.edit = !!(result.flags & 4096);
        result.delete = !!(result.flags & 8192);
        result.group_call = !!(result.flags & 16384);
        result.invites = !!(result.flags & 32768);
        result.send = !!(result.flags & 65536);
        result.forums = !!(result.flags & 131072);
        return result;
      }],
      [511092620, function() {
        const result = { _: "topPeerCategoryPhoneCalls" };
        return result;
      }],
      [2151899626, function() {
        const result = { _: "pageBlockAudio" };
        result.audio_id = this.long();
        result.caption = this.predicate();
        return result;
      }],
      [1558266229, function() {
        const result = { _: "popularContact" };
        result.client_id = this.long();
        result.importers = this.int();
        return result;
      }],
      [1200788123, function() {
        const result = { _: "messageActionScreenshotTaken" };
        return result;
      }],
      [2660214483, function() {
        const result = { _: "messages.favedStickersNotModified" };
        return result;
      }],
      [750063767, function() {
        const result = { _: "messages.favedStickers" };
        result.hash = this.long();
        result.packs = this.vector(this.predicate, false);
        result.stickers = this.vector(this.predicate, false);
        return result;
      }],
      [3843135853, function() {
        const result = { _: "updateFavedStickers" };
        return result;
      }],
      [3928556893, function() {
        const result = { _: "updateChannelReadMessagesContents" };
        result.flags = this.int();
        result.channel_id = this.long();
        if (result.flags & 1)
          result.top_msg_id = this.int();
        result.messages = this.vector(this.int, false);
        return result;
      }],
      [3254314650, function() {
        const result = { _: "inputMessagesFilterMyMentions" };
        return result;
      }],
      [1887741886, function() {
        const result = { _: "updateContactsReset" };
        return result;
      }],
      [2982398631, function() {
        const result = { _: "channelAdminLogEventActionChangeStickerSet" };
        result.prev_stickerset = this.predicate();
        result.new_stickerset = this.predicate();
        return result;
      }],
      [4209418070, function() {
        const result = { _: "messageActionCustomAction" };
        result.message = this.string();
        return result;
      }],
      [178373535, function() {
        const result = { _: "inputPaymentCredentialsApplePay" };
        result.payment_data = this.predicate();
        return result;
      }],
      [3875695885, function() {
        const result = { _: "inputMessagesFilterGeo" };
        return result;
      }],
      [3764575107, function() {
        const result = { _: "inputMessagesFilterContacts" };
        return result;
      }],
      [2990524056, function() {
        const result = { _: "updateChannelAvailableMessages" };
        result.channel_id = this.long();
        result.available_min_id = this.int();
        return result;
      }],
      [1599903217, function() {
        const result = { _: "channelAdminLogEventActionTogglePreHistoryHidden" };
        result.new_value = this.predicate();
        return result;
      }],
      [2535434307, function() {
        const result = { _: "inputMediaGeoLive" };
        result.flags = this.int();
        result.stopped = !!(result.flags & 1);
        result.geo_point = this.predicate();
        if (result.flags & 4)
          result.heading = this.int();
        if (result.flags & 2)
          result.period = this.int();
        if (result.flags & 8)
          result.proximity_notification_radius = this.int();
        return result;
      }],
      [3108030054, function() {
        const result = { _: "messageMediaGeoLive" };
        result.flags = this.int();
        result.geo = this.predicate();
        if (result.flags & 1)
          result.heading = this.int();
        result.period = this.int();
        if (result.flags & 2)
          result.proximity_notification_radius = this.int();
        return result;
      }],
      [1189204285, function() {
        const result = { _: "recentMeUrlUnknown" };
        result.url = this.string();
        return result;
      }],
      [3106671074, function() {
        const result = { _: "recentMeUrlUser" };
        result.url = this.string();
        result.user_id = this.long();
        return result;
      }],
      [3000660434, function() {
        const result = { _: "recentMeUrlChat" };
        result.url = this.string();
        result.chat_id = this.long();
        return result;
      }],
      [3947431965, function() {
        const result = { _: "recentMeUrlChatInvite" };
        result.url = this.string();
        result.chat_invite = this.predicate();
        return result;
      }],
      [3154794460, function() {
        const result = { _: "recentMeUrlStickerSet" };
        result.url = this.string();
        result.set = this.predicate();
        return result;
      }],
      [235081943, function() {
        const result = { _: "help.recentMeUrls" };
        result.urls = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [4028055529, function() {
        const result = { _: "channels.channelParticipantsNotModified" };
        return result;
      }],
      [1951620897, function() {
        const result = { _: "messages.messagesNotModified" };
        result.count = this.int();
        return result;
      }],
      [482797855, function() {
        const result = { _: "inputSingleMedia" };
        result.flags = this.int();
        result.media = this.predicate();
        result.random_id = this.long();
        result.message = this.string();
        if (result.flags & 1)
          result.entities = this.vector(this.predicate);
        return result;
      }],
      [2801333330, function() {
        const result = { _: "webAuthorization" };
        result.hash = this.long();
        result.bot_id = this.long();
        result.domain = this.string();
        result.browser = this.string();
        result.platform = this.string();
        result.date_created = this.int();
        result.date_active = this.int();
        result.ip = this.string();
        result.region = this.string();
        return result;
      }],
      [3981887996, function() {
        const result = { _: "account.webAuthorizations" };
        result.authorizations = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [2792792866, function() {
        const result = { _: "inputMessageID" };
        result.id = this.int();
        return result;
      }],
      [3134751637, function() {
        const result = { _: "inputMessageReplyTo" };
        result.id = this.int();
        return result;
      }],
      [2257003832, function() {
        const result = { _: "inputMessagePinned" };
        return result;
      }],
      [2607407947, function() {
        const result = { _: "messageEntityPhone" };
        result.offset = this.int();
        result.length = this.int();
        return result;
      }],
      [1280209983, function() {
        const result = { _: "messageEntityCashtag" };
        result.offset = this.int();
        result.length = this.int();
        return result;
      }],
      [3306608249, function() {
        const result = { _: "messageActionBotAllowed" };
        result.flags = this.int();
        result.attach_menu = !!(result.flags & 2);
        if (result.flags & 1)
          result.domain = this.string();
        if (result.flags & 4)
          result.app = this.predicate();
        return result;
      }],
      [4239064759, function() {
        const result = { _: "inputDialogPeer" };
        result.peer = this.predicate();
        return result;
      }],
      [3849174789, function() {
        const result = { _: "dialogPeer" };
        result.peer = this.predicate();
        return result;
      }],
      [223655517, function() {
        const result = { _: "messages.foundStickerSetsNotModified" };
        return result;
      }],
      [2331024850, function() {
        const result = { _: "messages.foundStickerSets" };
        result.hash = this.long();
        result.sets = this.vector(this.predicate, false);
        return result;
      }],
      [4087022428, function() {
        const result = { _: "fileHash" };
        result.offset = this.long();
        result.limit = this.int();
        result.hash = this.bytes();
        return result;
      }],
      [4190682310, function() {
        const result = { _: "webDocumentNoProxy" };
        result.url = this.string();
        result.size = this.int();
        result.mime_type = this.string();
        result.attributes = this.vector(this.predicate, false);
        return result;
      }],
      [1968737087, function() {
        const result = { _: "inputClientProxy" };
        result.address = this.string();
        result.port = this.int();
        return result;
      }],
      [3811614591, function() {
        const result = { _: "help.termsOfServiceUpdateEmpty" };
        result.expires = this.int();
        return result;
      }],
      [686618977, function() {
        const result = { _: "help.termsOfServiceUpdate" };
        result.expires = this.int();
        result.terms_of_service = this.predicate();
        return result;
      }],
      [859091184, function() {
        const result = { _: "inputSecureFileUploaded" };
        result.id = this.long();
        result.parts = this.int();
        result.md5_checksum = this.string();
        result.file_hash = this.bytes();
        result.secret = this.bytes();
        return result;
      }],
      [1399317950, function() {
        const result = { _: "inputSecureFile" };
        result.id = this.long();
        result.access_hash = this.long();
        return result;
      }],
      [3418877480, function() {
        const result = { _: "inputSecureFileLocation" };
        result.id = this.long();
        result.access_hash = this.long();
        return result;
      }],
      [1679398724, function() {
        const result = { _: "secureFileEmpty" };
        return result;
      }],
      [2097791614, function() {
        const result = { _: "secureFile" };
        result.id = this.long();
        result.access_hash = this.long();
        result.size = this.long();
        result.dc_id = this.int();
        result.date = this.int();
        result.file_hash = this.bytes();
        result.secret = this.bytes();
        return result;
      }],
      [2330640067, function() {
        const result = { _: "secureData" };
        result.data = this.bytes();
        result.data_hash = this.bytes();
        result.secret = this.bytes();
        return result;
      }],
      [2103482845, function() {
        const result = { _: "securePlainPhone" };
        result.phone = this.string();
        return result;
      }],
      [569137759, function() {
        const result = { _: "securePlainEmail" };
        result.email = this.string();
        return result;
      }],
      [2636808675, function() {
        const result = { _: "secureValueTypePersonalDetails" };
        return result;
      }],
      [1034709504, function() {
        const result = { _: "secureValueTypePassport" };
        return result;
      }],
      [115615172, function() {
        const result = { _: "secureValueTypeDriverLicense" };
        return result;
      }],
      [2698015819, function() {
        const result = { _: "secureValueTypeIdentityCard" };
        return result;
      }],
      [2577698595, function() {
        const result = { _: "secureValueTypeInternalPassport" };
        return result;
      }],
      [3420659238, function() {
        const result = { _: "secureValueTypeAddress" };
        return result;
      }],
      [4231435598, function() {
        const result = { _: "secureValueTypeUtilityBill" };
        return result;
      }],
      [2299755533, function() {
        const result = { _: "secureValueTypeBankStatement" };
        return result;
      }],
      [2340959368, function() {
        const result = { _: "secureValueTypeRentalAgreement" };
        return result;
      }],
      [2581823594, function() {
        const result = { _: "secureValueTypePassportRegistration" };
        return result;
      }],
      [3926060083, function() {
        const result = { _: "secureValueTypeTemporaryRegistration" };
        return result;
      }],
      [3005262555, function() {
        const result = { _: "secureValueTypePhone" };
        return result;
      }],
      [2386339822, function() {
        const result = { _: "secureValueTypeEmail" };
        return result;
      }],
      [411017418, function() {
        const result = { _: "secureValue" };
        result.flags = this.int();
        result.type = this.predicate();
        if (result.flags & 1)
          result.data = this.predicate();
        if (result.flags & 2)
          result.front_side = this.predicate();
        if (result.flags & 4)
          result.reverse_side = this.predicate();
        if (result.flags & 8)
          result.selfie = this.predicate();
        if (result.flags & 64)
          result.translation = this.vector(this.predicate);
        if (result.flags & 16)
          result.files = this.vector(this.predicate);
        if (result.flags & 32)
          result.plain_data = this.predicate();
        result.hash = this.bytes();
        return result;
      }],
      [3676426407, function() {
        const result = { _: "inputSecureValue" };
        result.flags = this.int();
        result.type = this.predicate();
        if (result.flags & 1)
          result.data = this.predicate();
        if (result.flags & 2)
          result.front_side = this.predicate();
        if (result.flags & 4)
          result.reverse_side = this.predicate();
        if (result.flags & 8)
          result.selfie = this.predicate();
        if (result.flags & 64)
          result.translation = this.vector(this.predicate);
        if (result.flags & 16)
          result.files = this.vector(this.predicate);
        if (result.flags & 32)
          result.plain_data = this.predicate();
        return result;
      }],
      [3978218928, function() {
        const result = { _: "secureValueHash" };
        result.type = this.predicate();
        result.hash = this.bytes();
        return result;
      }],
      [3903065049, function() {
        const result = { _: "secureValueErrorData" };
        result.type = this.predicate();
        result.data_hash = this.bytes();
        result.field = this.string();
        result.text = this.string();
        return result;
      }],
      [12467706, function() {
        const result = { _: "secureValueErrorFrontSide" };
        result.type = this.predicate();
        result.file_hash = this.bytes();
        result.text = this.string();
        return result;
      }],
      [2257201829, function() {
        const result = { _: "secureValueErrorReverseSide" };
        result.type = this.predicate();
        result.file_hash = this.bytes();
        result.text = this.string();
        return result;
      }],
      [3845639894, function() {
        const result = { _: "secureValueErrorSelfie" };
        result.type = this.predicate();
        result.file_hash = this.bytes();
        result.text = this.string();
        return result;
      }],
      [2054162547, function() {
        const result = { _: "secureValueErrorFile" };
        result.type = this.predicate();
        result.file_hash = this.bytes();
        result.text = this.string();
        return result;
      }],
      [1717706985, function() {
        const result = { _: "secureValueErrorFiles" };
        result.type = this.predicate();
        result.file_hash = this.vector(this.bytes, false);
        result.text = this.string();
        return result;
      }],
      [871426631, function() {
        const result = { _: "secureCredentialsEncrypted" };
        result.data = this.bytes();
        result.hash = this.bytes();
        result.secret = this.bytes();
        return result;
      }],
      [2905480408, function() {
        const result = { _: "account.authorizationForm" };
        result.flags = this.int();
        result.required_types = this.vector(this.predicate, false);
        result.values = this.vector(this.predicate, false);
        result.errors = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        if (result.flags & 1)
          result.privacy_policy_url = this.string();
        return result;
      }],
      [2166326607, function() {
        const result = { _: "account.sentEmailCode" };
        result.email_pattern = this.string();
        result.length = this.int();
        return result;
      }],
      [455635795, function() {
        const result = { _: "messageActionSecureValuesSentMe" };
        result.values = this.vector(this.predicate, false);
        result.credentials = this.predicate();
        return result;
      }],
      [3646710100, function() {
        const result = { _: "messageActionSecureValuesSent" };
        result.types = this.vector(this.predicate, false);
        return result;
      }],
      [1722786150, function() {
        const result = { _: "help.deepLinkInfoEmpty" };
        return result;
      }],
      [1783556146, function() {
        const result = { _: "help.deepLinkInfo" };
        result.flags = this.int();
        result.update_app = !!(result.flags & 1);
        result.message = this.string();
        if (result.flags & 2)
          result.entities = this.vector(this.predicate);
        return result;
      }],
      [289586518, function() {
        const result = { _: "savedPhoneContact" };
        result.phone = this.string();
        result.first_name = this.string();
        result.last_name = this.string();
        result.date = this.int();
        return result;
      }],
      [1304052993, function() {
        const result = { _: "account.takeout" };
        result.id = this.long();
        return result;
      }],
      [700340377, function() {
        const result = { _: "inputTakeoutFileLocation" };
        return result;
      }],
      [3781450179, function() {
        const result = { _: "updateDialogUnreadMark" };
        result.flags = this.int();
        result.unread = !!(result.flags & 1);
        result.peer = this.predicate();
        return result;
      }],
      [4041467286, function() {
        const result = { _: "messages.dialogsNotModified" };
        result.count = this.int();
        return result;
      }],
      [2669814217, function() {
        const result = { _: "inputWebFileGeoPointLocation" };
        result.geo_point = this.predicate();
        result.access_hash = this.long();
        result.w = this.int();
        result.h = this.int();
        result.zoom = this.int();
        result.scale = this.int();
        return result;
      }],
      [3039597469, function() {
        const result = { _: "contacts.topPeersDisabled" };
        return result;
      }],
      [2609510714, function() {
        const result = { _: "inputReportReasonCopyright" };
        return result;
      }],
      [3562713238, function() {
        const result = { _: "passwordKdfAlgoUnknown" };
        return result;
      }],
      [4883767, function() {
        const result = { _: "securePasswordKdfAlgoUnknown" };
        return result;
      }],
      [3153255840, function() {
        const result = { _: "securePasswordKdfAlgoPBKDF2HMACSHA512iter100000" };
        result.salt = this.bytes();
        return result;
      }],
      [2252807570, function() {
        const result = { _: "securePasswordKdfAlgoSHA512" };
        result.salt = this.bytes();
        return result;
      }],
      [354925740, function() {
        const result = { _: "secureSecretSettings" };
        result.secure_algo = this.predicate();
        result.secure_secret = this.bytes();
        result.secure_secret_id = this.long();
        return result;
      }],
      [982592842, function() {
        const result = { _: "passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow" };
        result.salt1 = this.bytes();
        result.salt2 = this.bytes();
        result.g = this.int();
        result.p = this.bytes();
        return result;
      }],
      [2558588504, function() {
        const result = { _: "inputCheckPasswordEmpty" };
        return result;
      }],
      [3531600002, function() {
        const result = { _: "inputCheckPasswordSRP" };
        result.srp_id = this.long();
        result.A = this.bytes();
        result.M1 = this.bytes();
        return result;
      }],
      [2258466191, function() {
        const result = { _: "secureValueError" };
        result.type = this.predicate();
        result.hash = this.bytes();
        result.text = this.string();
        return result;
      }],
      [2702460784, function() {
        const result = { _: "secureValueErrorTranslationFile" };
        result.type = this.predicate();
        result.file_hash = this.bytes();
        result.text = this.string();
        return result;
      }],
      [878931416, function() {
        const result = { _: "secureValueErrorTranslationFiles" };
        result.type = this.predicate();
        result.file_hash = this.vector(this.bytes, false);
        result.text = this.string();
        return result;
      }],
      [2191366618, function() {
        const result = { _: "secureRequiredType" };
        result.flags = this.int();
        result.native_names = !!(result.flags & 1);
        result.selfie_required = !!(result.flags & 2);
        result.translation_required = !!(result.flags & 4);
        result.type = this.predicate();
        return result;
      }],
      [41187252, function() {
        const result = { _: "secureRequiredTypeOneOf" };
        result.types = this.vector(this.predicate, false);
        return result;
      }],
      [3216634967, function() {
        const result = { _: "help.passportConfigNotModified" };
        return result;
      }],
      [2694370991, function() {
        const result = { _: "help.passportConfig" };
        result.hash = this.int();
        result.countries_langs = this.predicate();
        return result;
      }],
      [488313413, function() {
        const result = { _: "inputAppEvent" };
        result.time = this.double();
        result.type = this.string();
        result.peer = this.long();
        result.data = this.predicate();
        return result;
      }],
      [3235781593, function() {
        const result = { _: "jsonObjectValue" };
        result.key = this.string();
        result.value = this.predicate();
        return result;
      }],
      [1064139624, function() {
        const result = { _: "jsonNull" };
        return result;
      }],
      [3342098026, function() {
        const result = { _: "jsonBool" };
        result.value = this.predicate();
        return result;
      }],
      [736157604, function() {
        const result = { _: "jsonNumber" };
        result.value = this.double();
        return result;
      }],
      [3072226938, function() {
        const result = { _: "jsonString" };
        result.value = this.string();
        return result;
      }],
      [4148447075, function() {
        const result = { _: "jsonArray" };
        result.value = this.vector(this.predicate, false);
        return result;
      }],
      [2579616925, function() {
        const result = { _: "jsonObject" };
        result.value = this.vector(this.predicate, false);
        return result;
      }],
      [2983951486, function() {
        const result = { _: "inputNotifyBroadcasts" };
        return result;
      }],
      [3591563503, function() {
        const result = { _: "notifyBroadcasts" };
        return result;
      }],
      [3983181060, function() {
        const result = { _: "textSubscript" };
        result.text = this.predicate();
        return result;
      }],
      [3355139585, function() {
        const result = { _: "textSuperscript" };
        result.text = this.predicate();
        return result;
      }],
      [55281185, function() {
        const result = { _: "textMarked" };
        result.text = this.predicate();
        return result;
      }],
      [483104362, function() {
        const result = { _: "textPhone" };
        result.text = this.predicate();
        result.phone = this.string();
        return result;
      }],
      [136105807, function() {
        const result = { _: "textImage" };
        result.document_id = this.long();
        result.w = this.int();
        result.h = this.int();
        return result;
      }],
      [504660880, function() {
        const result = { _: "pageBlockKicker" };
        result.text = this.predicate();
        return result;
      }],
      [878078826, function() {
        const result = { _: "pageTableCell" };
        result.flags = this.int();
        result.header = !!(result.flags & 1);
        result.align_center = !!(result.flags & 8);
        result.align_right = !!(result.flags & 16);
        result.valign_middle = !!(result.flags & 32);
        result.valign_bottom = !!(result.flags & 64);
        if (result.flags & 128)
          result.text = this.predicate();
        if (result.flags & 2)
          result.colspan = this.int();
        if (result.flags & 4)
          result.rowspan = this.int();
        return result;
      }],
      [3770729957, function() {
        const result = { _: "pageTableRow" };
        result.cells = this.vector(this.predicate, false);
        return result;
      }],
      [3209554562, function() {
        const result = { _: "pageBlockTable" };
        result.flags = this.int();
        result.bordered = !!(result.flags & 1);
        result.striped = !!(result.flags & 2);
        result.title = this.predicate();
        result.rows = this.vector(this.predicate, false);
        return result;
      }],
      [1869903447, function() {
        const result = { _: "pageCaption" };
        result.text = this.predicate();
        result.credit = this.predicate();
        return result;
      }],
      [3106911949, function() {
        const result = { _: "pageListItemText" };
        result.text = this.predicate();
        return result;
      }],
      [635466748, function() {
        const result = { _: "pageListItemBlocks" };
        result.blocks = this.vector(this.predicate, false);
        return result;
      }],
      [1577484359, function() {
        const result = { _: "pageListOrderedItemText" };
        result.num = this.string();
        result.text = this.predicate();
        return result;
      }],
      [2564655414, function() {
        const result = { _: "pageListOrderedItemBlocks" };
        result.num = this.string();
        result.blocks = this.vector(this.predicate, false);
        return result;
      }],
      [2592793057, function() {
        const result = { _: "pageBlockOrderedList" };
        result.items = this.vector(this.predicate, false);
        return result;
      }],
      [1987480557, function() {
        const result = { _: "pageBlockDetails" };
        result.flags = this.int();
        result.open = !!(result.flags & 1);
        result.blocks = this.vector(this.predicate, false);
        result.title = this.predicate();
        return result;
      }],
      [3012615176, function() {
        const result = { _: "pageRelatedArticle" };
        result.flags = this.int();
        result.url = this.string();
        result.webpage_id = this.long();
        if (result.flags & 1)
          result.title = this.string();
        if (result.flags & 2)
          result.description = this.string();
        if (result.flags & 4)
          result.photo_id = this.long();
        if (result.flags & 8)
          result.author = this.string();
        if (result.flags & 16)
          result.published_date = this.int();
        return result;
      }],
      [370236054, function() {
        const result = { _: "pageBlockRelatedArticles" };
        result.title = this.predicate();
        result.articles = this.vector(this.predicate, false);
        return result;
      }],
      [2756656886, function() {
        const result = { _: "pageBlockMap" };
        result.geo = this.predicate();
        result.zoom = this.int();
        result.w = this.int();
        result.h = this.int();
        result.caption = this.predicate();
        return result;
      }],
      [2556788493, function() {
        const result = { _: "page" };
        result.flags = this.int();
        result.part = !!(result.flags & 1);
        result.rtl = !!(result.flags & 2);
        result.v2 = !!(result.flags & 4);
        result.url = this.string();
        result.blocks = this.vector(this.predicate, false);
        result.photos = this.vector(this.predicate, false);
        result.documents = this.vector(this.predicate, false);
        if (result.flags & 8)
          result.views = this.int();
        return result;
      }],
      [3684593874, function() {
        const result = { _: "inputPrivacyKeyPhoneP2P" };
        return result;
      }],
      [961092808, function() {
        const result = { _: "privacyKeyPhoneP2P" };
        return result;
      }],
      [894777186, function() {
        const result = { _: "textAnchor" };
        result.text = this.predicate();
        result.name = this.string();
        return result;
      }],
      [2349199817, function() {
        const result = { _: "help.supportName" };
        result.name = this.string();
        return result;
      }],
      [4088278765, function() {
        const result = { _: "help.userInfoEmpty" };
        return result;
      }],
      [32192344, function() {
        const result = { _: "help.userInfo" };
        result.message = this.string();
        result.entities = this.vector(this.predicate, false);
        result.author = this.string();
        result.date = this.int();
        return result;
      }],
      [4092747638, function() {
        const result = { _: "messageActionContactSignUp" };
        return result;
      }],
      [2896258427, function() {
        const result = { _: "updateMessagePoll" };
        result.flags = this.int();
        result.poll_id = this.long();
        if (result.flags & 1)
          result.poll = this.predicate();
        result.results = this.predicate();
        return result;
      }],
      [1823064809, function() {
        const result = { _: "pollAnswer" };
        result.text = this.string();
        result.option = this.bytes();
        return result;
      }],
      [2262925665, function() {
        const result = { _: "poll" };
        result.id = this.long();
        result.flags = this.int();
        result.closed = !!(result.flags & 1);
        result.public_voters = !!(result.flags & 2);
        result.multiple_choice = !!(result.flags & 4);
        result.quiz = !!(result.flags & 8);
        result.question = this.string();
        result.answers = this.vector(this.predicate, false);
        if (result.flags & 16)
          result.close_period = this.int();
        if (result.flags & 32)
          result.close_date = this.int();
        return result;
      }],
      [997055186, function() {
        const result = { _: "pollAnswerVoters" };
        result.flags = this.int();
        result.chosen = !!(result.flags & 1);
        result.correct = !!(result.flags & 2);
        result.option = this.bytes();
        result.voters = this.int();
        return result;
      }],
      [3703058083, function() {
        const result = { _: "pollResults" };
        result.flags = this.int();
        result.min = !!(result.flags & 1);
        if (result.flags & 2)
          result.results = this.vector(this.predicate);
        if (result.flags & 4)
          result.total_voters = this.int();
        if (result.flags & 8)
          result.recent_voters = this.vector(this.long);
        if (result.flags & 16)
          result.solution = this.string();
        if (result.flags & 16)
          result.solution_entities = this.vector(this.predicate);
        return result;
      }],
      [261416433, function() {
        const result = { _: "inputMediaPoll" };
        result.flags = this.int();
        result.poll = this.predicate();
        if (result.flags & 1)
          result.correct_answers = this.vector(this.bytes);
        if (result.flags & 2)
          result.solution = this.string();
        if (result.flags & 2)
          result.solution_entities = this.vector(this.predicate);
        return result;
      }],
      [1272375192, function() {
        const result = { _: "messageMediaPoll" };
        result.poll = this.predicate();
        result.results = this.predicate();
        return result;
      }],
      [4030849616, function() {
        const result = { _: "chatOnlines" };
        result.onlines = this.int();
        return result;
      }],
      [1202287072, function() {
        const result = { _: "statsURL" };
        result.url = this.string();
        return result;
      }],
      [3769678894, function() {
        const result = { _: "photoStrippedSize" };
        result.type = this.string();
        result.bytes = this.bytes();
        return result;
      }],
      [1605510357, function() {
        const result = { _: "chatAdminRights" };
        result.flags = this.int();
        result.change_info = !!(result.flags & 1);
        result.post_messages = !!(result.flags & 2);
        result.edit_messages = !!(result.flags & 4);
        result.delete_messages = !!(result.flags & 8);
        result.ban_users = !!(result.flags & 16);
        result.invite_users = !!(result.flags & 32);
        result.pin_messages = !!(result.flags & 128);
        result.add_admins = !!(result.flags & 512);
        result.anonymous = !!(result.flags & 1024);
        result.manage_call = !!(result.flags & 2048);
        result.other = !!(result.flags & 4096);
        result.manage_topics = !!(result.flags & 8192);
        return result;
      }],
      [2668758040, function() {
        const result = { _: "chatBannedRights" };
        result.flags = this.int();
        result.view_messages = !!(result.flags & 1);
        result.send_messages = !!(result.flags & 2);
        result.send_media = !!(result.flags & 4);
        result.send_stickers = !!(result.flags & 8);
        result.send_gifs = !!(result.flags & 16);
        result.send_games = !!(result.flags & 32);
        result.send_inline = !!(result.flags & 64);
        result.embed_links = !!(result.flags & 128);
        result.send_polls = !!(result.flags & 256);
        result.change_info = !!(result.flags & 1024);
        result.invite_users = !!(result.flags & 32768);
        result.pin_messages = !!(result.flags & 131072);
        result.manage_topics = !!(result.flags & 262144);
        result.send_photos = !!(result.flags & 524288);
        result.send_videos = !!(result.flags & 1048576);
        result.send_roundvideos = !!(result.flags & 2097152);
        result.send_audios = !!(result.flags & 4194304);
        result.send_voices = !!(result.flags & 8388608);
        result.send_docs = !!(result.flags & 16777216);
        result.send_plain = !!(result.flags & 33554432);
        result.until_date = this.int();
        return result;
      }],
      [1421875280, function() {
        const result = { _: "updateChatDefaultBannedRights" };
        result.peer = this.predicate();
        result.default_banned_rights = this.predicate();
        result.version = this.int();
        return result;
      }],
      [3861952889, function() {
        const result = { _: "inputWallPaper" };
        result.id = this.long();
        result.access_hash = this.long();
        return result;
      }],
      [1913199744, function() {
        const result = { _: "inputWallPaperSlug" };
        result.slug = this.string();
        return result;
      }],
      [3144345741, function() {
        const result = { _: "channelParticipantsContacts" };
        result.q = this.string();
        return result;
      }],
      [771095562, function() {
        const result = { _: "channelAdminLogEventActionDefaultBannedRights" };
        result.prev_banned_rights = this.predicate();
        result.new_banned_rights = this.predicate();
        return result;
      }],
      [2399639107, function() {
        const result = { _: "channelAdminLogEventActionStopPoll" };
        result.message = this.predicate();
        return result;
      }],
      [471437699, function() {
        const result = { _: "account.wallPapersNotModified" };
        return result;
      }],
      [3452142988, function() {
        const result = { _: "account.wallPapers" };
        result.hash = this.long();
        result.wallpapers = this.vector(this.predicate, false);
        return result;
      }],
      [2904898936, function() {
        const result = { _: "codeSettings" };
        result.flags = this.int();
        result.allow_flashcall = !!(result.flags & 1);
        result.current_number = !!(result.flags & 2);
        result.allow_app_hash = !!(result.flags & 16);
        result.allow_missed_call = !!(result.flags & 32);
        result.allow_firebase = !!(result.flags & 128);
        if (result.flags & 64)
          result.logout_tokens = this.vector(this.bytes);
        if (result.flags & 256)
          result.token = this.string();
        if (result.flags & 256)
          result.app_sandbox = this.predicate();
        return result;
      }],
      [499236004, function() {
        const result = { _: "wallPaperSettings" };
        result.flags = this.int();
        result.blur = !!(result.flags & 2);
        result.motion = !!(result.flags & 4);
        if (result.flags & 1)
          result.background_color = this.int();
        if (result.flags & 16)
          result.second_background_color = this.int();
        if (result.flags & 32)
          result.third_background_color = this.int();
        if (result.flags & 64)
          result.fourth_background_color = this.int();
        if (result.flags & 8)
          result.intensity = this.int();
        if (result.flags & 16)
          result.rotation = this.int();
        return result;
      }],
      [2398796115, function() {
        const result = { _: "autoDownloadSettings" };
        result.flags = this.int();
        result.disabled = !!(result.flags & 1);
        result.video_preload_large = !!(result.flags & 2);
        result.audio_preload_next = !!(result.flags & 4);
        result.phonecalls_less_data = !!(result.flags & 8);
        result.photo_size_max = this.int();
        result.video_size_max = this.long();
        result.file_size_max = this.long();
        result.video_upload_maxbitrate = this.int();
        return result;
      }],
      [1674235686, function() {
        const result = { _: "account.autoDownloadSettings" };
        result.low = this.predicate();
        result.medium = this.predicate();
        result.high = this.predicate();
        return result;
      }],
      [3585325561, function() {
        const result = { _: "emojiKeyword" };
        result.keyword = this.string();
        result.emoticons = this.vector(this.string, false);
        return result;
      }],
      [594408994, function() {
        const result = { _: "emojiKeywordDeleted" };
        result.keyword = this.string();
        result.emoticons = this.vector(this.string, false);
        return result;
      }],
      [1556570557, function() {
        const result = { _: "emojiKeywordsDifference" };
        result.lang_code = this.string();
        result.from_version = this.int();
        result.version = this.int();
        result.keywords = this.vector(this.predicate, false);
        return result;
      }],
      [2775937949, function() {
        const result = { _: "emojiURL" };
        result.url = this.string();
        return result;
      }],
      [3019592545, function() {
        const result = { _: "emojiLanguage" };
        result.lang_code = this.string();
        return result;
      }],
      [2765966344, function() {
        const result = { _: "inputPrivacyKeyForwards" };
        return result;
      }],
      [1777096355, function() {
        const result = { _: "privacyKeyForwards" };
        return result;
      }],
      [1461304012, function() {
        const result = { _: "inputPrivacyKeyProfilePhoto" };
        return result;
      }],
      [2517966829, function() {
        const result = { _: "privacyKeyProfilePhoto" };
        return result;
      }],
      [1075322878, function() {
        const result = { _: "inputPhotoFileLocation" };
        result.id = this.long();
        result.access_hash = this.long();
        result.file_reference = this.bytes();
        result.thumb_size = this.string();
        return result;
      }],
      [3627312883, function() {
        const result = { _: "inputPhotoLegacyFileLocation" };
        result.id = this.long();
        result.access_hash = this.long();
        result.file_reference = this.bytes();
        result.volume_id = this.long();
        result.local_id = this.int();
        result.secret = this.long();
        return result;
      }],
      [925204121, function() {
        const result = { _: "inputPeerPhotoFileLocation" };
        result.flags = this.int();
        result.big = !!(result.flags & 1);
        result.peer = this.predicate();
        result.photo_id = this.long();
        return result;
      }],
      [2642736091, function() {
        const result = { _: "inputStickerSetThumb" };
        result.stickerset = this.predicate();
        result.thumb_version = this.int();
        return result;
      }],
      [4283715173, function() {
        const result = { _: "folder" };
        result.flags = this.int();
        result.autofill_new_broadcasts = !!(result.flags & 1);
        result.autofill_public_groups = !!(result.flags & 2);
        result.autofill_new_correspondents = !!(result.flags & 4);
        result.id = this.int();
        result.title = this.string();
        if (result.flags & 8)
          result.photo = this.predicate();
        return result;
      }],
      [1908216652, function() {
        const result = { _: "dialogFolder" };
        result.flags = this.int();
        result.pinned = !!(result.flags & 4);
        result.folder = this.predicate();
        result.peer = this.predicate();
        result.top_message = this.int();
        result.unread_muted_peers_count = this.int();
        result.unread_unmuted_peers_count = this.int();
        result.unread_muted_messages_count = this.int();
        result.unread_unmuted_messages_count = this.int();
        return result;
      }],
      [1684014375, function() {
        const result = { _: "inputDialogPeerFolder" };
        result.folder_id = this.int();
        return result;
      }],
      [1363483106, function() {
        const result = { _: "dialogPeerFolder" };
        result.folder_id = this.int();
        return result;
      }],
      [4224893590, function() {
        const result = { _: "inputFolderPeer" };
        result.peer = this.predicate();
        result.folder_id = this.int();
        return result;
      }],
      [3921323624, function() {
        const result = { _: "folderPeer" };
        result.peer = this.predicate();
        result.folder_id = this.int();
        return result;
      }],
      [422972864, function() {
        const result = { _: "updateFolderPeers" };
        result.folder_peers = this.vector(this.predicate, false);
        result.pts = this.int();
        result.pts_count = this.int();
        return result;
      }],
      [497305826, function() {
        const result = { _: "inputUserFromMessage" };
        result.peer = this.predicate();
        result.msg_id = this.int();
        result.user_id = this.long();
        return result;
      }],
      [1536380829, function() {
        const result = { _: "inputChannelFromMessage" };
        result.peer = this.predicate();
        result.msg_id = this.int();
        result.channel_id = this.long();
        return result;
      }],
      [2826635804, function() {
        const result = { _: "inputPeerUserFromMessage" };
        result.peer = this.predicate();
        result.msg_id = this.int();
        result.user_id = this.long();
        return result;
      }],
      [3173648448, function() {
        const result = { _: "inputPeerChannelFromMessage" };
        result.peer = this.predicate();
        result.msg_id = this.int();
        result.channel_id = this.long();
        return result;
      }],
      [55761658, function() {
        const result = { _: "inputPrivacyKeyPhoneNumber" };
        return result;
      }],
      [3516589165, function() {
        const result = { _: "privacyKeyPhoneNumber" };
        return result;
      }],
      [2822794409, function() {
        const result = { _: "topPeerCategoryForwardUsers" };
        return result;
      }],
      [4226728176, function() {
        const result = { _: "topPeerCategoryForwardChats" };
        return result;
      }],
      [84703944, function() {
        const result = { _: "channelAdminLogEventActionChangeLinkedChat" };
        result.prev_value = this.long();
        result.new_value = this.long();
        return result;
      }],
      [3896830975, function() {
        const result = { _: "messages.searchCounter" };
        result.flags = this.int();
        result.inexact = !!(result.flags & 2);
        result.filter = this.predicate();
        result.count = this.int();
        return result;
      }],
      [280464681, function() {
        const result = { _: "keyboardButtonUrlAuth" };
        result.flags = this.int();
        result.text = this.string();
        if (result.flags & 1)
          result.fwd_text = this.string();
        result.url = this.string();
        result.button_id = this.int();
        return result;
      }],
      [3492708308, function() {
        const result = { _: "inputKeyboardButtonUrlAuth" };
        result.flags = this.int();
        result.request_write_access = !!(result.flags & 1);
        result.text = this.string();
        if (result.flags & 2)
          result.fwd_text = this.string();
        result.url = this.string();
        result.bot = this.predicate();
        return result;
      }],
      [2463316494, function() {
        const result = { _: "urlAuthResultRequest" };
        result.flags = this.int();
        result.request_write_access = !!(result.flags & 1);
        result.bot = this.predicate();
        result.domain = this.string();
        return result;
      }],
      [2408320590, function() {
        const result = { _: "urlAuthResultAccepted" };
        result.url = this.string();
        return result;
      }],
      [2849430303, function() {
        const result = { _: "urlAuthResultDefault" };
        return result;
      }],
      [2215004623, function() {
        const result = { _: "inputPrivacyValueAllowChatParticipants" };
        result.chats = this.vector(this.long, false);
        return result;
      }],
      [3914272646, function() {
        const result = { _: "inputPrivacyValueDisallowChatParticipants" };
        result.chats = this.vector(this.long, false);
        return result;
      }],
      [1796427406, function() {
        const result = { _: "privacyValueAllowChatParticipants" };
        result.chats = this.vector(this.long, false);
        return result;
      }],
      [1103656293, function() {
        const result = { _: "privacyValueDisallowChatParticipants" };
        result.chats = this.vector(this.long, false);
        return result;
      }],
      [2622389899, function() {
        const result = { _: "messageEntityUnderline" };
        result.offset = this.int();
        result.length = this.int();
        return result;
      }],
      [3204879316, function() {
        const result = { _: "messageEntityStrike" };
        result.offset = this.int();
        result.length = this.int();
        return result;
      }],
      [34469328, function() {
        const result = { _: "messageEntityBlockquote" };
        result.offset = this.int();
        result.length = this.int();
        return result;
      }],
      [1786671974, function() {
        const result = { _: "updatePeerSettings" };
        result.peer = this.predicate();
        result.settings = this.predicate();
        return result;
      }],
      [3216354699, function() {
        const result = { _: "channelLocationEmpty" };
        return result;
      }],
      [547062491, function() {
        const result = { _: "channelLocation" };
        result.geo_point = this.predicate();
        result.address = this.string();
        return result;
      }],
      [3393592157, function() {
        const result = { _: "peerLocated" };
        result.peer = this.predicate();
        result.expires = this.int();
        result.distance = this.int();
        return result;
      }],
      [3031420848, function() {
        const result = { _: "updatePeerLocated" };
        result.peers = this.vector(this.predicate, false);
        return result;
      }],
      [241923758, function() {
        const result = { _: "channelAdminLogEventActionChangeLocation" };
        result.prev_value = this.predicate();
        result.new_value = this.predicate();
        return result;
      }],
      [3688169197, function() {
        const result = { _: "inputReportReasonGeoIrrelevant" };
        return result;
      }],
      [1401984889, function() {
        const result = { _: "channelAdminLogEventActionToggleSlowMode" };
        result.prev_value = this.int();
        result.new_value = this.int();
        return result;
      }],
      [1148485274, function() {
        const result = { _: "auth.authorizationSignUpRequired" };
        result.flags = this.int();
        if (result.flags & 1)
          result.terms_of_service = this.predicate();
        return result;
      }],
      [3628142905, function() {
        const result = { _: "payments.paymentVerificationNeeded" };
        result.url = this.string();
        return result;
      }],
      [42402760, function() {
        const result = { _: "inputStickerSetAnimatedEmoji" };
        return result;
      }],
      [967122427, function() {
        const result = { _: "updateNewScheduledMessage" };
        result.message = this.predicate();
        return result;
      }],
      [2424728814, function() {
        const result = { _: "updateDeleteScheduledMessages" };
        result.peer = this.predicate();
        result.messages = this.vector(this.int, false);
        return result;
      }],
      [3497176244, function() {
        const result = { _: "restrictionReason" };
        result.platform = this.string();
        result.reason = this.string();
        result.text = this.string();
        return result;
      }],
      [1012306921, function() {
        const result = { _: "inputTheme" };
        result.id = this.long();
        result.access_hash = this.long();
        return result;
      }],
      [4119399921, function() {
        const result = { _: "inputThemeSlug" };
        result.slug = this.string();
        return result;
      }],
      [2685298646, function() {
        const result = { _: "theme" };
        result.flags = this.int();
        result.creator = !!(result.flags & 1);
        result.default = !!(result.flags & 2);
        result.for_chat = !!(result.flags & 32);
        result.id = this.long();
        result.access_hash = this.long();
        result.slug = this.string();
        result.title = this.string();
        if (result.flags & 4)
          result.document = this.predicate();
        if (result.flags & 8)
          result.settings = this.vector(this.predicate);
        if (result.flags & 64)
          result.emoticon = this.string();
        if (result.flags & 16)
          result.installs_count = this.int();
        return result;
      }],
      [4095653410, function() {
        const result = { _: "account.themesNotModified" };
        return result;
      }],
      [2587724909, function() {
        const result = { _: "account.themes" };
        result.hash = this.long();
        result.themes = this.vector(this.predicate, false);
        return result;
      }],
      [2182544291, function() {
        const result = { _: "updateTheme" };
        result.theme = this.predicate();
        return result;
      }],
      [3508640733, function() {
        const result = { _: "inputPrivacyKeyAddedByPhone" };
        return result;
      }],
      [1124062251, function() {
        const result = { _: "privacyKeyAddedByPhone" };
        return result;
      }],
      [2267003193, function() {
        const result = { _: "updateGeoLiveViewed" };
        result.peer = this.predicate();
        result.msg_id = this.int();
        return result;
      }],
      [1448076945, function() {
        const result = { _: "updateLoginToken" };
        return result;
      }],
      [1654593920, function() {
        const result = { _: "auth.loginToken" };
        result.expires = this.int();
        result.token = this.bytes();
        return result;
      }],
      [110008598, function() {
        const result = { _: "auth.loginTokenMigrateTo" };
        result.dc_id = this.int();
        result.token = this.bytes();
        return result;
      }],
      [957176926, function() {
        const result = { _: "auth.loginTokenSuccess" };
        result.authorization = this.predicate();
        return result;
      }],
      [1474462241, function() {
        const result = { _: "account.contentSettings" };
        result.flags = this.int();
        result.sensitive_enabled = !!(result.flags & 1);
        result.sensitive_can_change = !!(result.flags & 2);
        return result;
      }],
      [2837970629, function() {
        const result = { _: "messages.inactiveChats" };
        result.dates = this.vector(this.int, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [3282117730, function() {
        const result = { _: "baseThemeClassic" };
        return result;
      }],
      [4225242760, function() {
        const result = { _: "baseThemeDay" };
        return result;
      }],
      [3081969320, function() {
        const result = { _: "baseThemeNight" };
        return result;
      }],
      [1834973166, function() {
        const result = { _: "baseThemeTinted" };
        return result;
      }],
      [1527845466, function() {
        const result = { _: "baseThemeArctic" };
        return result;
      }],
      [2524595758, function() {
        const result = { _: "inputWallPaperNoFile" };
        result.id = this.long();
        return result;
      }],
      [3766501654, function() {
        const result = { _: "wallPaperNoFile" };
        result.id = this.long();
        result.flags = this.int();
        result.default = !!(result.flags & 2);
        result.dark = !!(result.flags & 16);
        if (result.flags & 4)
          result.settings = this.predicate();
        return result;
      }],
      [2413711439, function() {
        const result = { _: "inputThemeSettings" };
        result.flags = this.int();
        result.message_colors_animated = !!(result.flags & 4);
        result.base_theme = this.predicate();
        result.accent_color = this.int();
        if (result.flags & 8)
          result.outbox_accent_color = this.int();
        if (result.flags & 1)
          result.message_colors = this.vector(this.int);
        if (result.flags & 2)
          result.wallpaper = this.predicate();
        if (result.flags & 2)
          result.wallpaper_settings = this.predicate();
        return result;
      }],
      [4200117972, function() {
        const result = { _: "themeSettings" };
        result.flags = this.int();
        result.message_colors_animated = !!(result.flags & 4);
        result.base_theme = this.predicate();
        result.accent_color = this.int();
        if (result.flags & 8)
          result.outbox_accent_color = this.int();
        if (result.flags & 1)
          result.message_colors = this.vector(this.int);
        if (result.flags & 2)
          result.wallpaper = this.predicate();
        return result;
      }],
      [1421174295, function() {
        const result = { _: "webPageAttributeTheme" };
        result.flags = this.int();
        if (result.flags & 1)
          result.documents = this.vector(this.predicate);
        if (result.flags & 2)
          result.settings = this.predicate();
        return result;
      }],
      [274961865, function() {
        const result = { _: "updateMessagePollVote" };
        result.poll_id = this.long();
        result.user_id = this.long();
        result.options = this.vector(this.bytes, false);
        result.qts = this.int();
        return result;
      }],
      [886196148, function() {
        const result = { _: "messageUserVote" };
        result.user_id = this.long();
        result.option = this.bytes();
        result.date = this.int();
        return result;
      }],
      [1017491692, function() {
        const result = { _: "messageUserVoteInputOption" };
        result.user_id = this.long();
        result.date = this.int();
        return result;
      }],
      [2321933655, function() {
        const result = { _: "messageUserVoteMultiple" };
        result.user_id = this.long();
        result.options = this.vector(this.bytes, false);
        result.date = this.int();
        return result;
      }],
      [136574537, function() {
        const result = { _: "messages.votesList" };
        result.flags = this.int();
        result.count = this.int();
        result.votes = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        if (result.flags & 1)
          result.next_offset = this.string();
        return result;
      }],
      [3150401885, function() {
        const result = { _: "keyboardButtonRequestPoll" };
        result.flags = this.int();
        if (result.flags & 1)
          result.quiz = this.predicate();
        result.text = this.string();
        return result;
      }],
      [1981704948, function() {
        const result = { _: "messageEntityBankCard" };
        result.offset = this.int();
        result.length = this.int();
        return result;
      }],
      [4117234314, function() {
        const result = { _: "bankCardOpenUrl" };
        result.url = this.string();
        result.name = this.string();
        return result;
      }],
      [1042605427, function() {
        const result = { _: "payments.bankCardData" };
        result.title = this.string();
        result.open_urls = this.vector(this.predicate, false);
        return result;
      }],
      [4176226379, function() {
        const result = { _: "peerSelfLocated" };
        result.expires = this.int();
        return result;
      }],
      [1949890536, function() {
        const result = { _: "dialogFilter" };
        result.flags = this.int();
        result.contacts = !!(result.flags & 1);
        result.non_contacts = !!(result.flags & 2);
        result.groups = !!(result.flags & 4);
        result.broadcasts = !!(result.flags & 8);
        result.bots = !!(result.flags & 16);
        result.exclude_muted = !!(result.flags & 2048);
        result.exclude_read = !!(result.flags & 4096);
        result.exclude_archived = !!(result.flags & 8192);
        result.id = this.int();
        result.title = this.string();
        if (result.flags & 33554432)
          result.emoticon = this.string();
        result.pinned_peers = this.vector(this.predicate, false);
        result.include_peers = this.vector(this.predicate, false);
        result.exclude_peers = this.vector(this.predicate, false);
        return result;
      }],
      [2004110666, function() {
        const result = { _: "dialogFilterSuggested" };
        result.filter = this.predicate();
        result.description = this.string();
        return result;
      }],
      [654302845, function() {
        const result = { _: "updateDialogFilter" };
        result.flags = this.int();
        result.id = this.int();
        if (result.flags & 1)
          result.filter = this.predicate();
        return result;
      }],
      [2782339333, function() {
        const result = { _: "updateDialogFilterOrder" };
        result.order = this.vector(this.int, false);
        return result;
      }],
      [889491791, function() {
        const result = { _: "updateDialogFilters" };
        return result;
      }],
      [3057118639, function() {
        const result = { _: "statsDateRangeDays" };
        result.min_date = this.int();
        result.max_date = this.int();
        return result;
      }],
      [3410210014, function() {
        const result = { _: "statsAbsValueAndPrev" };
        result.current = this.double();
        result.previous = this.double();
        return result;
      }],
      [3419287520, function() {
        const result = { _: "statsPercentValue" };
        result.part = this.double();
        result.total = this.double();
        return result;
      }],
      [1244130093, function() {
        const result = { _: "statsGraphAsync" };
        result.token = this.string();
        return result;
      }],
      [3202127906, function() {
        const result = { _: "statsGraphError" };
        result.error = this.string();
        return result;
      }],
      [2393138358, function() {
        const result = { _: "statsGraph" };
        result.flags = this.int();
        result.json = this.predicate();
        if (result.flags & 1)
          result.zoom_token = this.string();
        return result;
      }],
      [2907687357, function() {
        const result = { _: "messageInteractionCounters" };
        result.msg_id = this.int();
        result.views = this.int();
        result.forwards = this.int();
        return result;
      }],
      [3187114900, function() {
        const result = { _: "stats.broadcastStats" };
        result.period = this.predicate();
        result.followers = this.predicate();
        result.views_per_post = this.predicate();
        result.shares_per_post = this.predicate();
        result.enabled_notifications = this.predicate();
        result.growth_graph = this.predicate();
        result.followers_graph = this.predicate();
        result.mute_graph = this.predicate();
        result.top_hours_graph = this.predicate();
        result.interactions_graph = this.predicate();
        result.iv_interactions_graph = this.predicate();
        result.views_by_source_graph = this.predicate();
        result.new_followers_by_source_graph = this.predicate();
        result.languages_graph = this.predicate();
        result.recent_message_interactions = this.vector(this.predicate, false);
        return result;
      }],
      [3866083195, function() {
        const result = { _: "inputMediaDice" };
        result.emoticon = this.string();
        return result;
      }],
      [1065280907, function() {
        const result = { _: "messageMediaDice" };
        result.value = this.int();
        result.emoticon = this.string();
        return result;
      }],
      [3867103758, function() {
        const result = { _: "inputStickerSetDice" };
        result.emoticon = this.string();
        return result;
      }],
      [2566302837, function() {
        const result = { _: "help.promoDataEmpty" };
        result.expires = this.int();
        return result;
      }],
      [2352576831, function() {
        const result = { _: "help.promoData" };
        result.flags = this.int();
        result.proxy = !!(result.flags & 1);
        result.expires = this.int();
        result.peer = this.predicate();
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        if (result.flags & 2)
          result.psa_type = this.string();
        if (result.flags & 4)
          result.psa_message = this.string();
        return result;
      }],
      [3727929492, function() {
        const result = { _: "videoSize" };
        result.flags = this.int();
        result.type = this.string();
        result.w = this.int();
        result.h = this.int();
        result.size = this.int();
        if (result.flags & 1)
          result.video_start_ts = this.double();
        return result;
      }],
      [643940105, function() {
        const result = { _: "updatePhoneCallSignalingData" };
        result.phone_call_id = this.long();
        result.data = this.bytes();
        return result;
      }],
      [1634294960, function() {
        const result = { _: "chatInvitePeek" };
        result.chat = this.predicate();
        result.expires = this.int();
        return result;
      }],
      [2634330011, function() {
        const result = { _: "statsGroupTopPoster" };
        result.user_id = this.long();
        result.messages = this.int();
        result.avg_chars = this.int();
        return result;
      }],
      [3612888199, function() {
        const result = { _: "statsGroupTopAdmin" };
        result.user_id = this.long();
        result.deleted = this.int();
        result.kicked = this.int();
        result.banned = this.int();
        return result;
      }],
      [1398765469, function() {
        const result = { _: "statsGroupTopInviter" };
        result.user_id = this.long();
        result.invitations = this.int();
        return result;
      }],
      [4018141462, function() {
        const result = { _: "stats.megagroupStats" };
        result.period = this.predicate();
        result.members = this.predicate();
        result.messages = this.predicate();
        result.viewers = this.predicate();
        result.posters = this.predicate();
        result.growth_graph = this.predicate();
        result.members_graph = this.predicate();
        result.new_members_by_source_graph = this.predicate();
        result.languages_graph = this.predicate();
        result.messages_graph = this.predicate();
        result.actions_graph = this.predicate();
        result.top_hours_graph = this.predicate();
        result.weekdays_graph = this.predicate();
        result.top_posters = this.vector(this.predicate, false);
        result.top_admins = this.vector(this.predicate, false);
        result.top_inviters = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [3198350372, function() {
        const result = { _: "globalPrivacySettings" };
        result.flags = this.int();
        if (result.flags & 1)
          result.archive_and_mute_new_noncontact_peers = this.predicate();
        return result;
      }],
      [1667228533, function() {
        const result = { _: "phoneConnectionWebrtc" };
        result.flags = this.int();
        result.turn = !!(result.flags & 1);
        result.stun = !!(result.flags & 2);
        result.id = this.long();
        result.ip = this.string();
        result.ipv6 = this.string();
        result.port = this.int();
        result.username = this.string();
        result.password = this.string();
        return result;
      }],
      [1107543535, function() {
        const result = { _: "help.countryCode" };
        result.flags = this.int();
        result.country_code = this.string();
        if (result.flags & 1)
          result.prefixes = this.vector(this.string);
        if (result.flags & 2)
          result.patterns = this.vector(this.string);
        return result;
      }],
      [3280440867, function() {
        const result = { _: "help.country" };
        result.flags = this.int();
        result.hidden = !!(result.flags & 1);
        result.iso2 = this.string();
        result.default_name = this.string();
        if (result.flags & 2)
          result.name = this.string();
        result.country_codes = this.vector(this.predicate, false);
        return result;
      }],
      [2479628082, function() {
        const result = { _: "help.countriesListNotModified" };
        return result;
      }],
      [2278585758, function() {
        const result = { _: "help.countriesList" };
        result.countries = this.vector(this.predicate, false);
        result.hash = this.int();
        return result;
      }],
      [1163625789, function() {
        const result = { _: "messageViews" };
        result.flags = this.int();
        if (result.flags & 1)
          result.views = this.int();
        if (result.flags & 2)
          result.forwards = this.int();
        if (result.flags & 4)
          result.replies = this.predicate();
        return result;
      }],
      [3533318132, function() {
        const result = { _: "updateChannelMessageForwards" };
        result.channel_id = this.long();
        result.id = this.int();
        result.forwards = this.int();
        return result;
      }],
      [4198431637, function() {
        const result = { _: "photoSizeProgressive" };
        result.type = this.string();
        result.w = this.int();
        result.h = this.int();
        result.sizes = this.vector(this.int, false);
        return result;
      }],
      [3066361155, function() {
        const result = { _: "messages.messageViews" };
        result.views = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [3601962310, function() {
        const result = { _: "updateReadChannelDiscussionInbox" };
        result.flags = this.int();
        result.channel_id = this.long();
        result.top_msg_id = this.int();
        result.read_max_id = this.int();
        if (result.flags & 1)
          result.broadcast_id = this.long();
        if (result.flags & 1)
          result.broadcast_post = this.int();
        return result;
      }],
      [1767677564, function() {
        const result = { _: "updateReadChannelDiscussionOutbox" };
        result.channel_id = this.long();
        result.top_msg_id = this.int();
        result.read_max_id = this.int();
        return result;
      }],
      [2788431746, function() {
        const result = { _: "messages.discussionMessage" };
        result.flags = this.int();
        result.messages = this.vector(this.predicate, false);
        if (result.flags & 1)
          result.max_id = this.int();
        if (result.flags & 2)
          result.read_inbox_max_id = this.int();
        if (result.flags & 4)
          result.read_outbox_max_id = this.int();
        result.unread_count = this.int();
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [2799007587, function() {
        const result = { _: "messageReplyHeader" };
        result.flags = this.int();
        result.reply_to_scheduled = !!(result.flags & 4);
        result.forum_topic = !!(result.flags & 8);
        result.reply_to_msg_id = this.int();
        if (result.flags & 1)
          result.reply_to_peer_id = this.predicate();
        if (result.flags & 2)
          result.reply_to_top_id = this.int();
        return result;
      }],
      [2211844034, function() {
        const result = { _: "messageReplies" };
        result.flags = this.int();
        result.comments = !!(result.flags & 1);
        result.replies = this.int();
        result.replies_pts = this.int();
        if (result.flags & 2)
          result.recent_repliers = this.vector(this.predicate);
        if (result.flags & 1)
          result.channel_id = this.long();
        if (result.flags & 4)
          result.max_id = this.int();
        if (result.flags & 8)
          result.read_max_id = this.int();
        return result;
      }],
      [610945826, function() {
        const result = { _: "updatePeerBlocked" };
        result.peer_id = this.predicate();
        result.blocked = this.predicate();
        return result;
      }],
      [3908927508, function() {
        const result = { _: "peerBlocked" };
        result.peer_id = this.predicate();
        result.date = this.int();
        return result;
      }],
      [2357774627, function() {
        const result = { _: "updateChannelUserTyping" };
        result.flags = this.int();
        result.channel_id = this.long();
        if (result.flags & 1)
          result.top_msg_id = this.int();
        result.from_id = this.predicate();
        result.action = this.predicate();
        return result;
      }],
      [2902071934, function() {
        const result = { _: "inputMessageCallbackQuery" };
        result.id = this.int();
        result.query_id = this.long();
        return result;
      }],
      [453242886, function() {
        const result = { _: "channelParticipantLeft" };
        result.peer = this.predicate();
        return result;
      }],
      [3763035371, function() {
        const result = { _: "channelParticipantsMentions" };
        result.flags = this.int();
        if (result.flags & 1)
          result.q = this.string();
        if (result.flags & 2)
          result.top_msg_id = this.int();
        return result;
      }],
      [3984976565, function() {
        const result = { _: "updatePinnedMessages" };
        result.flags = this.int();
        result.pinned = !!(result.flags & 1);
        result.peer = this.predicate();
        result.messages = this.vector(this.int, false);
        result.pts = this.int();
        result.pts_count = this.int();
        return result;
      }],
      [1538885128, function() {
        const result = { _: "updatePinnedChannelMessages" };
        result.flags = this.int();
        result.pinned = !!(result.flags & 1);
        result.channel_id = this.long();
        result.messages = this.vector(this.int, false);
        result.pts = this.int();
        result.pts_count = this.int();
        return result;
      }],
      [464520273, function() {
        const result = { _: "inputMessagesFilterPinned" };
        return result;
      }],
      [2308567701, function() {
        const result = { _: "stats.messageStats" };
        result.views_graph = this.predicate();
        return result;
      }],
      [2564871831, function() {
        const result = { _: "messageActionGeoProximityReached" };
        result.from_id = this.predicate();
        result.to_id = this.predicate();
        result.distance = this.int();
        return result;
      }],
      [3626061121, function() {
        const result = { _: "photoPathSize" };
        result.type = this.string();
        result.bytes = this.bytes();
        return result;
      }],
      [3643548293, function() {
        const result = { _: "speakingInGroupCallAction" };
        return result;
      }],
      [2004925620, function() {
        const result = { _: "groupCallDiscarded" };
        result.id = this.long();
        result.access_hash = this.long();
        result.duration = this.int();
        return result;
      }],
      [3583468812, function() {
        const result = { _: "groupCall" };
        result.flags = this.int();
        result.join_muted = !!(result.flags & 2);
        result.can_change_join_muted = !!(result.flags & 4);
        result.join_date_asc = !!(result.flags & 64);
        result.schedule_start_subscribed = !!(result.flags & 256);
        result.can_start_video = !!(result.flags & 512);
        result.record_video_active = !!(result.flags & 2048);
        result.rtmp_stream = !!(result.flags & 4096);
        result.listeners_hidden = !!(result.flags & 8192);
        result.id = this.long();
        result.access_hash = this.long();
        result.participants_count = this.int();
        if (result.flags & 8)
          result.title = this.string();
        if (result.flags & 16)
          result.stream_dc_id = this.int();
        if (result.flags & 32)
          result.record_start_date = this.int();
        if (result.flags & 128)
          result.schedule_date = this.int();
        if (result.flags & 1024)
          result.unmuted_video_count = this.int();
        result.unmuted_video_limit = this.int();
        result.version = this.int();
        return result;
      }],
      [3635053583, function() {
        const result = { _: "inputGroupCall" };
        result.id = this.long();
        result.access_hash = this.long();
        return result;
      }],
      [2047704898, function() {
        const result = { _: "messageActionGroupCall" };
        result.flags = this.int();
        result.call = this.predicate();
        if (result.flags & 1)
          result.duration = this.int();
        return result;
      }],
      [1345295095, function() {
        const result = { _: "messageActionInviteToGroupCall" };
        result.call = this.predicate();
        result.users = this.vector(this.long, false);
        return result;
      }],
      [3953538814, function() {
        const result = { _: "groupCallParticipant" };
        result.flags = this.int();
        result.muted = !!(result.flags & 1);
        result.left = !!(result.flags & 2);
        result.can_self_unmute = !!(result.flags & 4);
        result.just_joined = !!(result.flags & 16);
        result.versioned = !!(result.flags & 32);
        result.min = !!(result.flags & 256);
        result.muted_by_you = !!(result.flags & 512);
        result.volume_by_admin = !!(result.flags & 1024);
        result.self = !!(result.flags & 4096);
        result.video_joined = !!(result.flags & 32768);
        result.peer = this.predicate();
        result.date = this.int();
        if (result.flags & 8)
          result.active_date = this.int();
        result.source = this.int();
        if (result.flags & 128)
          result.volume = this.int();
        if (result.flags & 2048)
          result.about = this.string();
        if (result.flags & 8192)
          result.raise_hand_rating = this.long();
        if (result.flags & 64)
          result.video = this.predicate();
        if (result.flags & 16384)
          result.presentation = this.predicate();
        return result;
      }],
      [4170869326, function() {
        const result = { _: "updateChat" };
        result.chat_id = this.long();
        return result;
      }],
      [4075543374, function() {
        const result = { _: "updateGroupCallParticipants" };
        result.call = this.predicate();
        result.participants = this.vector(this.predicate, false);
        result.version = this.int();
        return result;
      }],
      [347227392, function() {
        const result = { _: "updateGroupCall" };
        result.chat_id = this.long();
        result.call = this.predicate();
        return result;
      }],
      [2658302637, function() {
        const result = { _: "phone.groupCall" };
        result.call = this.predicate();
        result.participants = this.vector(this.predicate, false);
        result.participants_next_offset = this.string();
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [4101460406, function() {
        const result = { _: "phone.groupParticipants" };
        result.count = this.int();
        result.participants = this.vector(this.predicate, false);
        result.next_offset = this.string();
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        result.version = this.int();
        return result;
      }],
      [813821341, function() {
        const result = { _: "inlineQueryPeerTypeSameBotPM" };
        return result;
      }],
      [2201751468, function() {
        const result = { _: "inlineQueryPeerTypePM" };
        return result;
      }],
      [3613836554, function() {
        const result = { _: "inlineQueryPeerTypeChat" };
        return result;
      }],
      [1589952067, function() {
        const result = { _: "inlineQueryPeerTypeMegagroup" };
        return result;
      }],
      [1664413338, function() {
        const result = { _: "inlineQueryPeerTypeBroadcast" };
        return result;
      }],
      [589338437, function() {
        const result = { _: "channelAdminLogEventActionStartGroupCall" };
        result.call = this.predicate();
        return result;
      }],
      [3684667712, function() {
        const result = { _: "channelAdminLogEventActionDiscardGroupCall" };
        result.call = this.predicate();
        return result;
      }],
      [4179895506, function() {
        const result = { _: "channelAdminLogEventActionParticipantMute" };
        result.participant = this.predicate();
        return result;
      }],
      [3863226816, function() {
        const result = { _: "channelAdminLogEventActionParticipantUnmute" };
        result.participant = this.predicate();
        return result;
      }],
      [1456906823, function() {
        const result = { _: "channelAdminLogEventActionToggleGroupCallSetting" };
        result.join_muted = this.predicate();
        return result;
      }],
      [2328045569, function() {
        const result = { _: "inputPaymentCredentialsGooglePay" };
        result.payment_token = this.predicate();
        return result;
      }],
      [375566091, function() {
        const result = { _: "messages.historyImport" };
        result.id = this.long();
        return result;
      }],
      [3688534598, function() {
        const result = { _: "sendMessageHistoryImportAction" };
        result.progress = this.int();
        return result;
      }],
      [1578088377, function() {
        const result = { _: "messages.historyImportParsed" };
        result.flags = this.int();
        result.pm = !!(result.flags & 1);
        result.group = !!(result.flags & 2);
        if (result.flags & 4)
          result.title = this.string();
        return result;
      }],
      [4124956391, function() {
        const result = { _: "inputReportReasonFake" };
        return result;
      }],
      [4019011180, function() {
        const result = { _: "messages.affectedFoundMessages" };
        result.pts = this.int();
        result.pts_count = this.int();
        result.offset = this.int();
        result.messages = this.vector(this.int, false);
        return result;
      }],
      [1007897979, function() {
        const result = { _: "messageActionSetMessagesTTL" };
        result.flags = this.int();
        result.period = this.int();
        if (result.flags & 1)
          result.auto_setting_from = this.long();
        return result;
      }],
      [3147544997, function() {
        const result = { _: "updatePeerHistoryTTL" };
        result.flags = this.int();
        result.peer = this.predicate();
        if (result.flags & 1)
          result.ttl_period = this.int();
        return result;
      }],
      [3498534458, function() {
        const result = { _: "updateChatParticipant" };
        result.flags = this.int();
        result.chat_id = this.long();
        result.date = this.int();
        result.actor_id = this.long();
        result.user_id = this.long();
        if (result.flags & 1)
          result.prev_participant = this.predicate();
        if (result.flags & 2)
          result.new_participant = this.predicate();
        if (result.flags & 4)
          result.invite = this.predicate();
        result.qts = this.int();
        return result;
      }],
      [2556246715, function() {
        const result = { _: "updateChannelParticipant" };
        result.flags = this.int();
        result.via_chatlist = !!(result.flags & 8);
        result.channel_id = this.long();
        result.date = this.int();
        result.actor_id = this.long();
        result.user_id = this.long();
        if (result.flags & 1)
          result.prev_participant = this.predicate();
        if (result.flags & 2)
          result.new_participant = this.predicate();
        if (result.flags & 4)
          result.invite = this.predicate();
        result.qts = this.int();
        return result;
      }],
      [3297184329, function() {
        const result = { _: "updateBotStopped" };
        result.user_id = this.long();
        result.date = this.int();
        result.stopped = this.predicate();
        result.qts = this.int();
        return result;
      }],
      [2354765785, function() {
        const result = { _: "chatInviteImporter" };
        result.flags = this.int();
        result.requested = !!(result.flags & 1);
        result.via_chatlist = !!(result.flags & 8);
        result.user_id = this.long();
        result.date = this.int();
        if (result.flags & 4)
          result.about = this.string();
        if (result.flags & 2)
          result.approved_by = this.long();
        return result;
      }],
      [3183881676, function() {
        const result = { _: "messages.exportedChatInvites" };
        result.count = this.int();
        result.invites = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [410107472, function() {
        const result = { _: "messages.exportedChatInvite" };
        result.invite = this.predicate();
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [572915951, function() {
        const result = { _: "messages.exportedChatInviteReplaced" };
        result.invite = this.predicate();
        result.new_invite = this.predicate();
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [2176233482, function() {
        const result = { _: "messages.chatInviteImporters" };
        result.count = this.int();
        result.importers = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [4075613987, function() {
        const result = { _: "chatAdminWithInvites" };
        result.admin_id = this.long();
        result.invites_count = this.int();
        result.revoked_invites_count = this.int();
        return result;
      }],
      [3063640791, function() {
        const result = { _: "messages.chatAdminsWithInvites" };
        result.admins = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [4271882584, function() {
        const result = { _: "channelAdminLogEventActionParticipantJoinByInvite" };
        result.flags = this.int();
        result.via_chatlist = !!(result.flags & 1);
        result.invite = this.predicate();
        return result;
      }],
      [1515256996, function() {
        const result = { _: "channelAdminLogEventActionExportedInviteDelete" };
        result.invite = this.predicate();
        return result;
      }],
      [1091179342, function() {
        const result = { _: "channelAdminLogEventActionExportedInviteRevoke" };
        result.invite = this.predicate();
        return result;
      }],
      [3910056793, function() {
        const result = { _: "channelAdminLogEventActionExportedInviteEdit" };
        result.prev_invite = this.predicate();
        result.new_invite = this.predicate();
        return result;
      }],
      [1048537159, function() {
        const result = { _: "channelAdminLogEventActionParticipantVolume" };
        result.participant = this.predicate();
        return result;
      }],
      [1855199800, function() {
        const result = { _: "channelAdminLogEventActionChangeHistoryTTL" };
        result.prev_value = this.int();
        result.new_value = this.int();
        return result;
      }],
      [2723014423, function() {
        const result = { _: "messages.checkedHistoryImportPeer" };
        result.confirm_text = this.string();
        return result;
      }],
      [93890858, function() {
        const result = { _: "inputGroupCallStream" };
        result.flags = this.int();
        result.call = this.predicate();
        result.time_ms = this.long();
        result.scale = this.int();
        if (result.flags & 1)
          result.video_channel = this.int();
        if (result.flags & 1)
          result.video_quality = this.int();
        return result;
      }],
      [2951045695, function() {
        const result = { _: "phone.joinAsPeers" };
        result.peers = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [541839704, function() {
        const result = { _: "phone.exportedGroupCallInvite" };
        result.link = this.string();
        return result;
      }],
      [3622273573, function() {
        const result = { _: "inputBotInlineMessageMediaInvoice" };
        result.flags = this.int();
        result.title = this.string();
        result.description = this.string();
        if (result.flags & 1)
          result.photo = this.predicate();
        result.invoice = this.predicate();
        result.payload = this.bytes();
        result.provider = this.string();
        result.provider_data = this.predicate();
        if (result.flags & 4)
          result.reply_markup = this.predicate();
        return result;
      }],
      [894081801, function() {
        const result = { _: "botInlineMessageMediaInvoice" };
        result.flags = this.int();
        result.shipping_address_requested = !!(result.flags & 2);
        result.test = !!(result.flags & 8);
        result.title = this.string();
        result.description = this.string();
        if (result.flags & 1)
          result.photo = this.predicate();
        result.currency = this.string();
        result.total_amount = this.long();
        if (result.flags & 4)
          result.reply_markup = this.predicate();
        return result;
      }],
      [3013637729, function() {
        const result = { _: "messageActionGroupCallScheduled" };
        result.call = this.predicate();
        result.schedule_date = this.int();
        return result;
      }],
      [3702593719, function() {
        const result = { _: "groupCallParticipantVideoSourceGroup" };
        result.semantics = this.string();
        result.sources = this.vector(this.int, false);
        return result;
      }],
      [1735736008, function() {
        const result = { _: "groupCallParticipantVideo" };
        result.flags = this.int();
        result.paused = !!(result.flags & 1);
        result.endpoint = this.string();
        result.source_groups = this.vector(this.predicate, false);
        if (result.flags & 2)
          result.audio_source = this.int();
        return result;
      }],
      [192428418, function() {
        const result = { _: "updateGroupCallConnection" };
        result.flags = this.int();
        result.presentation = !!(result.flags & 1);
        result.params = this.predicate();
        return result;
      }],
      [2248056895, function() {
        const result = { _: "stickers.suggestedShortName" };
        result.short_name = this.string();
        return result;
      }],
      [795652779, function() {
        const result = { _: "botCommandScopeDefault" };
        return result;
      }],
      [1011811544, function() {
        const result = { _: "botCommandScopeUsers" };
        return result;
      }],
      [1877059713, function() {
        const result = { _: "botCommandScopeChats" };
        return result;
      }],
      [3114950762, function() {
        const result = { _: "botCommandScopeChatAdmins" };
        return result;
      }],
      [3684534653, function() {
        const result = { _: "botCommandScopePeer" };
        result.peer = this.predicate();
        return result;
      }],
      [1071145937, function() {
        const result = { _: "botCommandScopePeerAdmins" };
        result.peer = this.predicate();
        return result;
      }],
      [169026035, function() {
        const result = { _: "botCommandScopePeerUser" };
        result.peer = this.predicate();
        result.user_id = this.predicate();
        return result;
      }],
      [3816265825, function() {
        const result = { _: "account.resetPasswordFailedWait" };
        result.retry_date = this.int();
        return result;
      }],
      [3924819069, function() {
        const result = { _: "account.resetPasswordRequestedWait" };
        result.until_date = this.int();
        return result;
      }],
      [3911636542, function() {
        const result = { _: "account.resetPasswordOk" };
        return result;
      }],
      [1299263278, function() {
        const result = { _: "updateBotCommands" };
        result.peer = this.predicate();
        result.bot_id = this.long();
        result.commands = this.vector(this.predicate, false);
        return result;
      }],
      [2860016453, function() {
        const result = { _: "messageActionSetChatTheme" };
        result.emoticon = this.string();
        return result;
      }],
      [2958739121, function() {
        const result = { _: "sendMessageChooseStickerAction" };
        return result;
      }],
      [4230330408, function() {
        const result = { _: "sponsoredMessage" };
        result.flags = this.int();
        result.recommended = !!(result.flags & 32);
        result.show_peer_photo = !!(result.flags & 64);
        result.random_id = this.bytes();
        if (result.flags & 8)
          result.from_id = this.predicate();
        if (result.flags & 16)
          result.chat_invite = this.predicate();
        if (result.flags & 16)
          result.chat_invite_hash = this.string();
        if (result.flags & 4)
          result.channel_post = this.int();
        if (result.flags & 1)
          result.start_param = this.string();
        result.message = this.string();
        if (result.flags & 2)
          result.entities = this.vector(this.predicate);
        if (result.flags & 128)
          result.sponsor_info = this.string();
        if (result.flags & 256)
          result.additional_info = this.string();
        return result;
      }],
      [3387825543, function() {
        const result = { _: "messages.sponsoredMessages" };
        result.flags = this.int();
        if (result.flags & 1)
          result.posts_between = this.int();
        result.messages = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [215889721, function() {
        const result = { _: "inputStickerSetAnimatedEmojiAnimations" };
        return result;
      }],
      [630664139, function() {
        const result = { _: "sendMessageEmojiInteraction" };
        result.emoticon = this.string();
        result.msg_id = this.int();
        result.interaction = this.predicate();
        return result;
      }],
      [3060109358, function() {
        const result = { _: "sendMessageEmojiInteractionSeen" };
        result.emoticon = this.string();
        return result;
      }],
      [3067680215, function() {
        const result = { _: "inputBotInlineMessageID64" };
        result.dc_id = this.int();
        result.owner_id = this.long();
        result.id = this.int();
        result.access_hash = this.long();
        return result;
      }],
      [3383776159, function() {
        const result = { _: "searchResultsCalendarPeriod" };
        result.date = this.int();
        result.min_msg_id = this.int();
        result.max_msg_id = this.int();
        result.count = this.int();
        return result;
      }],
      [343859772, function() {
        const result = { _: "messages.searchResultsCalendar" };
        result.flags = this.int();
        result.inexact = !!(result.flags & 1);
        result.count = this.int();
        result.min_date = this.int();
        result.min_msg_id = this.int();
        if (result.flags & 2)
          result.offset_id_offset = this.int();
        result.periods = this.vector(this.predicate, false);
        result.messages = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [2137295719, function() {
        const result = { _: "searchResultPosition" };
        result.msg_id = this.int();
        result.date = this.int();
        result.offset = this.int();
        return result;
      }],
      [1404185519, function() {
        const result = { _: "messages.searchResultsPositions" };
        result.count = this.int();
        result.positions = this.vector(this.predicate, false);
        return result;
      }],
      [3955008459, function() {
        const result = { _: "messageActionChatJoinedByRequest" };
        return result;
      }],
      [1885586395, function() {
        const result = { _: "updatePendingJoinRequests" };
        result.peer = this.predicate();
        result.requests_pending = this.int();
        result.recent_requesters = this.vector(this.long, false);
        return result;
      }],
      [299870598, function() {
        const result = { _: "updateBotChatInviteRequester" };
        result.peer = this.predicate();
        result.date = this.int();
        result.user_id = this.long();
        result.about = this.string();
        result.invite = this.predicate();
        result.qts = this.int();
        return result;
      }],
      [2947945546, function() {
        const result = { _: "channelAdminLogEventActionParticipantJoinByRequest" };
        result.invite = this.predicate();
        result.approved_by = this.long();
        return result;
      }],
      [3918005115, function() {
        const result = { _: "inputKeyboardButtonUserProfile" };
        result.text = this.string();
        result.user_id = this.predicate();
        return result;
      }],
      [814112961, function() {
        const result = { _: "keyboardButtonUserProfile" };
        result.text = this.string();
        result.user_id = this.long();
        return result;
      }],
      [4103516358, function() {
        const result = { _: "channels.sendAsPeers" };
        result.peers = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [3408578406, function() {
        const result = { _: "channelAdminLogEventActionToggleNoForwards" };
        result.new_value = this.predicate();
        return result;
      }],
      [3556320491, function() {
        const result = { _: "messages.stickerSetNotModified" };
        return result;
      }],
      [997004590, function() {
        const result = { _: "users.userFull" };
        result.full_user = this.predicate();
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [1753266509, function() {
        const result = { _: "messages.peerSettings" };
        result.settings = this.predicate();
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [663693416, function() {
        const result = { _: "channelAdminLogEventActionSendMessage" };
        result.message = this.predicate();
        return result;
      }],
      [3592083182, function() {
        const result = { _: "auth.codeTypeMissedCall" };
        return result;
      }],
      [2181063812, function() {
        const result = { _: "auth.sentCodeTypeMissedCall" };
        result.prefix = this.string();
        result.length = this.int();
        return result;
      }],
      [3282207583, function() {
        const result = { _: "auth.loggedOut" };
        result.flags = this.int();
        if (result.flags & 1)
          result.future_auth_token = this.bytes();
        return result;
      }],
      [1578843320, function() {
        const result = { _: "updateMessageReactions" };
        result.flags = this.int();
        result.peer = this.predicate();
        result.msg_id = this.int();
        if (result.flags & 1)
          result.top_msg_id = this.int();
        result.reactions = this.predicate();
        return result;
      }],
      [2748435328, function() {
        const result = { _: "reactionCount" };
        result.flags = this.int();
        if (result.flags & 1)
          result.chosen_order = this.int();
        result.reaction = this.predicate();
        result.count = this.int();
        return result;
      }],
      [1328256121, function() {
        const result = { _: "messageReactions" };
        result.flags = this.int();
        result.min = !!(result.flags & 1);
        result.can_see_list = !!(result.flags & 4);
        result.results = this.vector(this.predicate, false);
        if (result.flags & 2)
          result.recent_reactions = this.vector(this.predicate);
        return result;
      }],
      [834488621, function() {
        const result = { _: "messages.messageReactionsList" };
        result.flags = this.int();
        result.count = this.int();
        result.reactions = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        if (result.flags & 1)
          result.next_offset = this.string();
        return result;
      }],
      [3229084673, function() {
        const result = { _: "availableReaction" };
        result.flags = this.int();
        result.inactive = !!(result.flags & 1);
        result.premium = !!(result.flags & 4);
        result.reaction = this.string();
        result.title = this.string();
        result.static_icon = this.predicate();
        result.appear_animation = this.predicate();
        result.select_animation = this.predicate();
        result.activate_animation = this.predicate();
        result.effect_animation = this.predicate();
        if (result.flags & 2)
          result.around_animation = this.predicate();
        if (result.flags & 2)
          result.center_icon = this.predicate();
        return result;
      }],
      [2668042583, function() {
        const result = { _: "messages.availableReactionsNotModified" };
        return result;
      }],
      [1989032621, function() {
        const result = { _: "messages.availableReactions" };
        result.hash = this.int();
        result.reactions = this.vector(this.predicate, false);
        return result;
      }],
      [852137487, function() {
        const result = { _: "messageEntitySpoiler" };
        result.offset = this.int();
        result.length = this.int();
        return result;
      }],
      [3192786680, function() {
        const result = { _: "channelAdminLogEventActionChangeAvailableReactions" };
        result.prev_value = this.predicate();
        result.new_value = this.predicate();
        return result;
      }],
      [2356786748, function() {
        const result = { _: "messagePeerReaction" };
        result.flags = this.int();
        result.big = !!(result.flags & 1);
        result.unread = !!(result.flags & 2);
        result.my = !!(result.flags & 4);
        result.peer_id = this.predicate();
        result.date = this.int();
        result.reaction = this.predicate();
        return result;
      }],
      [2162903215, function() {
        const result = { _: "groupCallStreamChannel" };
        result.channel = this.int();
        result.scale = this.int();
        result.last_timestamp_ms = this.long();
        return result;
      }],
      [3504636594, function() {
        const result = { _: "phone.groupCallStreamChannels" };
        result.channels = this.vector(this.predicate, false);
        return result;
      }],
      [177124030, function() {
        const result = { _: "inputReportReasonIllegalDrugs" };
        return result;
      }],
      [2663876157, function() {
        const result = { _: "inputReportReasonPersonalDetails" };
        return result;
      }],
      [767505458, function() {
        const result = { _: "phone.groupCallStreamRtmpUrl" };
        result.url = this.string();
        result.key = this.string();
        return result;
      }],
      [1165423600, function() {
        const result = { _: "attachMenuBotIconColor" };
        result.name = this.string();
        result.color = this.int();
        return result;
      }],
      [2997303403, function() {
        const result = { _: "attachMenuBotIcon" };
        result.flags = this.int();
        result.name = this.string();
        result.icon = this.predicate();
        if (result.flags & 1)
          result.colors = this.vector(this.predicate);
        return result;
      }],
      [3366595794, function() {
        const result = { _: "attachMenuBot" };
        result.flags = this.int();
        result.inactive = !!(result.flags & 1);
        result.has_settings = !!(result.flags & 2);
        result.request_write_access = !!(result.flags & 4);
        result.bot_id = this.long();
        result.short_name = this.string();
        result.peer_types = this.vector(this.predicate, false);
        result.icons = this.vector(this.predicate, false);
        return result;
      }],
      [4057500252, function() {
        const result = { _: "attachMenuBotsNotModified" };
        return result;
      }],
      [1011024320, function() {
        const result = { _: "attachMenuBots" };
        result.hash = this.long();
        result.bots = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [2478794367, function() {
        const result = { _: "attachMenuBotsBot" };
        result.bot = this.predicate();
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [397910539, function() {
        const result = { _: "updateAttachMenuBots" };
        return result;
      }],
      [202659196, function() {
        const result = { _: "webViewResultUrl" };
        result.query_id = this.long();
        result.url = this.string();
        return result;
      }],
      [2284811963, function() {
        const result = { _: "simpleWebViewResultUrl" };
        result.url = this.string();
        return result;
      }],
      [211046684, function() {
        const result = { _: "webViewMessageSent" };
        result.flags = this.int();
        if (result.flags & 1)
          result.msg_id = this.predicate();
        return result;
      }],
      [361936797, function() {
        const result = { _: "updateWebViewResultSent" };
        result.query_id = this.long();
        return result;
      }],
      [326529584, function() {
        const result = { _: "keyboardButtonWebView" };
        result.text = this.string();
        result.url = this.string();
        return result;
      }],
      [2696958044, function() {
        const result = { _: "keyboardButtonSimpleWebView" };
        result.text = this.string();
        result.url = this.string();
        return result;
      }],
      [1205698681, function() {
        const result = { _: "messageActionWebViewDataSentMe" };
        result.text = this.string();
        result.data = this.string();
        return result;
      }],
      [3032714421, function() {
        const result = { _: "messageActionWebViewDataSent" };
        result.text = this.string();
        return result;
      }],
      [347625491, function() {
        const result = { _: "updateBotMenuButton" };
        result.bot_id = this.long();
        result.button = this.predicate();
        return result;
      }],
      [1966318984, function() {
        const result = { _: "botMenuButtonDefault" };
        return result;
      }],
      [1113113093, function() {
        const result = { _: "botMenuButtonCommands" };
        return result;
      }],
      [3350559974, function() {
        const result = { _: "botMenuButton" };
        result.text = this.string();
        result.url = this.string();
        return result;
      }],
      [4227262641, function() {
        const result = { _: "account.savedRingtonesNotModified" };
        return result;
      }],
      [3253284037, function() {
        const result = { _: "account.savedRingtones" };
        result.hash = this.long();
        result.ringtones = this.vector(this.predicate, false);
        return result;
      }],
      [1960361625, function() {
        const result = { _: "updateSavedRingtones" };
        return result;
      }],
      [2548612798, function() {
        const result = { _: "notificationSoundDefault" };
        return result;
      }],
      [1863070943, function() {
        const result = { _: "notificationSoundNone" };
        return result;
      }],
      [2198575844, function() {
        const result = { _: "notificationSoundLocal" };
        result.title = this.string();
        result.data = this.string();
        return result;
      }],
      [4285300809, function() {
        const result = { _: "notificationSoundRingtone" };
        result.id = this.long();
        return result;
      }],
      [3072737133, function() {
        const result = { _: "account.savedRingtone" };
        return result;
      }],
      [523271863, function() {
        const result = { _: "account.savedRingtoneConverted" };
        result.document = this.predicate();
        return result;
      }],
      [2104224014, function() {
        const result = { _: "attachMenuPeerTypeSameBotPM" };
        return result;
      }],
      [3274439194, function() {
        const result = { _: "attachMenuPeerTypeBotPM" };
        return result;
      }],
      [4047950623, function() {
        const result = { _: "attachMenuPeerTypePM" };
        return result;
      }],
      [84480319, function() {
        const result = { _: "attachMenuPeerTypeChat" };
        return result;
      }],
      [2080104188, function() {
        const result = { _: "attachMenuPeerTypeBroadcast" };
        return result;
      }],
      [3977280183, function() {
        const result = { _: "chatInvitePublicJoinRequests" };
        return result;
      }],
      [3317000281, function() {
        const result = { _: "inputInvoiceMessage" };
        result.peer = this.predicate();
        result.msg_id = this.int();
        return result;
      }],
      [3274099439, function() {
        const result = { _: "inputInvoiceSlug" };
        result.slug = this.string();
        return result;
      }],
      [2932919257, function() {
        const result = { _: "payments.exportedInvoice" };
        result.url = this.string();
        return result;
      }],
      [8703322, function() {
        const result = { _: "updateTranscribedAudio" };
        result.flags = this.int();
        result.pending = !!(result.flags & 1);
        result.peer = this.predicate();
        result.msg_id = this.int();
        result.transcription_id = this.long();
        result.text = this.string();
        return result;
      }],
      [2473929810, function() {
        const result = { _: "messages.transcribedAudio" };
        result.flags = this.int();
        result.pending = !!(result.flags & 1);
        result.transcription_id = this.long();
        result.text = this.string();
        return result;
      }],
      [909284270, function() {
        const result = { _: "dialogFilterDefault" };
        return result;
      }],
      [1395946908, function() {
        const result = { _: "help.premiumPromo" };
        result.status_text = this.string();
        result.status_entities = this.vector(this.predicate, false);
        result.video_sections = this.vector(this.string, false);
        result.videos = this.vector(this.predicate, false);
        result.period_options = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [3369010680, function() {
        const result = { _: "messageEntityCustomEmoji" };
        result.offset = this.int();
        result.length = this.int();
        result.document_id = this.long();
        return result;
      }],
      [4245985433, function() {
        const result = { _: "documentAttributeCustomEmoji" };
        result.flags = this.int();
        result.free = !!(result.flags & 1);
        result.text_color = !!(result.flags & 2);
        result.alt = this.string();
        result.stickerset = this.predicate();
        return result;
      }],
      [1087454222, function() {
        const result = { _: "stickerSetFullCovered" };
        result.set = this.predicate();
        result.packs = this.vector(this.predicate, false);
        result.keywords = this.vector(this.predicate, false);
        result.documents = this.vector(this.predicate, false);
        return result;
      }],
      [2792693350, function() {
        const result = { _: "inputStorePaymentPremiumSubscription" };
        result.flags = this.int();
        result.restore = !!(result.flags & 1);
        result.upgrade = !!(result.flags & 2);
        return result;
      }],
      [1634697192, function() {
        const result = { _: "inputStorePaymentGiftPremium" };
        result.user_id = this.predicate();
        result.currency = this.string();
        result.amount = this.long();
        return result;
      }],
      [3359468268, function() {
        const result = { _: "messageActionGiftPremium" };
        result.flags = this.int();
        result.currency = this.string();
        result.amount = this.long();
        result.months = this.int();
        if (result.flags & 1)
          result.crypto_currency = this.string();
        if (result.flags & 1)
          result.crypto_amount = this.long();
        return result;
      }],
      [1958953753, function() {
        const result = { _: "premiumGiftOption" };
        result.flags = this.int();
        result.months = this.int();
        result.currency = this.string();
        result.amount = this.long();
        result.bot_url = this.string();
        if (result.flags & 1)
          result.store_product = this.string();
        return result;
      }],
      [3364567810, function() {
        const result = { _: "inputStickerSetPremiumGifts" };
        return result;
      }],
      [4216080748, function() {
        const result = { _: "updateReadFeaturedEmojiStickers" };
        return result;
      }],
      [2934349160, function() {
        const result = { _: "inputPrivacyKeyVoiceMessages" };
        return result;
      }],
      [110621716, function() {
        const result = { _: "privacyKeyVoiceMessages" };
        return result;
      }],
      [2298016283, function() {
        const result = { _: "paymentFormMethod" };
        result.url = this.string();
        result.title = this.string();
        return result;
      }],
      [4100974884, function() {
        const result = { _: "inputWebFileAudioAlbumThumbLocation" };
        result.flags = this.int();
        result.small = !!(result.flags & 4);
        if (result.flags & 1)
          result.document = this.predicate();
        if (result.flags & 2)
          result.title = this.string();
        if (result.flags & 2)
          result.performer = this.string();
        return result;
      }],
      [769727150, function() {
        const result = { _: "emojiStatusEmpty" };
        return result;
      }],
      [2459656605, function() {
        const result = { _: "emojiStatus" };
        result.document_id = this.long();
        return result;
      }],
      [4197492935, function() {
        const result = { _: "emojiStatusUntil" };
        result.document_id = this.long();
        result.until = this.int();
        return result;
      }],
      [674706841, function() {
        const result = { _: "updateUserEmojiStatus" };
        result.user_id = this.long();
        result.emoji_status = this.predicate();
        return result;
      }],
      [821314523, function() {
        const result = { _: "updateRecentEmojiStatuses" };
        return result;
      }],
      [3498894917, function() {
        const result = { _: "account.emojiStatusesNotModified" };
        return result;
      }],
      [2428790737, function() {
        const result = { _: "account.emojiStatuses" };
        result.hash = this.long();
        result.statuses = this.vector(this.predicate, false);
        return result;
      }],
      [2046153753, function() {
        const result = { _: "reactionEmpty" };
        return result;
      }],
      [455247544, function() {
        const result = { _: "reactionEmoji" };
        result.emoticon = this.string();
        return result;
      }],
      [2302016627, function() {
        const result = { _: "reactionCustomEmoji" };
        result.document_id = this.long();
        return result;
      }],
      [3942396604, function() {
        const result = { _: "chatReactionsNone" };
        return result;
      }],
      [1385335754, function() {
        const result = { _: "chatReactionsAll" };
        result.flags = this.int();
        result.allow_custom = !!(result.flags & 1);
        return result;
      }],
      [1713193015, function() {
        const result = { _: "chatReactionsSome" };
        result.reactions = this.vector(this.predicate, false);
        return result;
      }],
      [2960120799, function() {
        const result = { _: "messages.reactionsNotModified" };
        return result;
      }],
      [3942512406, function() {
        const result = { _: "messages.reactions" };
        result.hash = this.long();
        result.reactions = this.vector(this.predicate, false);
        return result;
      }],
      [1870160884, function() {
        const result = { _: "updateRecentReactions" };
        return result;
      }],
      [2264715141, function() {
        const result = { _: "updateMoveStickerSetToTop" };
        result.flags = this.int();
        result.masks = !!(result.flags & 1);
        result.emojis = !!(result.flags & 2);
        result.stickerset = this.long();
        return result;
      }],
      [4098946459, function() {
        const result = { _: "auth.sentCodeTypeEmailCode" };
        result.flags = this.int();
        result.apple_signin_allowed = !!(result.flags & 1);
        result.google_signin_allowed = !!(result.flags & 2);
        result.email_pattern = this.string();
        result.length = this.int();
        if (result.flags & 8)
          result.reset_available_period = this.int();
        if (result.flags & 16)
          result.reset_pending_date = this.int();
        return result;
      }],
      [2773032426, function() {
        const result = { _: "auth.sentCodeTypeSetUpEmailRequired" };
        result.flags = this.int();
        result.apple_signin_allowed = !!(result.flags & 1);
        result.google_signin_allowed = !!(result.flags & 2);
        return result;
      }],
      [1128644211, function() {
        const result = { _: "emailVerifyPurposeLoginSetup" };
        result.phone_number = this.string();
        result.phone_code_hash = this.string();
        return result;
      }],
      [1383932651, function() {
        const result = { _: "emailVerifyPurposeLoginChange" };
        return result;
      }],
      [3153401477, function() {
        const result = { _: "emailVerifyPurposePassport" };
        return result;
      }],
      [2452510121, function() {
        const result = { _: "emailVerificationCode" };
        result.code = this.string();
        return result;
      }],
      [3683688130, function() {
        const result = { _: "emailVerificationGoogle" };
        result.token = this.string();
        return result;
      }],
      [2530243837, function() {
        const result = { _: "emailVerificationApple" };
        result.token = this.string();
        return result;
      }],
      [731303195, function() {
        const result = { _: "account.emailVerified" };
        result.email = this.string();
        return result;
      }],
      [3787132257, function() {
        const result = { _: "account.emailVerifiedLogin" };
        result.email = this.string();
        result.sent_code = this.predicate();
        return result;
      }],
      [1596792306, function() {
        const result = { _: "premiumSubscriptionOption" };
        result.flags = this.int();
        result.current = !!(result.flags & 2);
        result.can_purchase_upgrade = !!(result.flags & 4);
        if (result.flags & 8)
          result.transaction = this.string();
        result.months = this.int();
        result.currency = this.string();
        result.amount = this.long();
        result.bot_url = this.string();
        if (result.flags & 1)
          result.store_product = this.string();
        return result;
      }],
      [80008398, function() {
        const result = { _: "inputStickerSetEmojiGenericAnimations" };
        return result;
      }],
      [701560302, function() {
        const result = { _: "inputStickerSetEmojiDefaultStatuses" };
        return result;
      }],
      [3088871476, function() {
        const result = { _: "sendAsPeer" };
        result.flags = this.int();
        result.premium_required = !!(result.flags & 1);
        result.peer = this.predicate();
        return result;
      }],
      [2908916936, function() {
        const result = { _: "messageExtendedMediaPreview" };
        result.flags = this.int();
        if (result.flags & 1)
          result.w = this.int();
        if (result.flags & 1)
          result.h = this.int();
        if (result.flags & 2)
          result.thumb = this.predicate();
        if (result.flags & 4)
          result.video_duration = this.int();
        return result;
      }],
      [3997670500, function() {
        const result = { _: "messageExtendedMedia" };
        result.media = this.predicate();
        return result;
      }],
      [1517529484, function() {
        const result = { _: "updateMessageExtendedMedia" };
        result.peer = this.predicate();
        result.msg_id = this.int();
        result.extended_media = this.predicate();
        return result;
      }],
      [4244550300, function() {
        const result = { _: "stickerKeyword" };
        result.document_id = this.long();
        result.keyword = this.vector(this.string, false);
        return result;
      }],
      [3020371527, function() {
        const result = { _: "username" };
        result.flags = this.int();
        result.editable = !!(result.flags & 1);
        result.active = !!(result.flags & 2);
        result.username = this.string();
        return result;
      }],
      [4031755177, function() {
        const result = { _: "channelAdminLogEventActionChangeUsernames" };
        result.prev_value = this.vector(this.string, false);
        result.new_value = this.vector(this.string, false);
        return result;
      }],
      [46949251, function() {
        const result = { _: "channelAdminLogEventActionToggleForum" };
        result.new_value = this.predicate();
        return result;
      }],
      [1483767080, function() {
        const result = { _: "channelAdminLogEventActionCreateTopic" };
        result.topic = this.predicate();
        return result;
      }],
      [4033864200, function() {
        const result = { _: "channelAdminLogEventActionEditTopic" };
        result.prev_topic = this.predicate();
        result.new_topic = this.predicate();
        return result;
      }],
      [2920712457, function() {
        const result = { _: "channelAdminLogEventActionDeleteTopic" };
        result.topic = this.predicate();
        return result;
      }],
      [1569535291, function() {
        const result = { _: "channelAdminLogEventActionPinTopic" };
        result.flags = this.int();
        if (result.flags & 1)
          result.prev_topic = this.predicate();
        if (result.flags & 2)
          result.new_topic = this.predicate();
        return result;
      }],
      [37687451, function() {
        const result = { _: "forumTopicDeleted" };
        result.id = this.int();
        return result;
      }],
      [1903173033, function() {
        const result = { _: "forumTopic" };
        result.flags = this.int();
        result.my = !!(result.flags & 2);
        result.closed = !!(result.flags & 4);
        result.pinned = !!(result.flags & 8);
        result.short = !!(result.flags & 32);
        result.hidden = !!(result.flags & 64);
        result.id = this.int();
        result.date = this.int();
        result.title = this.string();
        result.icon_color = this.int();
        if (result.flags & 1)
          result.icon_emoji_id = this.long();
        result.top_message = this.int();
        result.read_inbox_max_id = this.int();
        result.read_outbox_max_id = this.int();
        result.unread_count = this.int();
        result.unread_mentions_count = this.int();
        result.unread_reactions_count = this.int();
        result.from_id = this.predicate();
        result.notify_settings = this.predicate();
        if (result.flags & 16)
          result.draft = this.predicate();
        return result;
      }],
      [913709011, function() {
        const result = { _: "messages.forumTopics" };
        result.flags = this.int();
        result.order_by_create_date = !!(result.flags & 1);
        result.count = this.int();
        result.topics = this.vector(this.predicate, false);
        result.messages = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        result.pts = this.int();
        return result;
      }],
      [228168278, function() {
        const result = { _: "messageActionTopicCreate" };
        result.flags = this.int();
        result.title = this.string();
        result.icon_color = this.int();
        if (result.flags & 1)
          result.icon_emoji_id = this.long();
        return result;
      }],
      [3230943264, function() {
        const result = { _: "messageActionTopicEdit" };
        result.flags = this.int();
        if (result.flags & 1)
          result.title = this.string();
        if (result.flags & 2)
          result.icon_emoji_id = this.long();
        if (result.flags & 4)
          result.closed = this.predicate();
        if (result.flags & 8)
          result.hidden = this.predicate();
        return result;
      }],
      [422509539, function() {
        const result = { _: "updateChannelPinnedTopic" };
        result.flags = this.int();
        result.pinned = !!(result.flags & 1);
        result.channel_id = this.long();
        result.topic_id = this.int();
        return result;
      }],
      [1548122514, function() {
        const result = { _: "inputNotifyForumTopic" };
        result.peer = this.predicate();
        result.top_msg_id = this.int();
        return result;
      }],
      [577659656, function() {
        const result = { _: "notifyForumTopic" };
        result.peer = this.predicate();
        result.top_msg_id = this.int();
        return result;
      }],
      [1153562857, function() {
        const result = { _: "inputStickerSetEmojiDefaultTopicIcons" };
        return result;
      }],
      [406407439, function() {
        const result = { _: "messages.sponsoredMessagesEmpty" };
        return result;
      }],
      [4263085570, function() {
        const result = { _: "updateChannelPinnedTopics" };
        result.flags = this.int();
        result.channel_id = this.long();
        if (result.flags & 1)
          result.order = this.vector(this.int);
        return result;
      }],
      [1135897376, function() {
        const result = { _: "defaultHistoryTTL" };
        result.period = this.int();
        return result;
      }],
      [116234636, function() {
        const result = { _: "auth.codeTypeFragmentSms" };
        return result;
      }],
      [3646315577, function() {
        const result = { _: "auth.sentCodeTypeFragmentSms" };
        result.url = this.string();
        result.length = this.int();
        return result;
      }],
      [1103040667, function() {
        const result = { _: "exportedContactToken" };
        result.url = this.string();
        result.expires = this.int();
        return result;
      }],
      [1693675004, function() {
        const result = { _: "channelAdminLogEventActionToggleAntiSpam" };
        result.new_value = this.predicate();
        return result;
      }],
      [1474192222, function() {
        const result = { _: "messageActionSuggestProfilePhoto" };
        result.photo = this.predicate();
        return result;
      }],
      [2008112412, function() {
        const result = { _: "stickerSetNoCovered" };
        result.set = this.predicate();
        return result;
      }],
      [542282808, function() {
        const result = { _: "updateUser" };
        result.user_id = this.long();
        return result;
      }],
      [596704836, function() {
        const result = { _: "auth.sentCodeSuccess" };
        result.authorization = this.predicate();
        return result;
      }],
      [4269225053, function() {
        const result = { _: "messageActionRequestedPeer" };
        result.button_id = this.int();
        result.peer = this.predicate();
        return result;
      }],
      [1597737472, function() {
        const result = { _: "requestPeerTypeUser" };
        result.flags = this.int();
        if (result.flags & 1)
          result.bot = this.predicate();
        if (result.flags & 2)
          result.premium = this.predicate();
        return result;
      }],
      [3387977243, function() {
        const result = { _: "requestPeerTypeChat" };
        result.flags = this.int();
        result.creator = !!(result.flags & 1);
        result.bot_participant = !!(result.flags & 32);
        if (result.flags & 8)
          result.has_username = this.predicate();
        if (result.flags & 16)
          result.forum = this.predicate();
        if (result.flags & 2)
          result.user_admin_rights = this.predicate();
        if (result.flags & 4)
          result.bot_admin_rights = this.predicate();
        return result;
      }],
      [865857388, function() {
        const result = { _: "requestPeerTypeBroadcast" };
        result.flags = this.int();
        result.creator = !!(result.flags & 1);
        if (result.flags & 8)
          result.has_username = this.predicate();
        if (result.flags & 2)
          result.user_admin_rights = this.predicate();
        if (result.flags & 4)
          result.bot_admin_rights = this.predicate();
        return result;
      }],
      [218842764, function() {
        const result = { _: "keyboardButtonRequestPeer" };
        result.text = this.string();
        result.button_id = this.int();
        result.peer_type = this.predicate();
        return result;
      }],
      [1209970170, function() {
        const result = { _: "emojiListNotModified" };
        return result;
      }],
      [2048790993, function() {
        const result = { _: "emojiList" };
        result.hash = this.long();
        result.document_id = this.vector(this.long, false);
        return result;
      }],
      [3850048562, function() {
        const result = { _: "auth.sentCodeTypeFirebaseSms" };
        result.flags = this.int();
        if (result.flags & 1)
          result.nonce = this.bytes();
        if (result.flags & 2)
          result.receipt = this.string();
        if (result.flags & 2)
          result.push_timeout = this.int();
        result.length = this.int();
        return result;
      }],
      [2056961449, function() {
        const result = { _: "emojiGroup" };
        result.title = this.string();
        result.icon_emoji_id = this.long();
        result.emoticons = this.vector(this.string, false);
        return result;
      }],
      [1874111879, function() {
        const result = { _: "messages.emojiGroupsNotModified" };
        return result;
      }],
      [2283780427, function() {
        const result = { _: "messages.emojiGroups" };
        result.hash = this.int();
        result.groups = this.vector(this.predicate, false);
        return result;
      }],
      [4166795580, function() {
        const result = { _: "videoSizeEmojiMarkup" };
        result.emoji_id = this.long();
        result.background_colors = this.vector(this.int, false);
        return result;
      }],
      [228623102, function() {
        const result = { _: "videoSizeStickerMarkup" };
        result.stickerset = this.predicate();
        result.sticker_id = this.long();
        result.background_colors = this.vector(this.int, false);
        return result;
      }],
      [1964978502, function() {
        const result = { _: "textWithEntities" };
        result.text = this.string();
        result.entities = this.vector(this.predicate, false);
        return result;
      }],
      [870003448, function() {
        const result = { _: "messages.translateResult" };
        result.result = this.vector(this.predicate, false);
        return result;
      }],
      [3360175310, function() {
        const result = { _: "autoSaveSettings" };
        result.flags = this.int();
        result.photos = !!(result.flags & 1);
        result.videos = !!(result.flags & 2);
        if (result.flags & 4)
          result.video_max_size = this.long();
        return result;
      }],
      [2170563911, function() {
        const result = { _: "autoSaveException" };
        result.peer = this.predicate();
        result.settings = this.predicate();
        return result;
      }],
      [1279133341, function() {
        const result = { _: "account.autoSaveSettings" };
        result.users_settings = this.predicate();
        result.chats_settings = this.predicate();
        result.broadcasts_settings = this.predicate();
        result.exceptions = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [3959795863, function() {
        const result = { _: "updateAutoSaveSettings" };
        return result;
      }],
      [2094949405, function() {
        const result = { _: "help.appConfigNotModified" };
        return result;
      }],
      [3709368366, function() {
        const result = { _: "help.appConfig" };
        result.hash = this.int();
        result.config = this.predicate();
        return result;
      }],
      [2837495162, function() {
        const result = { _: "inputBotAppID" };
        result.id = this.long();
        result.access_hash = this.long();
        return result;
      }],
      [2425095175, function() {
        const result = { _: "inputBotAppShortName" };
        result.bot_id = this.predicate();
        result.short_name = this.string();
        return result;
      }],
      [1571189943, function() {
        const result = { _: "botAppNotModified" };
        return result;
      }],
      [2516373974, function() {
        const result = { _: "botApp" };
        result.flags = this.int();
        result.id = this.long();
        result.access_hash = this.long();
        result.short_name = this.string();
        result.title = this.string();
        result.description = this.string();
        result.photo = this.predicate();
        if (result.flags & 1)
          result.document = this.predicate();
        result.hash = this.long();
        return result;
      }],
      [3947933173, function() {
        const result = { _: "messages.botApp" };
        result.flags = this.int();
        result.inactive = !!(result.flags & 1);
        result.request_write_access = !!(result.flags & 2);
        result.app = this.predicate();
        return result;
      }],
      [1008422669, function() {
        const result = { _: "appWebViewResultUrl" };
        result.url = this.string();
        return result;
      }],
      [3044185557, function() {
        const result = { _: "inlineBotWebView" };
        result.text = this.string();
        result.url = this.string();
        return result;
      }],
      [1246753138, function() {
        const result = { _: "readParticipantDate" };
        result.user_id = this.long();
        result.date = this.int();
        return result;
      }],
      [3438316246, function() {
        const result = { _: "updateGroupInvitePrivacyForbidden" };
        result.user_id = this.long();
        return result;
      }],
      [3595175080, function() {
        const result = { _: "dialogFilterChatlist" };
        result.flags = this.int();
        result.has_my_invites = !!(result.flags & 67108864);
        result.id = this.int();
        result.title = this.string();
        if (result.flags & 33554432)
          result.emoticon = this.string();
        result.pinned_peers = this.vector(this.predicate, false);
        result.include_peers = this.vector(this.predicate, false);
        return result;
      }],
      [4091599411, function() {
        const result = { _: "inputChatlistDialogFilter" };
        result.filter_id = this.int();
        return result;
      }],
      [206668204, function() {
        const result = { _: "exportedChatlistInvite" };
        result.flags = this.int();
        result.title = this.string();
        result.url = this.string();
        result.peers = this.vector(this.predicate, false);
        return result;
      }],
      [283567014, function() {
        const result = { _: "chatlists.exportedChatlistInvite" };
        result.filter = this.predicate();
        result.invite = this.predicate();
        return result;
      }],
      [279670215, function() {
        const result = { _: "chatlists.exportedInvites" };
        result.invites = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [4203214425, function() {
        const result = { _: "chatlists.chatlistInviteAlready" };
        result.filter_id = this.int();
        result.missing_peers = this.vector(this.predicate, false);
        result.already_peers = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [500007837, function() {
        const result = { _: "chatlists.chatlistInvite" };
        result.flags = this.int();
        result.title = this.string();
        if (result.flags & 1)
          result.emoticon = this.string();
        result.peers = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [2478671757, function() {
        const result = { _: "chatlists.chatlistUpdates" };
        result.missing_peers = this.vector(this.predicate, false);
        result.chats = this.vector(this.predicate, false);
        result.users = this.vector(this.predicate, false);
        return result;
      }],
      [3158616359, function() {
        const result = { _: "messageActionSetChatWallPaper" };
        result.wallpaper = this.predicate();
        return result;
      }],
      [3229121901, function() {
        const result = { _: "messageActionSetSameChatWallPaper" };
        result.wallpaper = this.predicate();
        return result;
      }],
      [3903288752, function() {
        const result = { _: "bots.botInfo" };
        result.name = this.string();
        result.about = this.string();
        result.description = this.string();
        return result;
      }],
      [238759180, function() {
        const result = { _: "inlineQueryPeerTypeBotPM" };
        return result;
      }]
    ]);
    module.exports = parserMap;
  }
});

// node_modules/@mtproto/core/src/tl/deserializer/index.js
var require_deserializer = __commonJS({
  "node_modules/@mtproto/core/src/tl/deserializer/index.js"(exports, module) {
    var pako = require_pako();
    var parserMap = require_parser();
    var { intsToLong } = require_common();
    var Deserializer = class _Deserializer {
      constructor(buffer) {
        this.buffer = buffer;
        this.byteView = new Uint8Array(this.buffer);
        this.dataView = new DataView(
          this.buffer,
          this.byteView.byteOffset,
          this.byteView.byteLength
        );
        this.offset = 0;
      }
      uint32() {
        const value = this.dataView.getUint32(this.offset, true);
        this.offset += 4;
        return value;
      }
      int32() {
        const value = this.dataView.getInt32(this.offset, true);
        this.offset += 4;
        return value;
      }
      long() {
        const high = this.uint32();
        const low = this.uint32();
        const result = intsToLong(low, high);
        return result;
      }
      int128() {
        return this.byteView.slice(this.offset, this.offset += 16);
      }
      int256() {
        return this.byteView.slice(this.offset, this.offset += 32);
      }
      double() {
        const value = this.dataView.getFloat64(this.offset, true);
        this.offset += 8;
        return value;
      }
      string() {
        const decoder = new TextDecoder();
        return decoder.decode(this.bytes());
      }
      bytes() {
        let length = this.byteView[this.offset++];
        if (length === 254) {
          length = this.byteView[this.offset++] | this.byteView[this.offset++] << 8 | this.byteView[this.offset++] << 16;
        }
        const bytes = this.byteView.slice(this.offset, this.offset += length);
        while (this.offset % 4 !== 0) {
          this.offset++;
        }
        return bytes;
      }
      int() {
        return this.int32();
      }
      vector(fn, bare = false) {
        if (!bare) {
          this.int32();
        }
        const length = this.int32();
        const result = [];
        for (let i = 0; i < length; i++) {
          result.push(fn.call(this));
        }
        return result;
      }
      gzip() {
        const gzippedBytes = this.bytes();
        const deserializer = new _Deserializer(pako.inflate(gzippedBytes).buffer);
        const result = deserializer.predicate();
        return result;
      }
      mt_message() {
        const fn = parserMap.get(1538843921);
        return fn.call(this);
      }
      predicate() {
        const id = this.int32() >>> 0;
        const fn = parserMap.get(id);
        if (!fn) {
          console.log("Not found predicate with id:", id);
          return;
        }
        return fn.call(this);
      }
    };
    module.exports = Deserializer;
  }
});

// node_modules/@mtproto/core/node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/@mtproto/core/node_modules/ms/index.js"(exports, module) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/@mtproto/core/node_modules/debug/src/common.js
var require_common3 = __commonJS({
  "node_modules/@mtproto/core/node_modules/debug/src/common.js"(exports, module) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
          if (!debug.enabled) {
            return;
          }
          const self2 = debug;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self2, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module.exports = setup;
  }
});

// node_modules/@mtproto/core/node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/@mtproto/core/node_modules/debug/src/browser.js"(exports, module) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module.exports = require_common3()(exports);
    var { formatters } = module.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// node_modules/@mtproto/core/src/utils/common/base-debug/index.js
var require_base_debug = __commonJS({
  "node_modules/@mtproto/core/src/utils/common/base-debug/index.js"(exports, module) {
    var createDebug = require_browser();
    module.exports = createDebug("mtproto-core");
  }
});

// node_modules/leemon/es/index.js
var es_exports = {};
__export(es_exports, {
  GCD: () => GCD,
  GCD_: () => GCD_,
  add: () => add,
  addInt: () => addInt,
  addInt_: () => addInt_,
  addShift_: () => addShift_,
  add_: () => add_,
  bigInt2str: () => bigInt2str,
  bitSize: () => bitSize,
  bpe: () => bpe,
  carry_: () => carry_,
  copyInt_: () => copyInt_,
  copy_: () => copy_,
  divInt_: () => divInt_,
  divide_: () => divide_,
  dup: () => dup,
  eGCD_: () => eGCD_,
  equals: () => equals,
  equalsInt: () => equalsInt,
  expand: () => expand,
  findPrimes: () => findPrimes,
  greater: () => greater,
  greaterShift: () => greaterShift,
  halve_: () => halve_,
  int2bigInt: () => int2bigInt,
  inverseMod: () => inverseMod,
  inverseModInt: () => inverseModInt,
  inverseMod_: () => inverseMod_,
  isZero: () => isZero,
  leftShift_: () => leftShift_,
  linCombShift_: () => linCombShift_,
  linComb_: () => linComb_,
  millerRabin: () => millerRabin,
  millerRabinInt: () => millerRabinInt,
  mod: () => mod,
  modInt: () => modInt,
  mod_: () => mod_,
  mont_: () => mont_,
  mult: () => mult,
  multInt_: () => multInt_,
  multMod: () => multMod,
  multMod_: () => multMod_,
  mult_: () => mult_,
  negative: () => negative,
  one: () => one,
  powMod: () => powMod,
  powMod_: () => powMod_,
  randBigInt: () => randBigInt,
  randBigInt_: () => randBigInt_,
  randProbPrime: () => randProbPrime,
  randProbPrimeRounds: () => randProbPrimeRounds,
  randTruePrime: () => randTruePrime,
  randTruePrime_: () => randTruePrime_,
  rightShift_: () => rightShift_,
  squareMod_: () => squareMod_,
  str2bigInt: () => str2bigInt,
  sub: () => sub,
  subShift_: () => subShift_,
  sub_: () => sub_,
  trim: () => trim,
  zero: () => zero
});
function findPrimes(n) {
  var i, s, p, ans;
  s = new Array(n);
  for (i = 0; i < n; i++) {
    s[i] = 0;
  }
  s[0] = 2;
  p = 0;
  for (; s[p] < n; ) {
    for (i = s[p] * s[p]; i < n; i += s[p]) {
      s[i] = 1;
    }
    p++;
    s[p] = s[p - 1] + 1;
    for (; s[p] < n && s[s[p]]; s[p]++) {
      ;
    }
  }
  ans = new Array(p);
  for (i = 0; i < p; i++) {
    ans[i] = s[i];
  }
  return ans;
}
function millerRabinInt(x, b) {
  if (mr_x1.length !== x.length) {
    mr_x1 = dup(x);
    mr_r = dup(x);
    mr_a = dup(x);
  }
  copyInt_(mr_a, b);
  return millerRabin(x, mr_a);
}
function millerRabin(x, b) {
  var i, j, k2, s;
  if (mr_x1.length !== x.length) {
    mr_x1 = dup(x);
    mr_r = dup(x);
    mr_a = dup(x);
  }
  copy_(mr_a, b);
  copy_(mr_r, x);
  copy_(mr_x1, x);
  addInt_(mr_r, -1);
  addInt_(mr_x1, -1);
  k2 = 0;
  for (i = 0; i < mr_r.length; i++) {
    for (j = 1; j < mask; j <<= 1) {
      if (x[i] & j) {
        s = k2 < mr_r.length + bpe ? k2 : 0;
        i = mr_r.length;
        j = mask;
      } else
        k2++;
    }
  }
  if (s)
    rightShift_(mr_r, s);
  powMod_(mr_a, mr_r, x);
  if (!equalsInt(mr_a, 1) && !equals(mr_a, mr_x1)) {
    j = 1;
    while (j <= s - 1 && !equals(mr_a, mr_x1)) {
      squareMod_(mr_a, x);
      if (equalsInt(mr_a, 1)) {
        return 0;
      }
      j++;
    }
    if (!equals(mr_a, mr_x1)) {
      return 0;
    }
  }
  return 1;
}
function bitSize(x) {
  var j, z, w;
  for (j = x.length - 1; x[j] == 0 && j > 0; j--) {
    ;
  }
  for (z = 0, w = x[j]; w; w >>= 1, z++) {
    ;
  }
  z += bpe * j;
  return z;
}
function expand(x, n) {
  var ans = int2bigInt(0, (x.length > n ? x.length : n) * bpe, 0);
  copy_(ans, x);
  return ans;
}
function randTruePrime(k2) {
  var ans = int2bigInt(0, k2, 0);
  randTruePrime_(ans, k2);
  return trim(ans, 1);
}
function randProbPrime(k2) {
  if (k2 >= 600)
    return randProbPrimeRounds(k2, 2);
  if (k2 >= 550)
    return randProbPrimeRounds(k2, 4);
  if (k2 >= 500)
    return randProbPrimeRounds(k2, 5);
  if (k2 >= 400)
    return randProbPrimeRounds(k2, 6);
  if (k2 >= 350)
    return randProbPrimeRounds(k2, 7);
  if (k2 >= 300)
    return randProbPrimeRounds(k2, 9);
  if (k2 >= 250)
    return randProbPrimeRounds(k2, 12);
  if (k2 >= 200)
    return randProbPrimeRounds(k2, 15);
  if (k2 >= 150)
    return randProbPrimeRounds(k2, 18);
  if (k2 >= 100)
    return randProbPrimeRounds(k2, 27);
  return randProbPrimeRounds(k2, 40);
}
function randProbPrimeRounds(k2, n) {
  var ans, i, divisible, B;
  B = 3e4;
  ans = int2bigInt(0, k2, 0);
  if (primes.length === 0)
    primes = findPrimes(3e4);
  if (rpprb.length !== ans.length)
    rpprb = dup(ans);
  for (; ; ) {
    randBigInt_(ans, k2, 0);
    ans[0] |= 1;
    divisible = 0;
    for (i = 0; i < primes.length && primes[i] <= B; i++) {
      if (modInt(ans, primes[i]) === 0 && !equalsInt(ans, primes[i])) {
        divisible = 1;
        break;
      }
    }
    for (i = 0; i < n && !divisible; i++) {
      randBigInt_(rpprb, k2, 0);
      while (!greater(ans, rpprb)) {
        randBigInt_(rpprb, k2, 0);
      }
      if (!millerRabin(ans, rpprb))
        divisible = 1;
    }
    if (!divisible)
      return ans;
  }
}
function mod(x, n) {
  var ans = dup(x);
  mod_(ans, n);
  return trim(ans, 1);
}
function addInt(x, n) {
  var ans = expand(x, x.length + 1);
  addInt_(ans, n);
  return trim(ans, 1);
}
function mult(x, y) {
  var ans = expand(x, x.length + y.length);
  mult_(ans, y);
  return trim(ans, 1);
}
function powMod(x, y, n) {
  var ans = expand(x, n.length);
  powMod_(
    //this should work without the trim, but doesn't
    ans,
    trim(y, 2),
    trim(n, 2)
  );
  return trim(ans, 1);
}
function sub(x, y) {
  var ans = expand(x, x.length > y.length ? x.length + 1 : y.length + 1);
  sub_(ans, y);
  return trim(ans, 1);
}
function add(x, y) {
  var ans = expand(x, x.length > y.length ? x.length + 1 : y.length + 1);
  add_(ans, y);
  return trim(ans, 1);
}
function inverseMod(x, n) {
  var ans = expand(x, n.length);
  var s = inverseMod_(ans, n);
  return s ? trim(ans, 1) : null;
}
function multMod(x, y, n) {
  var ans = expand(x, n.length);
  multMod_(ans, y, n);
  return trim(ans, 1);
}
function randTruePrime_(ans, k2) {
  var c, m, pm, dd, j, r, B, divisible, z, zz, recSize;
  var w;
  if (primes.length == 0)
    primes = findPrimes(3e4);
  if (pows.length == 0) {
    pows = new Array(512);
    for (j = 0; j < 512; j++) {
      pows[j] = Math.pow(2, j / 511 - 1);
    }
  }
  c = 0.1;
  m = 20;
  var recLimit = 20;
  if (s_i2.length != ans.length) {
    s_i2 = dup(ans);
    s_R = dup(ans);
    s_n1 = dup(ans);
    s_r2 = dup(ans);
    s_d = dup(ans);
    s_x1 = dup(ans);
    s_x2 = dup(ans);
    s_b = dup(ans);
    s_n = dup(ans);
    s_i = dup(ans);
    s_rm = dup(ans);
    s_q = dup(ans);
    s_a = dup(ans);
    s_aa = dup(ans);
  }
  if (k2 <= recLimit) {
    pm = (1 << (k2 + 2 >> 1)) - 1;
    copyInt_(ans, 0);
    for (dd = 1; dd; ) {
      dd = 0;
      ans[0] = 1 | 1 << k2 - 1 | Math.floor(Math.random() * (1 << k2));
      for (j = 1; j < primes.length && (primes[j] & pm) == primes[j]; j++) {
        if (0 == ans[0] % primes[j]) {
          dd = 1;
          break;
        }
      }
    }
    carry_(ans);
    return;
  }
  B = c * k2 * k2;
  if (k2 > 2 * m)
    for (r = 1; k2 - k2 * r <= m; ) {
      r = pows[Math.floor(Math.random() * 512)];
    }
  else
    r = 0.5;
  recSize = Math.floor(r * k2) + 1;
  randTruePrime_(s_q, recSize);
  copyInt_(s_i2, 0);
  s_i2[Math.floor((k2 - 2) / bpe)] |= 1 << (k2 - 2) % bpe;
  divide_(s_i2, s_q, s_i, s_rm);
  z = bitSize(s_i);
  for (; ; ) {
    for (; ; ) {
      randBigInt_(s_R, z, 0);
      if (greater(s_i, s_R))
        break;
    }
    addInt_(s_R, 1);
    add_(s_R, s_i);
    copy_(s_n, s_q);
    mult_(s_n, s_R);
    multInt_(s_n, 2);
    addInt_(s_n, 1);
    copy_(s_r2, s_R);
    multInt_(s_r2, 2);
    for (divisible = 0, j = 0; j < primes.length && primes[j] < B; j++) {
      if (modInt(s_n, primes[j]) == 0 && !equalsInt(s_n, primes[j])) {
        divisible = 1;
        break;
      }
    }
    if (!divisible) {
      if (!millerRabinInt(s_n, 2))
        divisible = 1;
    }
    if (!divisible) {
      addInt_(s_n, -3);
      for (j = s_n.length - 1; s_n[j] == 0 && j > 0; j--) {
        ;
      }
      for (zz = 0, w = s_n[j]; w; w >>= 1, zz++) {
        ;
      }
      zz += bpe * j;
      for (; ; ) {
        randBigInt_(s_a, zz, 0);
        if (greater(s_n, s_a))
          break;
      }
      addInt_(s_n, 3);
      addInt_(s_a, 2);
      copy_(s_b, s_a);
      copy_(s_n1, s_n);
      addInt_(s_n1, -1);
      powMod_(s_b, s_n1, s_n);
      addInt_(s_b, -1);
      if (isZero(s_b)) {
        copy_(s_b, s_a);
        powMod_(s_b, s_r2, s_n);
        addInt_(s_b, -1);
        copy_(s_aa, s_n);
        copy_(s_d, s_b);
        GCD_(s_d, s_n);
        if (equalsInt(s_d, 1)) {
          copy_(ans, s_aa);
          return;
        }
      }
    }
  }
}
function randBigInt(n, s) {
  var a, b;
  a = Math.floor((n - 1) / bpe) + 2;
  b = int2bigInt(0, 0, a);
  randBigInt_(b, n, s);
  return b;
}
function randBigInt_(b, n, s) {
  var i, a;
  for (i = 0; i < b.length; i++) {
    b[i] = 0;
  }
  a = Math.floor((n - 1) / bpe) + 1;
  for (i = 0; i < a; i++) {
    b[i] = Math.floor(Math.random() * (1 << bpe - 1));
  }
  b[a - 1] &= (2 << (n - 1) % bpe) - 1;
  if (s == 1)
    b[a - 1] |= 1 << (n - 1) % bpe;
}
function GCD(x, y) {
  var xc, yc;
  xc = dup(x);
  yc = dup(y);
  GCD_(xc, yc);
  return xc;
}
function GCD_(x, y) {
  var i, xp, yp, A, B, C, D, q, sing;
  var qp;
  if (T.length !== x.length)
    T = dup(x);
  sing = 1;
  while (sing) {
    sing = 0;
    for (i = 1; i < y.length; i++) {
      if (y[i]) {
        sing = 1;
        break;
      }
    }
    if (!sing)
      break;
    for (i = x.length; !x[i] && i >= 0; i--) {
      ;
    }
    xp = x[i];
    yp = y[i];
    A = 1;
    B = 0;
    C = 0;
    D = 1;
    while (yp + C && yp + D) {
      q = Math.floor((xp + A) / (yp + C));
      qp = Math.floor((xp + B) / (yp + D));
      if (q != qp)
        break;
      t = A - q * C;
      A = C;
      C = t;
      t = B - q * D;
      B = D;
      D = t;
      t = xp - q * yp;
      xp = yp;
      yp = t;
    }
    if (B) {
      copy_(T, x);
      linComb_(x, y, A, B);
      linComb_(y, T, D, C);
    } else {
      mod_(x, y);
      copy_(T, x);
      copy_(x, y);
      copy_(y, T);
    }
  }
  if (y[0] === 0)
    return;
  t = modInt(x, y[0]);
  copyInt_(x, y[0]);
  y[0] = t;
  while (y[0]) {
    x[0] %= y[0];
    t = x[0];
    x[0] = y[0];
    y[0] = t;
  }
}
function inverseMod_(x, n) {
  var k2 = 1 + 2 * Math.max(x.length, n.length);
  if (!(x[0] & 1) && !(n[0] & 1)) {
    copyInt_(x, 0);
    return 0;
  }
  if (eg_u.length != k2) {
    eg_u = new Array(k2);
    eg_v = new Array(k2);
    eg_A = new Array(k2);
    eg_B = new Array(k2);
    eg_C = new Array(k2);
    eg_D = new Array(k2);
  }
  copy_(eg_u, x);
  copy_(eg_v, n);
  copyInt_(eg_A, 1);
  copyInt_(eg_B, 0);
  copyInt_(eg_C, 0);
  copyInt_(eg_D, 1);
  for (; ; ) {
    while (!(eg_u[0] & 1)) {
      halve_(eg_u);
      if (!(eg_A[0] & 1) && !(eg_B[0] & 1)) {
        halve_(eg_A);
        halve_(eg_B);
      } else {
        add_(eg_A, n);
        halve_(eg_A);
        sub_(eg_B, x);
        halve_(eg_B);
      }
    }
    while (!(eg_v[0] & 1)) {
      halve_(eg_v);
      if (!(eg_C[0] & 1) && !(eg_D[0] & 1)) {
        halve_(eg_C);
        halve_(eg_D);
      } else {
        add_(eg_C, n);
        halve_(eg_C);
        sub_(eg_D, x);
        halve_(eg_D);
      }
    }
    if (!greater(eg_v, eg_u)) {
      sub_(eg_u, eg_v);
      sub_(eg_A, eg_C);
      sub_(eg_B, eg_D);
    } else {
      sub_(eg_v, eg_u);
      sub_(eg_C, eg_A);
      sub_(eg_D, eg_B);
    }
    if (equalsInt(eg_u, 0)) {
      while (negative(eg_C)) {
        add_(eg_C, n);
      }
      copy_(x, eg_C);
      if (!equalsInt(eg_v, 1)) {
        copyInt_(x, 0);
        return 0;
      }
      return 1;
    }
  }
}
function inverseModInt(x, n) {
  var a = 1, b = 0, t2;
  for (; ; ) {
    if (x === 1)
      return a;
    if (x === 0)
      return 0;
    b -= a * Math.floor(n / x);
    n %= x;
    if (n === 1)
      return b;
    if (n === 0)
      return 0;
    a -= b * Math.floor(x / n);
    x %= n;
  }
}
function eGCD_(x, y, v, a, b) {
  var g = 0;
  var k2 = Math.max(x.length, y.length);
  if (eg_u.length != k2) {
    eg_u = new Array(k2);
    eg_A = new Array(k2);
    eg_B = new Array(k2);
    eg_C = new Array(k2);
    eg_D = new Array(k2);
  }
  while (!(x[0] & 1) && !(y[0] & 1)) {
    halve_(x);
    halve_(y);
    g++;
  }
  copy_(eg_u, x);
  copy_(v, y);
  copyInt_(eg_A, 1);
  copyInt_(eg_B, 0);
  copyInt_(eg_C, 0);
  copyInt_(eg_D, 1);
  for (; ; ) {
    while (!(eg_u[0] & 1)) {
      halve_(eg_u);
      if (!(eg_A[0] & 1) && !(eg_B[0] & 1)) {
        halve_(eg_A);
        halve_(eg_B);
      } else {
        add_(eg_A, y);
        halve_(eg_A);
        sub_(eg_B, x);
        halve_(eg_B);
      }
    }
    while (!(v[0] & 1)) {
      halve_(v);
      if (!(eg_C[0] & 1) && !(eg_D[0] & 1)) {
        halve_(eg_C);
        halve_(eg_D);
      } else {
        add_(eg_C, y);
        halve_(eg_C);
        sub_(eg_D, x);
        halve_(eg_D);
      }
    }
    if (!greater(v, eg_u)) {
      sub_(eg_u, v);
      sub_(eg_A, eg_C);
      sub_(eg_B, eg_D);
    } else {
      sub_(v, eg_u);
      sub_(eg_C, eg_A);
      sub_(eg_D, eg_B);
    }
    if (equalsInt(eg_u, 0)) {
      while (negative(eg_C)) {
        add_(eg_C, y);
        sub_(eg_D, x);
      }
      multInt_(eg_D, -1);
      copy_(a, eg_C);
      copy_(b, eg_D);
      leftShift_(v, g);
      return;
    }
  }
}
function negative(x) {
  return x[x.length - 1] >> bpe - 1 & 1;
}
function greaterShift(x, y, shift) {
  var i, kx = x.length, ky = y.length;
  k = kx + shift < ky ? kx + shift : ky;
  for (i = ky - 1 - shift; i < kx && i >= 0; i++) {
    if (x[i] > 0)
      return 1;
  }
  for (i = kx - 1 + shift; i < ky; i++) {
    if (y[i] > 0)
      return 0;
  }
  for (i = k - 1; i >= shift; i--) {
    if (x[i - shift] > y[i])
      return 1;
    else if (x[i - shift] < y[i])
      return 0;
  }
  return 0;
}
function greater(x, y) {
  var i;
  var k2 = x.length < y.length ? x.length : y.length;
  for (i = x.length; i < y.length; i++) {
    if (y[i])
      return 0;
  }
  for (i = y.length; i < x.length; i++) {
    if (x[i])
      return 1;
  }
  for (i = k2 - 1; i >= 0; i--) {
    if (x[i] > y[i])
      return 1;
    else if (x[i] < y[i])
      return 0;
  }
  return 0;
}
function divide_(x, y, q, r) {
  var kx, ky;
  var i, j, y1, y2, c, a, b;
  copy_(r, x);
  for (ky = y.length; y[ky - 1] === 0; ky--) {
    ;
  }
  b = y[ky - 1];
  for (a = 0; b; a++) {
    b >>= 1;
  }
  a = bpe - a;
  leftShift_(y, a);
  leftShift_(r, a);
  for (kx = r.length; r[kx - 1] === 0 && kx > ky; kx--) {
    ;
  }
  copyInt_(q, 0);
  while (!greaterShift(y, r, kx - ky)) {
    subShift_(r, y, kx - ky);
    q[kx - ky]++;
  }
  for (i = kx - 1; i >= ky; i--) {
    if (r[i] == y[ky - 1])
      q[i - ky] = mask;
    else
      q[i - ky] = Math.floor((r[i] * radix + r[i - 1]) / y[ky - 1]);
    for (; ; ) {
      y2 = (ky > 1 ? y[ky - 2] : 0) * q[i - ky];
      c = y2 >> bpe;
      y2 = y2 & mask;
      y1 = c + q[i - ky] * y[ky - 1];
      c = y1 >> bpe;
      y1 = y1 & mask;
      if (c == r[i] ? y1 == r[i - 1] ? y2 > (i > 1 ? r[i - 2] : 0) : y1 > r[i - 1] : c > r[i])
        q[i - ky]--;
      else
        break;
    }
    linCombShift_(r, y, -q[i - ky], i - ky);
    if (negative(r)) {
      addShift_(r, y, i - ky);
      q[i - ky]--;
    }
  }
  rightShift_(y, a);
  rightShift_(r, a);
}
function carry_(x) {
  var i, k2, c, b;
  k2 = x.length;
  c = 0;
  for (i = 0; i < k2; i++) {
    c += x[i];
    b = 0;
    if (c < 0) {
      b = -(c >> bpe);
      c += b * radix;
    }
    x[i] = c & mask;
    c = (c >> bpe) - b;
  }
}
function modInt(x, n) {
  var i, c = 0;
  for (i = x.length - 1; i >= 0; i--) {
    c = (c * radix + x[i]) % n;
  }
  return c;
}
function int2bigInt(t2, bits, minSize) {
  var i, k2;
  k2 = Math.ceil(bits / bpe) + 1;
  k2 = minSize > k2 ? minSize : k2;
  var buff2 = new Array(k2);
  copyInt_(buff2, t2);
  return buff2;
}
function str2bigInt(s, base, minSize) {
  var d, i, x, y, kk;
  var k2 = s.length;
  if (base === -1) {
    x = new Array(0);
    for (; ; ) {
      y = new Array(x.length + 1);
      for (i = 0; i < x.length; i++) {
        y[i + 1] = x[i];
      }
      y[0] = parseInt(s, 10);
      x = y;
      d = s.indexOf(",", 0);
      if (d < 1)
        break;
      s = s.substring(d + 1);
      if (s.length == 0)
        break;
    }
    if (x.length < minSize) {
      y = new Array(minSize);
      copy_(y, x);
      return y;
    }
    return x;
  }
  x = int2bigInt(0, base * k2, 0);
  for (i = 0; i < k2; i++) {
    d = digitsStr.indexOf(s.substring(i, i + 1), 0);
    if (base <= 36 && d >= 36)
      d -= 26;
    if (d >= base || d < 0) {
      break;
    }
    multInt_(x, base);
    addInt_(x, d);
  }
  for (k2 = x.length; k2 > 0 && !x[k2 - 1]; k2--) {
    ;
  }
  k2 = minSize > k2 + 1 ? minSize : k2 + 1;
  y = new Array(k2);
  kk = k2 < x.length ? k2 : x.length;
  for (i = 0; i < kk; i++) {
    y[i] = x[i];
  }
  for (; i < k2; i++) {
    y[i] = 0;
  }
  return y;
}
function equalsInt(x, y) {
  var i;
  if (x[0] != y)
    return 0;
  for (i = 1; i < x.length; i++) {
    if (x[i])
      return 0;
  }
  return 1;
}
function equals(x, y) {
  var i;
  var k2 = x.length < y.length ? x.length : y.length;
  for (i = 0; i < k2; i++) {
    if (x[i] !== y[i])
      return 0;
  }
  if (x.length > y.length) {
    for (; i < x.length; i++) {
      if (x[i])
        return 0;
    }
  } else {
    for (; i < y.length; i++) {
      if (y[i])
        return 0;
    }
  }
  return 1;
}
function isZero(x) {
  var i;
  for (i = 0; i < x.length; i++) {
    if (x[i])
      return 0;
  }
  return 1;
}
function bigInt2str(x, base) {
  var i, t2, s = "";
  if (s6.length !== x.length)
    s6 = dup(x);
  else
    copy_(s6, x);
  if (base === -1) {
    for (i = x.length - 1; i > 0; i--) {
      s += x[i] + ",";
    }
    s += x[0];
  } else {
    while (!isZero(s6)) {
      t2 = divInt_(s6, base);
      s = digitsStr.substring(t2, t2 + 1) + s;
    }
  }
  if (s.length === 0)
    s = "0";
  return s;
}
function dup(x) {
  var i;
  buff = Array(x.length);
  copy_(buff, x);
  return buff;
}
function copy_(x, y) {
  var i;
  var k2 = x.length < y.length ? x.length : y.length;
  for (i = 0; i < k2; i++) {
    x[i] = y[i];
  }
  for (i = k2; i < x.length; i++) {
    x[i] = 0;
  }
}
function copyInt_(x, n) {
  var i, c;
  var len = x.length;
  for (c = n, i = 0; i < len; i++) {
    x[i] = c & mask;
    c >>= bpe;
  }
}
function addInt_(x, n) {
  var i, k2, c, b;
  x[0] += n;
  k2 = x.length;
  c = 0;
  for (i = 0; i < k2; i++) {
    c += x[i];
    b = 0;
    if (c < 0) {
      b = -(c >> bpe);
      c += b * radix;
    }
    x[i] = c & mask;
    c = (c >> bpe) - b;
    if (!c)
      return;
  }
}
function rightShift_(x, n) {
  var i;
  var k2 = Math.floor(n / bpe);
  if (k2) {
    for (i = 0; i < x.length - k2; i++) {
      x[i] = x[i + k2];
    }
    for (; i < x.length; i++) {
      x[i] = 0;
    }
    n %= bpe;
  }
  for (i = 0; i < x.length - 1; i++) {
    x[i] = mask & (x[i + 1] << bpe - n | x[i] >> n);
  }
  x[i] >>= n;
}
function halve_(x) {
  var i;
  for (i = 0; i < x.length - 1; i++) {
    x[i] = mask & (x[i + 1] << bpe - 1 | x[i] >> 1);
  }
  x[i] = x[i] >> 1 | x[i] & radix >> 1;
}
function leftShift_(x, n) {
  var i;
  var k2 = Math.floor(n / bpe);
  if (k2) {
    for (i = x.length; i >= k2; i--) {
      x[i] = x[i - k2];
    }
    for (; i >= 0; i--) {
      x[i] = 0;
    }
    n %= bpe;
  }
  if (!n)
    return;
  for (i = x.length - 1; i > 0; i--) {
    x[i] = mask & (x[i] << n | x[i - 1] >> bpe - n);
  }
  x[i] = mask & x[i] << n;
}
function multInt_(x, n) {
  var i, k2, c, b;
  if (!n)
    return;
  k2 = x.length;
  c = 0;
  for (i = 0; i < k2; i++) {
    c += x[i] * n;
    b = 0;
    if (c < 0) {
      b = -(c >> bpe);
      c += b * radix;
    }
    x[i] = c & mask;
    c = (c >> bpe) - b;
  }
}
function divInt_(x, n) {
  var i, r = 0, s;
  for (i = x.length - 1; i >= 0; i--) {
    s = r * radix + x[i];
    x[i] = Math.floor(s / n);
    r = s % n;
  }
  return r;
}
function linComb_(x, y, a, b) {
  var i, c, k2, kk;
  k2 = x.length < y.length ? x.length : y.length;
  kk = x.length;
  for (c = 0, i = 0; i < k2; i++) {
    c += a * x[i] + b * y[i];
    x[i] = c & mask;
    c >>= bpe;
  }
  for (i = k2; i < kk; i++) {
    c += a * x[i];
    x[i] = c & mask;
    c >>= bpe;
  }
}
function linCombShift_(x, y, b, ys) {
  var i, c, k2, kk;
  k2 = x.length < ys + y.length ? x.length : ys + y.length;
  kk = x.length;
  for (c = 0, i = ys; i < k2; i++) {
    c += x[i] + b * y[i - ys];
    x[i] = c & mask;
    c >>= bpe;
  }
  for (i = k2; c && i < kk; i++) {
    c += x[i];
    x[i] = c & mask;
    c >>= bpe;
  }
}
function addShift_(x, y, ys) {
  var i, c, k2, kk;
  k2 = x.length < ys + y.length ? x.length : ys + y.length;
  kk = x.length;
  for (c = 0, i = ys; i < k2; i++) {
    c += x[i] + y[i - ys];
    x[i] = c & mask;
    c >>= bpe;
  }
  for (i = k2; c && i < kk; i++) {
    c += x[i];
    x[i] = c & mask;
    c >>= bpe;
  }
}
function subShift_(x, y, ys) {
  var i, c, k2, kk;
  k2 = x.length < ys + y.length ? x.length : ys + y.length;
  kk = x.length;
  for (c = 0, i = ys; i < k2; i++) {
    c += x[i] - y[i - ys];
    x[i] = c & mask;
    c >>= bpe;
  }
  for (i = k2; c && i < kk; i++) {
    c += x[i];
    x[i] = c & mask;
    c >>= bpe;
  }
}
function sub_(x, y) {
  var i, c, k2, kk;
  k2 = x.length < y.length ? x.length : y.length;
  for (c = 0, i = 0; i < k2; i++) {
    c += x[i] - y[i];
    x[i] = c & mask;
    c >>= bpe;
  }
  for (i = k2; c && i < x.length; i++) {
    c += x[i];
    x[i] = c & mask;
    c >>= bpe;
  }
}
function add_(x, y) {
  var i, c, k2, kk;
  k2 = x.length < y.length ? x.length : y.length;
  for (c = 0, i = 0; i < k2; i++) {
    c += x[i] + y[i];
    x[i] = c & mask;
    c >>= bpe;
  }
  for (i = k2; c && i < x.length; i++) {
    c += x[i];
    x[i] = c & mask;
    c >>= bpe;
  }
}
function mult_(x, y) {
  var i;
  if (ss.length != 2 * x.length)
    ss = new Array(2 * x.length);
  copyInt_(ss, 0);
  for (i = 0; i < y.length; i++) {
    if (y[i])
      linCombShift_(ss, x, y[i], i);
  }
  copy_(x, ss);
}
function mod_(x, n) {
  if (s4.length !== x.length)
    s4 = dup(x);
  else
    copy_(s4, x);
  if (s5.length !== x.length)
    s5 = dup(x);
  divide_(s4, n, s5, x);
}
function multMod_(x, y, n) {
  var i;
  if (s0.length != 2 * x.length)
    s0 = new Array(2 * x.length);
  copyInt_(s0, 0);
  for (i = 0; i < y.length; i++) {
    if (y[i])
      linCombShift_(s0, x, y[i], i);
  }
  mod_(s0, n);
  copy_(x, s0);
}
function squareMod_(x, n) {
  var i, j, d, c, kx, kn, k2;
  for (kx = x.length; kx > 0 && !x[kx - 1]; kx--) {
    ;
  }
  k2 = kx > n.length ? 2 * kx : 2 * n.length;
  if (s0.length != k2)
    s0 = new Array(k2);
  copyInt_(s0, 0);
  for (i = 0; i < kx; i++) {
    c = s0[2 * i] + x[i] * x[i];
    s0[2 * i] = c & mask;
    c >>= bpe;
    for (j = i + 1; j < kx; j++) {
      c = s0[i + j] + 2 * x[i] * x[j] + c;
      s0[i + j] = c & mask;
      c >>= bpe;
    }
    s0[i + kx] = c;
  }
  mod_(s0, n);
  copy_(x, s0);
}
function trim(x, k2) {
  var i, y;
  for (i = x.length; i > 0 && !x[i - 1]; i--) {
    ;
  }
  y = new Array(i + k2);
  copy_(y, x);
  return y;
}
function powMod_(x, y, n) {
  var k1, k2, kn, np;
  if (s7.length != n.length)
    s7 = dup(n);
  if ((n[0] & 1) == 0) {
    copy_(s7, x);
    copyInt_(x, 1);
    while (!equalsInt(y, 0)) {
      if (y[0] & 1)
        multMod_(x, s7, n);
      divInt_(y, 2);
      squareMod_(s7, n);
    }
    return;
  }
  copyInt_(s7, 0);
  for (kn = n.length; kn > 0 && !n[kn - 1]; kn--) {
    ;
  }
  np = radix - inverseModInt(modInt(n, radix), radix);
  s7[kn] = 1;
  multMod_(x, s7, n);
  if (s3.length != x.length)
    s3 = dup(x);
  else
    copy_(s3, x);
  for (k1 = y.length - 1; k1 > 0 & !y[k1]; k1--) {
    ;
  }
  if (y[k1] == 0) {
    copyInt_(x, 1);
    return;
  }
  for (k2 = 1 << bpe - 1; k2 && !(y[k1] & k2); k2 >>= 1) {
    ;
  }
  for (; ; ) {
    if (!(k2 >>= 1)) {
      k1--;
      if (k1 < 0) {
        mont_(x, one, n, np);
        return;
      }
      k2 = 1 << bpe - 1;
    }
    mont_(x, x, n, np);
    if (k2 & y[k1])
      mont_(x, s3, n, np);
  }
}
function mont_(x, y, n, np) {
  var i, j, c, ui, t2, ks;
  var kn = n.length;
  var ky = y.length;
  if (sa.length != kn)
    sa = new Array(kn);
  copyInt_(sa, 0);
  for (; kn > 0 && n[kn - 1] == 0; kn--) {
    ;
  }
  for (; ky > 0 && y[ky - 1] == 0; ky--) {
    ;
  }
  ks = sa.length - 1;
  for (i = 0; i < kn; i++) {
    t2 = sa[0] + x[i] * y[0];
    ui = (t2 & mask) * np & mask;
    c = t2 + ui * n[0] >> bpe;
    t2 = x[i];
    j = 1;
    for (; j < ky - 4; ) {
      c += sa[j] + ui * n[j] + t2 * y[j];
      sa[j - 1] = c & mask;
      c >>= bpe;
      j++;
      c += sa[j] + ui * n[j] + t2 * y[j];
      sa[j - 1] = c & mask;
      c >>= bpe;
      j++;
      c += sa[j] + ui * n[j] + t2 * y[j];
      sa[j - 1] = c & mask;
      c >>= bpe;
      j++;
      c += sa[j] + ui * n[j] + t2 * y[j];
      sa[j - 1] = c & mask;
      c >>= bpe;
      j++;
      c += sa[j] + ui * n[j] + t2 * y[j];
      sa[j - 1] = c & mask;
      c >>= bpe;
      j++;
    }
    for (; j < ky; ) {
      c += sa[j] + ui * n[j] + t2 * y[j];
      sa[j - 1] = c & mask;
      c >>= bpe;
      j++;
    }
    for (; j < kn - 4; ) {
      c += sa[j] + ui * n[j];
      sa[j - 1] = c & mask;
      c >>= bpe;
      j++;
      c += sa[j] + ui * n[j];
      sa[j - 1] = c & mask;
      c >>= bpe;
      j++;
      c += sa[j] + ui * n[j];
      sa[j - 1] = c & mask;
      c >>= bpe;
      j++;
      c += sa[j] + ui * n[j];
      sa[j - 1] = c & mask;
      c >>= bpe;
      j++;
      c += sa[j] + ui * n[j];
      sa[j - 1] = c & mask;
      c >>= bpe;
      j++;
    }
    for (; j < kn; ) {
      c += sa[j] + ui * n[j];
      sa[j - 1] = c & mask;
      c >>= bpe;
      j++;
    }
    for (; j < ks; ) {
      c += sa[j];
      sa[j - 1] = c & mask;
      c >>= bpe;
      j++;
    }
    sa[j - 1] = c & mask;
  }
  if (!greater(n, sa))
    sub_(sa, n);
  copy_(x, sa);
}
var bpe, mask, radix, digitsStr, one, zero, t, ss, s0, s3, s4, s5, s6, s7, T, sa, mr_x1, mr_r, mr_a, eg_v, eg_u, eg_A, eg_B, eg_C, eg_D, primes, pows, s_i, s_i2, s_R, s_rm, s_q, s_n1, s_a, s_r2, s_n, s_b, s_d, s_x1, s_x2, s_aa, rpprb, k, buff;
var init_es = __esm({
  "node_modules/leemon/es/index.js"() {
    "use strict";
    bpe = 0;
    mask = 0;
    radix = mask + 1;
    digitsStr = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_=!@#$%^&*()[]{}|;:,.<>/?`~ \\'\"+-";
    for (bpe = 0; 1 << bpe + 1 > 1 << bpe; bpe++) {
      ;
    }
    bpe >>= 1;
    mask = (1 << bpe) - 1;
    radix = mask + 1;
    one = int2bigInt(1, 1, 1);
    zero = int2bigInt(0, 1, 1);
    t = new Array(0);
    ss = t;
    s0 = t;
    s3 = t;
    s4 = t;
    s5 = t;
    s6 = t;
    s7 = t;
    T = t;
    sa = t;
    mr_x1 = t;
    mr_r = t;
    mr_a = t;
    eg_v = t;
    eg_u = t;
    eg_A = t;
    eg_B = t;
    eg_C = t;
    eg_D = t;
    primes = t;
    pows = t;
    s_i = t;
    s_i2 = t;
    s_R = t;
    s_rm = t;
    s_q = t;
    s_n1 = t;
    s_a = t;
    s_r2 = t;
    s_n = t;
    s_b = t;
    s_d = t;
    s_x1 = t;
    s_x2 = t;
    s_aa = t;
    rpprb = t;
  }
});

// node_modules/@mtproto/core/src/crypto/pq/index.js
var require_pq = __commonJS({
  "node_modules/@mtproto/core/src/crypto/pq/index.js"(exports, module) {
    var {
      eGCD_: eGCD_2,
      greater: greater2,
      divide_: divide_2,
      str2bigInt: str2bigInt2,
      equalsInt: equalsInt2,
      isZero: isZero2,
      bigInt2str: bigInt2str2,
      copy_: copy_2,
      copyInt_: copyInt_2,
      rightShift_: rightShift_2,
      sub_: sub_2,
      add_: add_2,
      one: one2,
      bpe: bpe2
    } = (init_es(), __toCommonJS(es_exports));
    var {
      hexToBytes,
      bytesToBigInt,
      getRandomInt
    } = require_common();
    function leemonBigIntToBytes(bigInt) {
      const str = bigInt2str2(bigInt, 16);
      return hexToBytes(str);
    }
    function pqLeemon(what) {
      var minBits = 64;
      var minLen = Math.ceil(minBits / bpe2) + 1;
      var it = 0;
      var i, q;
      var j, lim;
      var g, P;
      var Q;
      var a = new Array(minLen);
      var b = new Array(minLen);
      var c = new Array(minLen);
      var g = new Array(minLen);
      var z = new Array(minLen);
      var x = new Array(minLen);
      var y = new Array(minLen);
      for (i = 0; i < 3; i++) {
        q = (getRandomInt(128) & 15) + 17;
        copyInt_2(x, getRandomInt(1e9) + 1);
        copy_2(y, x);
        lim = 1 << i + 18;
        for (j = 1; j < lim; j++) {
          ++it;
          copy_2(a, x);
          copy_2(b, x);
          copyInt_2(c, q);
          while (!isZero2(b)) {
            if (b[0] & 1) {
              add_2(c, a);
              if (greater2(c, what)) {
                sub_2(c, what);
              }
            }
            add_2(a, a);
            if (greater2(a, what)) {
              sub_2(a, what);
            }
            rightShift_2(b, 1);
          }
          copy_2(x, c);
          if (greater2(x, y)) {
            copy_2(z, x);
            sub_2(z, y);
          } else {
            copy_2(z, y);
            sub_2(z, x);
          }
          eGCD_2(z, what, g, a, b);
          if (!equalsInt2(g, 1)) {
            break;
          }
          if ((j & j - 1) == 0) {
            copy_2(y, x);
          }
        }
        if (greater2(g, one2)) {
          break;
        }
      }
      divide_2(what, g, x, y);
      if (greater2(g, x)) {
        P = x;
        Q = g;
      } else {
        P = g;
        Q = x;
      }
      return [leemonBigIntToBytes(P), leemonBigIntToBytes(Q), it];
    }
    function pqPrimeFactorization(pqBytes) {
      const pq = bytesToBigInt(pqBytes);
      let result = null;
      try {
        result = pqLeemon(str2bigInt2(pq.toString(16), 16, Math.ceil(64 / bpe2) + 1));
      } catch (error) {
        console.error(`PQ leemon factorization: ${error}`);
      }
      return result;
    }
    module.exports = pqPrimeFactorization;
  }
});

// node_modules/@mtproto/core/src/rpc/index.js
var require_rpc = __commonJS({
  "node_modules/@mtproto/core/src/rpc/index.js"(exports, module) {
    var bigInt = require_BigInteger();
    var debounce = require_lodash();
    var AES = require_aes();
    var builderMap = require_builder();
    var Serializer = require_serializer();
    var Deserializer = require_deserializer();
    var {
      xorBytes,
      intsToLong,
      concatBytes,
      getRandomInt,
      bytesIsEqual,
      bigIntToBytes,
      bytesToBigInt,
      longToBytesRaw,
      bytesToBytesRaw
    } = require_common();
    var baseDebug = require_base_debug();
    var pqPrimeFactorization = require_pq();
    var RPC = class {
      constructor({ dc, context, transport }) {
        this.dc = dc;
        this.crypto = context.crypto;
        this.context = context;
        this.transport = transport;
        this.debug = baseDebug.extend(`rpc-${this.dc.id}`);
        this.debug("init");
        this.isAuth = false;
        this.pendingAcks = [];
        this.messagesWaitAuth = [];
        this.messagesWaitResponse = /* @__PURE__ */ new Map();
        this.updateSession();
        this.transport.on("open", this.handleTransportOpen.bind(this));
        this.transport.on("error", this.handleTransportError.bind(this));
        this.transport.on("message", this.handleTransportMessage.bind(this));
        this.sendAcks = debounce(() => {
          if (!this.pendingAcks.length || !this.isReady) {
            return;
          }
          const serializer = new Serializer(builderMap.mt_msgs_ack, {
            msg_ids: this.pendingAcks
          });
          const bytes = serializer.getBytes();
          this.pendingAcks = [];
          this.sendEncryptedMessage(bytes, {
            isContentRelated: false
          });
        }, 500);
      }
      get isReady() {
        return this.isAuth && this.transport.isAvailable;
      }
      async handleTransportError(payload) {
        const { type } = payload;
        this.debug("transport error", payload);
        if (type === "transport") {
          if (payload.code === 404) {
            await this.setStorageItem("authKey", null);
            await this.setStorageItem("serverSalt", null);
          }
          if (payload.code === 429) {
            this.debug("transport flood");
          }
        }
      }
      async handleTransportOpen() {
        const authKey = await this.getStorageItem("authKey");
        const serverSalt = await this.getStorageItem("serverSalt");
        if (authKey && serverSalt) {
          this.handleMessage = this.handleEncryptedMessage;
          this.isAuth = true;
          this.sendWaitMessages();
          this.call("help.getConfig").then((result) => {
          }).catch((error) => {
            this.debug(`error when calling the method help.getConfig:`, error);
          });
        } else {
          this.nonce = this.crypto.getRandomBytes(16);
          this.handleMessage = this.handlePQResponse;
          this.sendPlainMessage(builderMap.mt_req_pq_multi, { nonce: this.nonce });
        }
      }
      async handleTransportMessage(buffer) {
        this.handleMessage(buffer);
      }
      async handlePQResponse(buffer) {
        const deserializer = new Deserializer(buffer);
        deserializer.long();
        deserializer.long();
        deserializer.int32();
        const responsePQ = deserializer.predicate();
        const { pq, nonce, server_nonce, server_public_key_fingerprints } = responsePQ;
        if (!bytesIsEqual(this.nonce, nonce)) {
          throw new Error("The nonce are not equal");
        }
        const publicKey = await this.crypto.rsa.getRsaKeyByFingerprints(
          server_public_key_fingerprints
        );
        const [p, q] = pqPrimeFactorization(pq);
        this.newNonce = this.crypto.getRandomBytes(32);
        this.serverNonce = server_nonce;
        const serializer = new Serializer(builderMap.mt_p_q_inner_data, {
          pq,
          p,
          q,
          nonce: this.nonce,
          server_nonce: this.serverNonce,
          new_nonce: this.newNonce
        });
        const data = serializer.getBytes();
        const dataHash = await this.crypto.SHA1(data);
        const innerData = this.crypto.getRandomBytes(255);
        innerData.set(dataHash);
        innerData.set(data, dataHash.length);
        const encryptedData = this.crypto.rsa.encrypt(publicKey, innerData);
        this.sendPlainMessage(builderMap.mt_req_DH_params, {
          nonce: this.nonce,
          server_nonce: this.serverNonce,
          p,
          q,
          public_key_fingerprint: publicKey.fingerprint,
          encrypted_data: encryptedData
        });
        this.handleMessage = this.handleDHParams;
      }
      async handleDHParams(buffer) {
        const deserializer = new Deserializer(buffer);
        deserializer.long();
        deserializer.long();
        deserializer.int32();
        const serverDH = deserializer.predicate();
        const { nonce, server_nonce, encrypted_answer } = serverDH;
        if (!bytesIsEqual(this.nonce, nonce)) {
          throw new Error("The nonce are not equal");
        }
        if (!bytesIsEqual(this.serverNonce, server_nonce)) {
          throw new Error("The server_nonce are not equal");
        }
        this.tmpAesKey = concatBytes(
          await this.crypto.SHA1(concatBytes(this.newNonce, this.serverNonce)),
          (await this.crypto.SHA1(concatBytes(this.serverNonce, this.newNonce))).slice(0, 12)
        );
        this.tmpAesIV = concatBytes(
          (await this.crypto.SHA1(concatBytes(this.serverNonce, this.newNonce))).slice(12, 20),
          await this.crypto.SHA1(concatBytes(this.newNonce, this.newNonce)),
          this.newNonce.slice(0, 4)
        );
        const decryptedData = new AES.IGE(this.tmpAesKey, this.tmpAesIV).decrypt(
          encrypted_answer
        );
        const innerDataHash = decryptedData.slice(0, 20);
        const innerDeserializer = new Deserializer(decryptedData.slice(20).buffer);
        const serverDHInnerData = innerDeserializer.predicate();
        if (!bytesIsEqual(
          innerDataHash,
          await this.crypto.SHA1(
            decryptedData.slice(20, 20 + innerDeserializer.offset)
          )
        )) {
          throw new Error("Invalid hash in DH params decrypted data");
        }
        await this.context.storage.set(
          "timeOffset",
          Math.floor(Date.now() / 1e3) - serverDHInnerData.server_time
        );
        this.dhPrime = bytesToBigInt(serverDHInnerData.dh_prime);
        this.g = bigInt(serverDHInnerData.g);
        this.gA = bytesToBigInt(serverDHInnerData.g_a);
        this.verifyDhParams(this.g, this.dhPrime, this.gA);
        this.generateDH();
      }
      verifyDhParams(g, dhPrime, gA) {
        if (g.toJSNumber() !== 3) {
          throw new Error("Server_DH_inner_data.g must be equal to 3");
        }
        if (dhPrime.toString(16) !== "c71caeb9c6b1c9048e6c522f70f13f73980d40238e3e21c14934d037563d930f48198a0aa7c14058229493d22530f4dbfa336f6e0ac925139543aed44cce7c3720fd51f69458705ac68cd4fe6b6b13abdc9746512969328454f18faf8c595f642477fe96bb2a941d5bcd1d4ac8cc49880708fa9b378e3c4f3a9060bee67cf9a4a4a695811051907e162753b56b0f6b410dba74d8a84b2a14b3144e0ef1284754fd17ed950d5965b4b9dd46582db1178d169c6bc465b0d6ff9ca3928fef5b9ae4e418fc15e83ebea0f87fa9ff5eed70050ded2849f47bf959d956850ce929851f0d8115f635b105ee2e4e15d04b2454bf6f4fadf034b10403119cd8e3b92fcc5b") {
          throw new Error("Server_DH_inner_data.dh_prime incorrect");
        }
        if (gA.lesserOrEquals(bigInt.one)) {
          throw new Error("Server_DH_inner_data.g_a incorrect: g_a <= 1");
        }
        if (gA.greaterOrEquals(dhPrime.minus(bigInt.one))) {
          throw new Error(
            "Server_DH_inner_data.g_a incorrect: g_a >= dh_prime - 1"
          );
        }
        const twoPow = bigInt(2).pow(2048 - 64);
        if (gA.lesser(twoPow)) {
          throw new Error("Server_DH_inner_data.g_a incorrect: g_a < 2^{2048-64}");
        }
        if (gA.greaterOrEquals(dhPrime.minus(twoPow))) {
          throw new Error(
            "Server_DH_inner_data.g_a incorrect: g_a >= dh_prime - 2^{2048-64}"
          );
        }
      }
      async generateDH(retryId = 0) {
        const b = bytesToBigInt(this.crypto.getRandomBytes(256));
        const authKey = bigIntToBytes(this.gA.modPow(b, this.dhPrime));
        const serverSalt = xorBytes(
          this.newNonce.slice(0, 8),
          this.serverNonce.slice(0, 8)
        );
        await this.setStorageItem("authKey", bytesToBytesRaw(authKey));
        await this.setStorageItem("serverSalt", bytesToBytesRaw(serverSalt));
        this.authKeyAuxHash = bytesToBytesRaw(
          (await this.crypto.SHA1(authKey)).slice(0, 8)
        );
        const serializer = new Serializer(builderMap.mt_client_DH_inner_data, {
          nonce: this.nonce,
          server_nonce: this.serverNonce,
          retry_id: retryId,
          g_b: bigIntToBytes(this.g.modPow(b, this.dhPrime))
        });
        const innerData = serializer.getBytes();
        const innerDataHash = await this.crypto.SHA1(innerData);
        const paddingLength = 16 - (innerDataHash.length + innerData.length) % 16;
        const encryptedData = new AES.IGE(this.tmpAesKey, this.tmpAesIV).encrypt(
          concatBytes(
            innerDataHash,
            innerData,
            this.crypto.getRandomBytes(paddingLength)
          )
        );
        this.sendPlainMessage(builderMap.mt_set_client_DH_params, {
          nonce: this.nonce,
          server_nonce: this.serverNonce,
          encrypted_data: encryptedData
        });
        this.handleMessage = this.handleDHAnswer;
      }
      async handleDHAnswer(buffer) {
        const deserializer = new Deserializer(buffer);
        deserializer.long();
        deserializer.long();
        deserializer.int32();
        const serverDHAnswer = deserializer.predicate();
        const { nonce, server_nonce } = serverDHAnswer;
        if (!bytesIsEqual(this.nonce, nonce)) {
          throw new Error("The nonce are not equal");
        }
        if (!bytesIsEqual(this.serverNonce, server_nonce)) {
          throw new Error("The server_nonce are not equal");
        }
        if (serverDHAnswer._ === "mt_dh_gen_ok") {
          const hash = (await this.crypto.SHA1(
            concatBytes(this.newNonce, [1], this.authKeyAuxHash)
          )).slice(4, 20);
          if (!bytesIsEqual(hash, serverDHAnswer.new_nonce_hash1)) {
            throw new Error(`Invalid hash in mt_dh_gen_ok`);
          }
          this.handleMessage = this.handleEncryptedMessage;
          this.isAuth = true;
          this.sendWaitMessages();
          return;
        }
        if (serverDHAnswer._ === "mt_dh_gen_retry") {
          const hash = (await this.crypto.SHA1(
            concatBytes(this.newNonce, [2], this.authKeyAuxHash)
          )).slice(4, 20);
          if (!bytesIsEqual(hash, serverDHAnswer.new_nonce_hash2)) {
            throw new Error(`Invalid hash in mt_dh_gen_retry`);
          }
          this.generateDH(this.authKeyAuxHash);
          return;
        }
        if (serverDHAnswer._ === "mt_dh_gen_fail") {
          const hash = (await this.crypto.SHA1(
            concatBytes(this.newNonce, [3], this.authKeyAuxHash)
          )).slice(4, 20);
          if (!bytesIsEqual(hash, serverDHAnswer.new_nonce_hash3)) {
            throw new Error(`Invalid hash in mt_dh_gen_fail`);
          }
          throw new Error(`mt_dh_gen_fail`);
        }
        throw new Error(`Invalid Set_client_DH_params_answer: ${serverDHAnswer}`);
      }
      async sendWaitMessages() {
        for (let message of this.messagesWaitResponse.values()) {
          if (message.isAck) {
            continue;
          }
          const { method, params, resolve, reject } = message;
          this.call(method, params).then(resolve).catch(reject);
        }
        this.messagesWaitAuth.forEach((message) => {
          const { method, params, resolve, reject } = message;
          this.call(method, params).then(resolve).catch(reject);
        });
        this.messagesWaitAuth = [];
      }
      async handleEncryptedMessage(buffer) {
        const authKey = new Uint8Array(await this.getStorageItem("authKey"));
        const deserializer = new Deserializer(buffer);
        const authKeyId = deserializer.long();
        const messageKey = deserializer.int128();
        const encryptedData = deserializer.byteView.slice(deserializer.offset);
        const plaintextData = (await this.getAESInstance(authKey, messageKey, true)).decrypt(encryptedData);
        const computedMessageKey = (await this.crypto.SHA256(
          concatBytes(authKey.slice(96, 128), plaintextData)
        )).slice(8, 24);
        if (!bytesIsEqual(messageKey, computedMessageKey)) {
          console.warn(`Incorrect msg_key`);
          return;
        }
        const plainDeserializer = new Deserializer(plaintextData.buffer);
        const salt = plainDeserializer.long();
        const sessionId = plainDeserializer.long();
        const messageId = plainDeserializer.long();
        const seqNo = plainDeserializer.uint32();
        const length = plainDeserializer.uint32();
        if (length > plaintextData.length) {
          console.warn(
            `Length in message ${messageId} to exceed the plaintext length:`,
            `${length} > ${plaintextData.length}`
          );
          return;
        }
        if (length % 4 !== 0) {
          console.warn(
            `Length ${length} in message ${messageId} is not a multiple of four`
          );
          return;
        }
        const result = plainDeserializer.predicate();
        this.handleDecryptedMessage(result, { messageId, seqNo });
      }
      async handleDecryptedMessage(message, params = {}) {
        const { messageId } = params;
        if (bigInt(messageId).isEven()) {
          this.debug("message id from server is even", message);
          return;
        }
        if (this.pendingAcks.includes(messageId)) {
          this.sendAcks();
          return;
        }
        if (message._ === "mt_msg_container") {
          this.debug("handling container");
          message.messages.forEach((message2) => {
            this.handleDecryptedMessage(message2.body, {
              messageId: message2.msg_id
            });
          });
          return;
        }
        if (["mt_bad_server_salt", "mt_bad_msg_notification"].includes(message._)) {
          this.debug(`handling ${message._} for message ${message.bad_msg_id}`);
          if (message.error_code === 48) {
            await this.setStorageItem(
              "serverSalt",
              longToBytesRaw(message.new_server_salt)
            );
          }
          if ([16, 17].includes(message.error_code)) {
            const serverTime = bigInt(messageId).shiftRight(32).toJSNumber();
            const timeOffset = Math.floor(Date.now() / 1e3) - serverTime;
            await this.context.storage.set("timeOffset", timeOffset);
            this.lastMessageId = [0, 0];
          }
          const waitMessage = this.messagesWaitResponse.get(message.bad_msg_id);
          if (waitMessage) {
            this.call(waitMessage.method, waitMessage.params).then(waitMessage.resolve).catch(waitMessage.reject);
            this.messagesWaitResponse.delete(message.bad_msg_id);
          } else {
            this.debug(`${message._} for a non-existent message`, message);
          }
          return;
        }
        if (message._ === "mt_new_session_created") {
          this.debug(`handling new session created`);
          this.ackMessage(messageId);
          await this.setStorageItem(
            "serverSalt",
            longToBytesRaw(message.server_salt)
          );
          return;
        }
        if (message._ === "mt_msgs_ack") {
          this.debug("handling acknowledge for", message.msg_ids);
          message.msg_ids.forEach((msgId) => {
            const waitMessage = this.messagesWaitResponse.get(msgId);
            const nextWaitMessage = {
              ...waitMessage,
              isAck: true
            };
            this.messagesWaitResponse.set(msgId, nextWaitMessage);
          });
          return;
        }
        if (message._ === "mt_rpc_result") {
          this.ackMessage(messageId);
          this.debug("handling RPC result for message", message.req_msg_id);
          const waitMessage = this.messagesWaitResponse.get(message.req_msg_id);
          if (message.result._ === "mt_rpc_error") {
            waitMessage.reject(message.result);
          } else {
            waitMessage.resolve(message.result);
          }
          this.messagesWaitResponse.delete(message.req_msg_id);
          return;
        }
        this.debug("handling update", message._);
        this.ackMessage(messageId);
        this.context.updates.emit(message._, message);
      }
      ackMessage(messageId) {
        this.pendingAcks.push(messageId);
        this.sendAcks();
      }
      async call(method, params = {}) {
        if (!this.isReady) {
          return new Promise((resolve, reject) => {
            this.messagesWaitAuth.push({ method, params, resolve, reject });
          });
        }
        const { api_id, api_hash } = this.context;
        const initConnectionParams = {
          api_id,
          device_model: "@mtproto/core",
          system_version: "6.1.1",
          app_version: "1.0.0",
          system_lang_code: "en",
          lang_code: "en",
          ...this.context.initConnectionParams
        };
        const serializer = new Serializer(builderMap.invokeWithLayer, {
          layer: 158,
          query: {
            _: "initConnection",
            ...initConnectionParams,
            query: {
              _: method,
              api_id,
              api_hash,
              ...params
            }
          }
        });
        const bytes = serializer.getBytes();
        return new Promise(async (resolve, reject) => {
          const messageId = await this.sendEncryptedMessage(bytes);
          const messageIdAsKey = intsToLong(messageId[0], messageId[1]);
          this.messagesWaitResponse.set(messageIdAsKey, {
            method,
            params,
            resolve,
            reject,
            isAck: false
          });
        });
      }
      // https://core.telegram.org/mtproto/description#schematic-presentation-of-messages
      // Encrypted Message:
      // 1. auth_key_id (int64)
      // 2. msg_key (int128)
      // 3. encrypted_data
      // encrypted_data:
      // 4. salt (int64)
      // 5. session_id (int64)
      // 6. message_id (int64)
      // 7. seq_no (int32)
      // 8. message_data_length (int32)
      // 9. message_data
      // 10. padding 12..1024
      async sendEncryptedMessage(data, options = {}) {
        const { isContentRelated = true } = options;
        const authKey = new Uint8Array(await this.getStorageItem("authKey"));
        const serverSalt = new Uint8Array(await this.getStorageItem("serverSalt"));
        const messageId = await this.getMessageId();
        const seqNo = this.getSeqNo(isContentRelated);
        const minPadding = 12;
        const unpadded = (32 + data.length + minPadding) % 16;
        const padding = minPadding + (unpadded ? 16 - unpadded : 0);
        const { crypto, sessionId } = this;
        const plainDataSerializer = new Serializer(function() {
          this.bytesRaw(serverSalt);
          this.bytesRaw(sessionId);
          this.long(messageId);
          this.int32(seqNo);
          this.uint32(data.length);
          this.bytesRaw(data);
          this.bytesRaw(crypto.getRandomBytes(padding));
        });
        const plainData = plainDataSerializer.getBytes();
        const messageKeyLarge = await crypto.SHA256(
          concatBytes(authKey.slice(88, 120), plainData)
        );
        const messageKey = messageKeyLarge.slice(8, 24);
        const encryptedData = (await this.getAESInstance(authKey, messageKey, false)).encrypt(plainData);
        const authKeyId = (await crypto.SHA1(authKey)).slice(-8);
        const serializer = new Serializer(function() {
          this.bytesRaw(authKeyId);
          this.bytesRaw(messageKey);
          this.bytesRaw(encryptedData);
        });
        this.transport.send(serializer.getBytes());
        return messageId;
      }
      async sendPlainMessage(fn, params) {
        const serializer = new Serializer(fn, params);
        const requestBytes = serializer.getBytes();
        const requestLength = requestBytes.length;
        const messageId = await this.getMessageId();
        const header = new Serializer(function() {
          this.long([0, 0]);
          this.long(messageId);
          this.uint32(requestLength);
        });
        const headerBytes = header.getBytes();
        const headerLength = headerBytes.length;
        const resultBuffer = new ArrayBuffer(headerLength + requestLength);
        const resultBytes = new Uint8Array(resultBuffer);
        resultBytes.set(headerBytes);
        resultBytes.set(requestBytes, headerLength);
        this.transport.send(resultBytes);
      }
      async getMessageId() {
        const timeOffset = await this.context.storage.get("timeOffset");
        const timeTicks = Date.now();
        const timeSec = Math.floor(timeTicks / 1e3) + timeOffset;
        const timeMSec = timeTicks % 1e3;
        const random = getRandomInt(65535);
        const { lastMessageId } = this;
        let messageId = [timeSec, timeMSec << 21 | random << 3 | 4];
        if (lastMessageId[0] > messageId[0] || lastMessageId[0] == messageId[0] && lastMessageId[1] >= messageId[1]) {
          messageId = [lastMessageId[0], lastMessageId[1] + 4];
        }
        this.lastMessageId = messageId;
        return messageId;
      }
      getSeqNo(isContentRelated = true) {
        let seqNo = this.seqNo * 2;
        if (isContentRelated) {
          seqNo += 1;
          this.seqNo += 1;
        }
        return seqNo;
      }
      updateSession() {
        this.seqNo = 0;
        this.sessionId = this.crypto.getRandomBytes(8);
        this.lastMessageId = [
          0,
          // low
          0
          // high
        ];
      }
      async getAESInstance(authKey, messageKey, isServer) {
        const x = isServer ? 8 : 0;
        const sha256a = await this.crypto.SHA256(
          concatBytes(messageKey, authKey.slice(x, 36 + x))
        );
        const sha256b = await this.crypto.SHA256(
          concatBytes(authKey.slice(40 + x, 76 + x), messageKey)
        );
        const aesKey = concatBytes(
          sha256a.slice(0, 8),
          sha256b.slice(8, 24),
          sha256a.slice(24, 32)
        );
        const aesIV = concatBytes(
          sha256b.slice(0, 8),
          sha256a.slice(8, 24),
          sha256b.slice(24, 32)
        );
        return new AES.IGE(aesKey, aesIV);
      }
      async setStorageItem(key, value) {
        return this.context.storage.set(`${this.dc.id}${key}`, value);
      }
      async getStorageItem(key) {
        return this.context.storage.get(`${this.dc.id}${key}`);
      }
    };
    module.exports = RPC;
  }
});

// node_modules/@mtproto/core/src/utils/rsa/index.js
var require_rsa = __commonJS({
  "node_modules/@mtproto/core/src/utils/rsa/index.js"(exports, module) {
    var bigInt = require_BigInteger();
    var Serializer = require_serializer();
    var {
      bytesToHex,
      hexToBytes,
      bigIntToBytes,
      bytesToBigInt
    } = require_common();
    var publisKeys = [
      {
        modulus: "c150023e2f70db7985ded064759cfecf0af328e69a41daf4d6f01b538135a6f91f8f8b2a0ec9ba9720ce352efcf6c5680ffc424bd634864902de0b4bd6d49f4e580230e3ae97d95c8b19442b3c0a10d8f5633fecedd6926a7f6dab0ddb7d457f9ea81b8465fcd6fffeed114011df91c059caedaf97625f6c96ecc74725556934ef781d866b34f011fce4d835a090196e9a5f0e4449af7eb697ddb9076494ca5f81104a305b6dd27665722c46b60e5df680fb16b210607ef217652e60236c255f6a28315f4083a96791d7214bf64c1df4fd0db1944fb26a2a57031b32eee64ad15a8ba68885cde74a5bfc920f6abf59ba5c75506373e7130f9042da922179251f",
        exponent: "010001"
      },
      {
        modulus: "aeec36c8ffc109cb099624685b97815415657bd76d8c9c3e398103d7ad16c9bba6f525ed0412d7ae2c2de2b44e77d72cbf4b7438709a4e646a05c43427c7f184debf72947519680e651500890c6832796dd11f772c25ff8f576755afe055b0a3752c696eb7d8da0d8be1faf38c9bdd97ce0a77d3916230c4032167100edd0f9e7a3a9b602d04367b689536af0d64b613ccba7962939d3b57682beb6dae5b608130b2e52aca78ba023cf6ce806b1dc49c72cf928a7199d22e3d7ac84e47bc9427d0236945d10dbd15177bab413fbf0edfda09f014c7a7da088dde9759702ca760af2b8e4e97cc055c617bd74c3d97008635b98dc4d621b4891da9fb0473047927",
        exponent: "010001"
      },
      {
        modulus: "bdf2c77d81f6afd47bd30f29ac76e55adfe70e487e5e48297e5a9055c9c07d2b93b4ed3994d3eca5098bf18d978d54f8b7c713eb10247607e69af9ef44f38e28f8b439f257a11572945cc0406fe3f37bb92b79112db69eedf2dc71584a661638ea5becb9e23585074b80d57d9f5710dd30d2da940e0ada2f1b878397dc1a72b5ce2531b6f7dd158e09c828d03450ca0ff8a174deacebcaa22dde84ef66ad370f259d18af806638012da0ca4a70baa83d9c158f3552bc9158e69bf332a45809e1c36905a5caa12348dd57941a482131be7b2355a5f4635374f3bd3ddf5ff925bf4809ee27c1e67d9120c5fe08a9de458b1b4a3c5d0a428437f2beca81f4e2d5ff",
        exponent: "010001"
      },
      {
        modulus: "b3f762b739be98f343eb1921cf0148cfa27ff7af02b6471213fed9daa0098976e667750324f1abcea4c31e43b7d11f1579133f2b3d9fe27474e462058884e5e1b123be9cbbc6a443b2925c08520e7325e6f1a6d50e117eb61ea49d2534c8bb4d2ae4153fabe832b9edf4c5755fdd8b19940b81d1d96cf433d19e6a22968a85dc80f0312f596bd2530c1cfb28b5fe019ac9bc25cd9c2a5d8a0f3a1c0c79bcca524d315b5e21b5c26b46babe3d75d06d1cd33329ec782a0f22891ed1db42a1d6c0dea431428bc4d7aabdcf3e0eb6fda4e23eb7733e7727e9a1915580796c55188d2596d2665ad1182ba7abf15aaa5a8b779ea996317a20ae044b820bff35b6e8a1",
        exponent: "010001"
      },
      {
        modulus: "be6a71558ee577ff03023cfa17aab4e6c86383cff8a7ad38edb9fafe6f323f2d5106cbc8cafb83b869cffd1ccf121cd743d509e589e68765c96601e813dc5b9dfc4be415c7a6526132d0035ca33d6d6075d4f535122a1cdfe017041f1088d1419f65c8e5490ee613e16dbf662698c0f54870f0475fa893fc41eb55b08ff1ac211bc045ded31be27d12c96d8d3cfc6a7ae8aa50bf2ee0f30ed507cc2581e3dec56de94f5dc0a7abee0be990b893f2887bd2c6310a1e0a9e3e38bd34fded2541508dc102a9c9b4c95effd9dd2dfe96c29be647d6c69d66ca500843cfaed6e440196f1dbe0e2e22163c61ca48c79116fa77216726749a976a1c4b0944b5121e8c01",
        exponent: "010001"
      }
    ];
    var RSA = class {
      constructor({ SHA1 }) {
        this.SHA1 = SHA1;
      }
      async getPublisKeysByHex() {
        const publisKeysByHex = {};
        for (const publisKey of publisKeys) {
          const RSAPublicKey = new Serializer(function() {
            this.bytes(hexToBytes(publisKey.modulus));
            this.bytes(hexToBytes(publisKey.exponent));
          });
          const buffer = RSAPublicKey.getBuffer();
          const fingerprintBytes = (await this.SHA1(buffer)).slice(-8);
          fingerprintBytes.reverse();
          publisKeysByHex[bytesToHex(fingerprintBytes)] = {
            modulus: publisKey.modulus,
            exponent: publisKey.exponent
          };
        }
        return publisKeysByHex;
      }
      async getRsaKeyByFingerprints(fingerprints) {
        let resultKey = null;
        const publisKeysByHex = await this.getPublisKeysByHex();
        fingerprints.forEach((fingerprint) => {
          if (!!resultKey) {
            return;
          }
          const fingerprintHex = bigInt(fingerprint).toString(16);
          const foundKey = publisKeysByHex[fingerprintHex];
          if (foundKey) {
            resultKey = {
              fingerprint,
              ...foundKey
            };
          }
        });
        return resultKey;
      }
      encrypt(publicKey, bytes) {
        const encryptedBigInt = bytesToBigInt(bytes).modPow(
          bigInt(publicKey.exponent, 16),
          bigInt(publicKey.modulus, 16)
        );
        return bigIntToBytes(encryptedBigInt, 256);
      }
    };
    module.exports = RSA;
  }
});

// node_modules/@mtproto/core/src/crypto/index.js
var require_crypto = __commonJS({
  "node_modules/@mtproto/core/src/crypto/index.js"(exports, module) {
    var bigInt = require_BigInteger();
    var {
      xorBytes,
      concatBytes,
      bigIntToBytes,
      bytesToBigInt
    } = require_common();
    var RSA = require_rsa();
    var Crypto = class {
      constructor({ SHA1, SHA256, PBKDF2, getRandomBytes }) {
        this.SHA1 = SHA1;
        this.SHA256 = SHA256;
        this.PBKDF2 = PBKDF2;
        this.getRandomBytes = getRandomBytes;
        this.rsa = new RSA({ SHA1 });
      }
      async getSRPParams({ g, p, salt1, salt2, gB, password }) {
        const H = this.SHA256;
        const SH = (data, salt) => {
          return this.SHA256(concatBytes(salt, data, salt));
        };
        const PH1 = async (password2, salt12, salt22) => {
          return await SH(await SH(password2, salt12), salt22);
        };
        const PH2 = async (password2, salt12, salt22) => {
          return await SH(
            await this.PBKDF2(await PH1(password2, salt12, salt22), salt12, 1e5),
            salt22
          );
        };
        const encoder = new TextEncoder();
        const gBigInt = bigInt(g);
        const gBytes = bigIntToBytes(gBigInt, 256);
        const pBigInt = bytesToBigInt(p);
        const aBigInt = bytesToBigInt(this.getRandomBytes(256));
        const gABigInt = gBigInt.modPow(aBigInt, pBigInt);
        const gABytes = bigIntToBytes(gABigInt);
        const gBBytes = bytesToBigInt(gB);
        const [k2, u, x] = await Promise.all([
          H(concatBytes(p, gBytes)),
          H(concatBytes(gABytes, gB)),
          PH2(encoder.encode(password), salt1, salt2)
        ]);
        const kBigInt = bytesToBigInt(k2);
        const uBigInt = bytesToBigInt(u);
        const xBigInt = bytesToBigInt(x);
        const vBigInt = gBigInt.modPow(xBigInt, pBigInt);
        const kVBigInt = kBigInt.multiply(vBigInt).mod(pBigInt);
        let tBigInt = gBBytes.subtract(kVBigInt).mod(pBigInt);
        if (tBigInt.isNegative()) {
          tBigInt = tBigInt.add(pBigInt);
        }
        const sABigInt = tBigInt.modPow(
          aBigInt.add(uBigInt.multiply(xBigInt)),
          pBigInt
        );
        const sABytes = bigIntToBytes(sABigInt);
        const kA = await H(sABytes);
        const M1 = await H(
          concatBytes(
            xorBytes(await H(p), await H(gBytes)),
            await H(salt1),
            await H(salt2),
            gABytes,
            gB,
            kA
          )
        );
        return { A: gABytes, M1 };
      }
    };
    module.exports = Crypto;
  }
});

// node_modules/@mtproto/core/src/storage/index.js
var require_storage = __commonJS({
  "node_modules/@mtproto/core/src/storage/index.js"(exports, module) {
    var Storage = class {
      constructor(options = {}, getLocalStorage) {
        this.cache = {};
        this.localStorage = options.instance || getLocalStorage(options);
      }
      async set(key, value) {
        this.cache[key] = value;
        const result = await this.localStorage.set(key, JSON.stringify(value));
        return result;
      }
      async get(key) {
        if (key in this.cache) {
          return this.cache[key];
        }
        const fromLocalStorage = await this.localStorage.get(key);
        if (fromLocalStorage) {
          this.cache[key] = JSON.parse(fromLocalStorage);
          return this.cache[key];
        }
        return null;
      }
    };
    module.exports = Storage;
  }
});

// node_modules/@mtproto/core/src/index.js
var require_src = __commonJS({
  "node_modules/@mtproto/core/src/index.js"(exports, module) {
    var EventEmitter = require_events();
    var RPC = require_rpc();
    var Crypto = require_crypto();
    var Storage = require_storage();
    var baseDebug = require_base_debug();
    var debug = baseDebug.extend("main");
    var TEST_DC_LIST = [
      {
        id: 1,
        ip: "149.154.175.10",
        port: 80,
        test: true
      },
      {
        id: 2,
        ip: "149.154.167.40",
        port: 443,
        test: true
      },
      {
        id: 3,
        ip: "149.154.175.117",
        port: 443,
        test: true
      }
    ];
    var PRODUCTION_DC_LIST = [
      {
        id: 1,
        ip: "149.154.175.53",
        port: 443
      },
      {
        id: 2,
        ip: "149.154.167.50",
        port: 443
      },
      {
        id: 3,
        ip: "149.154.175.100",
        port: 443
      },
      {
        id: 4,
        ip: "149.154.167.92",
        port: 443
      },
      {
        id: 5,
        ip: "91.108.56.128",
        port: 443
      }
    ];
    function makeMTProto(envMethods) {
      const requiredEnvMethods = [
        "SHA1",
        "SHA256",
        "PBKDF2",
        "getRandomBytes",
        "getLocalStorage",
        "createTransport"
      ];
      const envMethodsIsValid = requiredEnvMethods.every(
        (methodName) => methodName in envMethods
      );
      if (!envMethodsIsValid) {
        throw new Error("Specify all envMethods");
      }
      return class {
        constructor(options) {
          const { api_id, api_hash, storageOptions } = options;
          this.api_id = api_id;
          this.api_hash = api_hash;
          this.initConnectionParams = {};
          this.dcList = !!options.test ? TEST_DC_LIST : PRODUCTION_DC_LIST;
          this.envMethods = envMethods;
          this.rpcs = /* @__PURE__ */ new Map();
          this.crypto = new Crypto(this.envMethods);
          this.storage = new Storage(
            storageOptions,
            this.envMethods.getLocalStorage
          );
          this.updates = new EventEmitter();
        }
        async call(method, params = {}, options = {}) {
          const { syncAuth = true } = options;
          const dcId = options.dcId || await this.storage.get("defaultDcId") || 2;
          const rpc = this.getRPC(dcId);
          const result = await rpc.call(method, params);
          if (syncAuth && result._ === "auth.authorization") {
            await this.syncAuth(dcId);
          }
          return result;
        }
        syncAuth(dcId) {
          const promises = [];
          this.dcList.forEach((dc) => {
            if (dcId === dc.id) {
              return;
            }
            const promise = this.call(
              "auth.exportAuthorization",
              {
                dc_id: dc.id
              },
              { dcId }
            ).then((result) => {
              return this.call(
                "auth.importAuthorization",
                {
                  id: result.id,
                  bytes: result.bytes
                },
                { dcId: dc.id, syncAuth: false }
              );
            }).catch((error) => {
              debug(`error when copy auth to DC ${dc.id}`, error);
              return Promise.resolve();
            });
            promises.push(promise);
          });
          return Promise.all(promises);
        }
        setDefaultDc(dcId) {
          return this.storage.set("defaultDcId", dcId);
        }
        getRPC(dcId) {
          if (this.rpcs.has(dcId)) {
            return this.rpcs.get(dcId);
          }
          const dc = this.dcList.find(({ id }) => id === dcId);
          if (!dc) {
            debug(`don't find DC ${dcId}`);
            return;
          }
          const transport = this.envMethods.createTransport(dc, this.crypto);
          const rpc = new RPC({
            dc,
            context: this,
            transport
          });
          this.rpcs.set(dcId, rpc);
          return rpc;
        }
        updateInitConnectionParams(params) {
          this.initConnectionParams = params;
        }
      };
    }
    module.exports = makeMTProto;
  }
});

// browser-external:crypto
var require_crypto2 = __commonJS({
  "browser-external:crypto"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "crypto" has been externalized for browser compatibility. Cannot access "crypto.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/@mtproto/core/envs/node/sha1.js
var require_sha1 = __commonJS({
  "node_modules/@mtproto/core/envs/node/sha1.js"(exports, module) {
    var crypto = require_crypto2();
    async function SHA1(data) {
      data = new Uint8Array(data);
      const hash = crypto.createHash("sha1");
      hash.update(data);
      return new Uint8Array(hash.digest());
    }
    module.exports = SHA1;
  }
});

// node_modules/@mtproto/core/envs/node/sha256.js
var require_sha256 = __commonJS({
  "node_modules/@mtproto/core/envs/node/sha256.js"(exports, module) {
    var crypto = require_crypto2();
    async function SHA256(data) {
      data = new Uint8Array(data);
      const hash = crypto.createHash("sha256");
      hash.update(data);
      return new Uint8Array(hash.digest());
    }
    module.exports = SHA256;
  }
});

// node_modules/@mtproto/core/envs/node/pbkdf2.js
var require_pbkdf2 = __commonJS({
  "node_modules/@mtproto/core/envs/node/pbkdf2.js"(exports, module) {
    var crypto = require_crypto2();
    async function PBKDF2(password, salt, iterations) {
      return crypto.pbkdf2Sync(password, salt, iterations, 64, "sha512");
    }
    module.exports = PBKDF2;
  }
});

// browser-external:net
var require_net = __commonJS({
  "browser-external:net"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "net" has been externalized for browser compatibility. Cannot access "net.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/@mtproto/core/src/transport/obfuscated/index.js
var require_obfuscated = __commonJS({
  "node_modules/@mtproto/core/src/transport/obfuscated/index.js"(exports, module) {
    var EventEmitter = require_events();
    var AES = require_aes();
    var Obfuscated = class extends EventEmitter {
      // https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation
      async generateObfuscationKeys() {
        let initBytes = null;
        while (true) {
          initBytes = this.crypto.getRandomBytes(64);
          const initDataView = new DataView(initBytes.buffer);
          initDataView.setUint32(56, 4008636142, true);
          if (initBytes[0] === 239) {
            continue;
          }
          const firstInt = initDataView.getUint32(0, true);
          if ([
            1145128264,
            1414745936,
            542393671,
            1230262351,
            3722304989,
            4008636142,
            33620758
          ].includes(firstInt)) {
            continue;
          }
          const secondInt = initDataView.getUint32(4, true);
          if (secondInt === 0) {
            continue;
          }
          break;
        }
        const initRevBytes = new Uint8Array(initBytes).reverse();
        const encryptKey = initBytes.slice(8, 40);
        const encryptIV = initBytes.slice(40, 56);
        const decryptKey = initRevBytes.slice(8, 40);
        const decryptIV = initRevBytes.slice(40, 56);
        this.encryptAES = new AES.CTR(encryptKey, encryptIV);
        this.decryptAES = new AES.CTR(decryptKey, decryptIV);
        const encryptedInitBytes = await this.obfuscate(initBytes);
        initBytes.set(encryptedInitBytes.slice(56, 64), 56);
        return initBytes;
      }
      async obfuscate(bytes) {
        return this.encryptAES.encrypt(bytes);
      }
      async deobfuscate(bytes) {
        return this.decryptAES.decrypt(bytes);
      }
      getIntermediatePayload(bytes) {
        const dataView = new DataView(bytes.buffer);
        const payloadLength = dataView.getUint32(0, true);
        if (payloadLength === 4) {
          const code = dataView.getInt32(4, true) * -1;
          this.emit("error", {
            type: "transport",
            code
          });
        }
        return bytes.slice(4);
      }
      getIntermediateBytes(bytes) {
        const resultBytes = new Uint8Array(bytes.length + 4);
        const dataView = new DataView(resultBytes.buffer);
        dataView.setUint32(0, bytes.length, true);
        resultBytes.set(bytes, 4);
        return resultBytes;
      }
    };
    module.exports = Obfuscated;
  }
});

// node_modules/@mtproto/core/envs/node/transport.js
var require_transport = __commonJS({
  "node_modules/@mtproto/core/envs/node/transport.js"(exports, module) {
    var net = require_net();
    var Obfuscated = require_obfuscated();
    var baseDebug = require_base_debug();
    var Transport = class extends Obfuscated {
      constructor(dc, crypto) {
        super();
        this.dc = dc;
        this.debug = baseDebug.extend(`transport-${this.dc.id}`);
        this.crypto = crypto;
        this.connect();
      }
      get isAvailable() {
        return this.socket.writable;
      }
      connect() {
        this.stream = new Uint8Array();
        this.socket = net.connect(
          this.dc.port,
          this.dc.ip,
          this.handleConnect.bind(this)
        );
        this.socket.on("data", this.handleData.bind(this));
        this.socket.on("error", this.handleError.bind(this));
        this.socket.on("close", this.handleClose.bind(this));
        this.debug("connect");
      }
      async handleData(data) {
        const bytes = new Uint8Array(data);
        const deobfuscatedBytes = await this.deobfuscate(bytes);
        this.stream = new Uint8Array([...this.stream, ...deobfuscatedBytes]);
        while (this.stream.length >= 8) {
          const dataView = new DataView(this.stream.buffer);
          const payloadLength = dataView.getUint32(0, true);
          if (payloadLength <= this.stream.length - 4) {
            const payload = this.stream.slice(4, payloadLength + 4);
            if (payloadLength === 4) {
              const code = dataView.getInt32(4, true) * -1;
              this.emit("error", {
                type: "transport",
                code
              });
            } else {
              this.emit("message", payload.buffer);
            }
            this.stream = this.stream.slice(payloadLength + 4);
          } else {
            break;
          }
        }
      }
      async handleError(error) {
        this.emit("error", {
          type: "socket"
        });
      }
      async handleClose(hadError) {
        if (!this.socket.destroyed) {
          this.socket.destroy();
        }
        this.connect();
      }
      async handleConnect() {
        const initialMessage = await this.generateObfuscationKeys();
        this.socket.write(initialMessage);
        this.emit("open");
      }
      async send(bytes) {
        const intermediateBytes = this.getIntermediateBytes(bytes);
        const obfuscatedBytes = await this.obfuscate(intermediateBytes);
        this.socket.write(obfuscatedBytes);
      }
    };
    module.exports = Transport;
  }
});

// node_modules/@mtproto/core/envs/node/get-random-bytes.js
var require_get_random_bytes = __commonJS({
  "node_modules/@mtproto/core/envs/node/get-random-bytes.js"(exports, module) {
    var crypto = require_crypto2();
    function getRandomBytes(length) {
      return new Uint8Array(crypto.randomBytes(length));
    }
    module.exports = getRandomBytes;
  }
});

// browser-external:path
var require_path = __commonJS({
  "browser-external:path"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "path" has been externalized for browser compatibility. Cannot access "path.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:os
var require_os = __commonJS({
  "browser-external:os"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "os" has been externalized for browser compatibility. Cannot access "os.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:fs
var require_fs = __commonJS({
  "browser-external:fs"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "fs" has been externalized for browser compatibility. Cannot access "fs.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:constants
var require_constants2 = __commonJS({
  "browser-external:constants"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "constants" has been externalized for browser compatibility. Cannot access "constants.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/graceful-fs/polyfills.js
var require_polyfills = __commonJS({
  "node_modules/graceful-fs/polyfills.js"(exports, module) {
    var constants = require_constants2();
    var origCwd = process.cwd;
    var cwd = null;
    var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
    process.cwd = function() {
      if (!cwd)
        cwd = origCwd.call(process);
      return cwd;
    };
    try {
      process.cwd();
    } catch (er) {
    }
    if (typeof process.chdir === "function") {
      chdir = process.chdir;
      process.chdir = function(d) {
        cwd = null;
        chdir.call(process, d);
      };
      if (Object.setPrototypeOf)
        Object.setPrototypeOf(process.chdir, chdir);
    }
    var chdir;
    module.exports = patch;
    function patch(fs) {
      if (constants.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
        patchLchmod(fs);
      }
      if (!fs.lutimes) {
        patchLutimes(fs);
      }
      fs.chown = chownFix(fs.chown);
      fs.fchown = chownFix(fs.fchown);
      fs.lchown = chownFix(fs.lchown);
      fs.chmod = chmodFix(fs.chmod);
      fs.fchmod = chmodFix(fs.fchmod);
      fs.lchmod = chmodFix(fs.lchmod);
      fs.chownSync = chownFixSync(fs.chownSync);
      fs.fchownSync = chownFixSync(fs.fchownSync);
      fs.lchownSync = chownFixSync(fs.lchownSync);
      fs.chmodSync = chmodFixSync(fs.chmodSync);
      fs.fchmodSync = chmodFixSync(fs.fchmodSync);
      fs.lchmodSync = chmodFixSync(fs.lchmodSync);
      fs.stat = statFix(fs.stat);
      fs.fstat = statFix(fs.fstat);
      fs.lstat = statFix(fs.lstat);
      fs.statSync = statFixSync(fs.statSync);
      fs.fstatSync = statFixSync(fs.fstatSync);
      fs.lstatSync = statFixSync(fs.lstatSync);
      if (fs.chmod && !fs.lchmod) {
        fs.lchmod = function(path, mode, cb) {
          if (cb)
            process.nextTick(cb);
        };
        fs.lchmodSync = function() {
        };
      }
      if (fs.chown && !fs.lchown) {
        fs.lchown = function(path, uid, gid, cb) {
          if (cb)
            process.nextTick(cb);
        };
        fs.lchownSync = function() {
        };
      }
      if (platform === "win32") {
        fs.rename = typeof fs.rename !== "function" ? fs.rename : function(fs$rename) {
          function rename(from, to, cb) {
            var start = Date.now();
            var backoff = 0;
            fs$rename(from, to, function CB(er) {
              if (er && (er.code === "EACCES" || er.code === "EPERM" || er.code === "EBUSY") && Date.now() - start < 6e4) {
                setTimeout(function() {
                  fs.stat(to, function(stater, st) {
                    if (stater && stater.code === "ENOENT")
                      fs$rename(from, to, CB);
                    else
                      cb(er);
                  });
                }, backoff);
                if (backoff < 100)
                  backoff += 10;
                return;
              }
              if (cb)
                cb(er);
            });
          }
          if (Object.setPrototypeOf)
            Object.setPrototypeOf(rename, fs$rename);
          return rename;
        }(fs.rename);
      }
      fs.read = typeof fs.read !== "function" ? fs.read : function(fs$read) {
        function read(fd, buffer, offset, length, position, callback_) {
          var callback;
          if (callback_ && typeof callback_ === "function") {
            var eagCounter = 0;
            callback = function(er, _, __) {
              if (er && er.code === "EAGAIN" && eagCounter < 10) {
                eagCounter++;
                return fs$read.call(fs, fd, buffer, offset, length, position, callback);
              }
              callback_.apply(this, arguments);
            };
          }
          return fs$read.call(fs, fd, buffer, offset, length, position, callback);
        }
        if (Object.setPrototypeOf)
          Object.setPrototypeOf(read, fs$read);
        return read;
      }(fs.read);
      fs.readSync = typeof fs.readSync !== "function" ? fs.readSync : function(fs$readSync) {
        return function(fd, buffer, offset, length, position) {
          var eagCounter = 0;
          while (true) {
            try {
              return fs$readSync.call(fs, fd, buffer, offset, length, position);
            } catch (er) {
              if (er.code === "EAGAIN" && eagCounter < 10) {
                eagCounter++;
                continue;
              }
              throw er;
            }
          }
        };
      }(fs.readSync);
      function patchLchmod(fs2) {
        fs2.lchmod = function(path, mode, callback) {
          fs2.open(
            path,
            constants.O_WRONLY | constants.O_SYMLINK,
            mode,
            function(err, fd) {
              if (err) {
                if (callback)
                  callback(err);
                return;
              }
              fs2.fchmod(fd, mode, function(err2) {
                fs2.close(fd, function(err22) {
                  if (callback)
                    callback(err2 || err22);
                });
              });
            }
          );
        };
        fs2.lchmodSync = function(path, mode) {
          var fd = fs2.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode);
          var threw = true;
          var ret;
          try {
            ret = fs2.fchmodSync(fd, mode);
            threw = false;
          } finally {
            if (threw) {
              try {
                fs2.closeSync(fd);
              } catch (er) {
              }
            } else {
              fs2.closeSync(fd);
            }
          }
          return ret;
        };
      }
      function patchLutimes(fs2) {
        if (constants.hasOwnProperty("O_SYMLINK") && fs2.futimes) {
          fs2.lutimes = function(path, at, mt, cb) {
            fs2.open(path, constants.O_SYMLINK, function(er, fd) {
              if (er) {
                if (cb)
                  cb(er);
                return;
              }
              fs2.futimes(fd, at, mt, function(er2) {
                fs2.close(fd, function(er22) {
                  if (cb)
                    cb(er2 || er22);
                });
              });
            });
          };
          fs2.lutimesSync = function(path, at, mt) {
            var fd = fs2.openSync(path, constants.O_SYMLINK);
            var ret;
            var threw = true;
            try {
              ret = fs2.futimesSync(fd, at, mt);
              threw = false;
            } finally {
              if (threw) {
                try {
                  fs2.closeSync(fd);
                } catch (er) {
                }
              } else {
                fs2.closeSync(fd);
              }
            }
            return ret;
          };
        } else if (fs2.futimes) {
          fs2.lutimes = function(_a, _b, _c, cb) {
            if (cb)
              process.nextTick(cb);
          };
          fs2.lutimesSync = function() {
          };
        }
      }
      function chmodFix(orig) {
        if (!orig)
          return orig;
        return function(target, mode, cb) {
          return orig.call(fs, target, mode, function(er) {
            if (chownErOk(er))
              er = null;
            if (cb)
              cb.apply(this, arguments);
          });
        };
      }
      function chmodFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, mode) {
          try {
            return orig.call(fs, target, mode);
          } catch (er) {
            if (!chownErOk(er))
              throw er;
          }
        };
      }
      function chownFix(orig) {
        if (!orig)
          return orig;
        return function(target, uid, gid, cb) {
          return orig.call(fs, target, uid, gid, function(er) {
            if (chownErOk(er))
              er = null;
            if (cb)
              cb.apply(this, arguments);
          });
        };
      }
      function chownFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, uid, gid) {
          try {
            return orig.call(fs, target, uid, gid);
          } catch (er) {
            if (!chownErOk(er))
              throw er;
          }
        };
      }
      function statFix(orig) {
        if (!orig)
          return orig;
        return function(target, options, cb) {
          if (typeof options === "function") {
            cb = options;
            options = null;
          }
          function callback(er, stats) {
            if (stats) {
              if (stats.uid < 0)
                stats.uid += 4294967296;
              if (stats.gid < 0)
                stats.gid += 4294967296;
            }
            if (cb)
              cb.apply(this, arguments);
          }
          return options ? orig.call(fs, target, options, callback) : orig.call(fs, target, callback);
        };
      }
      function statFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, options) {
          var stats = options ? orig.call(fs, target, options) : orig.call(fs, target);
          if (stats) {
            if (stats.uid < 0)
              stats.uid += 4294967296;
            if (stats.gid < 0)
              stats.gid += 4294967296;
          }
          return stats;
        };
      }
      function chownErOk(er) {
        if (!er)
          return true;
        if (er.code === "ENOSYS")
          return true;
        var nonroot = !process.getuid || process.getuid() !== 0;
        if (nonroot) {
          if (er.code === "EINVAL" || er.code === "EPERM")
            return true;
        }
        return false;
      }
    }
  }
});

// browser-external:stream
var require_stream = __commonJS({
  "browser-external:stream"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "stream" has been externalized for browser compatibility. Cannot access "stream.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/graceful-fs/legacy-streams.js
var require_legacy_streams = __commonJS({
  "node_modules/graceful-fs/legacy-streams.js"(exports, module) {
    var Stream = require_stream().Stream;
    module.exports = legacy;
    function legacy(fs) {
      return {
        ReadStream,
        WriteStream
      };
      function ReadStream(path, options) {
        if (!(this instanceof ReadStream))
          return new ReadStream(path, options);
        Stream.call(this);
        var self2 = this;
        this.path = path;
        this.fd = null;
        this.readable = true;
        this.paused = false;
        this.flags = "r";
        this.mode = 438;
        this.bufferSize = 64 * 1024;
        options = options || {};
        var keys = Object.keys(options);
        for (var index = 0, length = keys.length; index < length; index++) {
          var key = keys[index];
          this[key] = options[key];
        }
        if (this.encoding)
          this.setEncoding(this.encoding);
        if (this.start !== void 0) {
          if ("number" !== typeof this.start) {
            throw TypeError("start must be a Number");
          }
          if (this.end === void 0) {
            this.end = Infinity;
          } else if ("number" !== typeof this.end) {
            throw TypeError("end must be a Number");
          }
          if (this.start > this.end) {
            throw new Error("start must be <= end");
          }
          this.pos = this.start;
        }
        if (this.fd !== null) {
          process.nextTick(function() {
            self2._read();
          });
          return;
        }
        fs.open(this.path, this.flags, this.mode, function(err, fd) {
          if (err) {
            self2.emit("error", err);
            self2.readable = false;
            return;
          }
          self2.fd = fd;
          self2.emit("open", fd);
          self2._read();
        });
      }
      function WriteStream(path, options) {
        if (!(this instanceof WriteStream))
          return new WriteStream(path, options);
        Stream.call(this);
        this.path = path;
        this.fd = null;
        this.writable = true;
        this.flags = "w";
        this.encoding = "binary";
        this.mode = 438;
        this.bytesWritten = 0;
        options = options || {};
        var keys = Object.keys(options);
        for (var index = 0, length = keys.length; index < length; index++) {
          var key = keys[index];
          this[key] = options[key];
        }
        if (this.start !== void 0) {
          if ("number" !== typeof this.start) {
            throw TypeError("start must be a Number");
          }
          if (this.start < 0) {
            throw new Error("start must be >= zero");
          }
          this.pos = this.start;
        }
        this.busy = false;
        this._queue = [];
        if (this.fd === null) {
          this._open = fs.open;
          this._queue.push([this._open, this.path, this.flags, this.mode, void 0]);
          this.flush();
        }
      }
    }
  }
});

// node_modules/graceful-fs/clone.js
var require_clone = __commonJS({
  "node_modules/graceful-fs/clone.js"(exports, module) {
    "use strict";
    module.exports = clone;
    var getPrototypeOf = Object.getPrototypeOf || function(obj) {
      return obj.__proto__;
    };
    function clone(obj) {
      if (obj === null || typeof obj !== "object")
        return obj;
      if (obj instanceof Object)
        var copy = { __proto__: getPrototypeOf(obj) };
      else
        var copy = /* @__PURE__ */ Object.create(null);
      Object.getOwnPropertyNames(obj).forEach(function(key) {
        Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
      });
      return copy;
    }
  }
});

// browser-external:util
var require_util = __commonJS({
  "browser-external:util"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "util" has been externalized for browser compatibility. Cannot access "util.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:assert
var require_assert = __commonJS({
  "browser-external:assert"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "assert" has been externalized for browser compatibility. Cannot access "assert.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/graceful-fs/graceful-fs.js
var require_graceful_fs = __commonJS({
  "node_modules/graceful-fs/graceful-fs.js"(exports, module) {
    var fs = require_fs();
    var polyfills = require_polyfills();
    var legacy = require_legacy_streams();
    var clone = require_clone();
    var util = require_util();
    var gracefulQueue;
    var previousSymbol;
    if (typeof Symbol === "function" && typeof Symbol.for === "function") {
      gracefulQueue = Symbol.for("graceful-fs.queue");
      previousSymbol = Symbol.for("graceful-fs.previous");
    } else {
      gracefulQueue = "___graceful-fs.queue";
      previousSymbol = "___graceful-fs.previous";
    }
    function noop() {
    }
    function publishQueue(context, queue2) {
      Object.defineProperty(context, gracefulQueue, {
        get: function() {
          return queue2;
        }
      });
    }
    var debug = noop;
    if (util.debuglog)
      debug = util.debuglog("gfs4");
    else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
      debug = function() {
        var m = util.format.apply(util, arguments);
        m = "GFS4: " + m.split(/\n/).join("\nGFS4: ");
        console.error(m);
      };
    if (!fs[gracefulQueue]) {
      queue = global[gracefulQueue] || [];
      publishQueue(fs, queue);
      fs.close = function(fs$close) {
        function close(fd, cb) {
          return fs$close.call(fs, fd, function(err) {
            if (!err) {
              resetQueue();
            }
            if (typeof cb === "function")
              cb.apply(this, arguments);
          });
        }
        Object.defineProperty(close, previousSymbol, {
          value: fs$close
        });
        return close;
      }(fs.close);
      fs.closeSync = function(fs$closeSync) {
        function closeSync(fd) {
          fs$closeSync.apply(fs, arguments);
          resetQueue();
        }
        Object.defineProperty(closeSync, previousSymbol, {
          value: fs$closeSync
        });
        return closeSync;
      }(fs.closeSync);
      if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
        process.on("exit", function() {
          debug(fs[gracefulQueue]);
          require_assert().equal(fs[gracefulQueue].length, 0);
        });
      }
    }
    var queue;
    if (!global[gracefulQueue]) {
      publishQueue(global, fs[gracefulQueue]);
    }
    module.exports = patch(clone(fs));
    if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {
      module.exports = patch(fs);
      fs.__patched = true;
    }
    function patch(fs2) {
      polyfills(fs2);
      fs2.gracefulify = patch;
      fs2.createReadStream = createReadStream;
      fs2.createWriteStream = createWriteStream;
      var fs$readFile = fs2.readFile;
      fs2.readFile = readFile;
      function readFile(path, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        return go$readFile(path, options, cb);
        function go$readFile(path2, options2, cb2, startTime) {
          return fs$readFile(path2, options2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$readFile, [path2, options2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$writeFile = fs2.writeFile;
      fs2.writeFile = writeFile;
      function writeFile(path, data, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        return go$writeFile(path, data, options, cb);
        function go$writeFile(path2, data2, options2, cb2, startTime) {
          return fs$writeFile(path2, data2, options2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$writeFile, [path2, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$appendFile = fs2.appendFile;
      if (fs$appendFile)
        fs2.appendFile = appendFile;
      function appendFile(path, data, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        return go$appendFile(path, data, options, cb);
        function go$appendFile(path2, data2, options2, cb2, startTime) {
          return fs$appendFile(path2, data2, options2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$appendFile, [path2, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$copyFile = fs2.copyFile;
      if (fs$copyFile)
        fs2.copyFile = copyFile;
      function copyFile(src, dest, flags, cb) {
        if (typeof flags === "function") {
          cb = flags;
          flags = 0;
        }
        return go$copyFile(src, dest, flags, cb);
        function go$copyFile(src2, dest2, flags2, cb2, startTime) {
          return fs$copyFile(src2, dest2, flags2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$copyFile, [src2, dest2, flags2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$readdir = fs2.readdir;
      fs2.readdir = readdir;
      var noReaddirOptionVersions = /^v[0-5]\./;
      function readdir(path, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir2(path2, options2, cb2, startTime) {
          return fs$readdir(path2, fs$readdirCallback(
            path2,
            options2,
            cb2,
            startTime
          ));
        } : function go$readdir2(path2, options2, cb2, startTime) {
          return fs$readdir(path2, options2, fs$readdirCallback(
            path2,
            options2,
            cb2,
            startTime
          ));
        };
        return go$readdir(path, options, cb);
        function fs$readdirCallback(path2, options2, cb2, startTime) {
          return function(err, files) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([
                go$readdir,
                [path2, options2, cb2],
                err,
                startTime || Date.now(),
                Date.now()
              ]);
            else {
              if (files && files.sort)
                files.sort();
              if (typeof cb2 === "function")
                cb2.call(this, err, files);
            }
          };
        }
      }
      if (process.version.substr(0, 4) === "v0.8") {
        var legStreams = legacy(fs2);
        ReadStream = legStreams.ReadStream;
        WriteStream = legStreams.WriteStream;
      }
      var fs$ReadStream = fs2.ReadStream;
      if (fs$ReadStream) {
        ReadStream.prototype = Object.create(fs$ReadStream.prototype);
        ReadStream.prototype.open = ReadStream$open;
      }
      var fs$WriteStream = fs2.WriteStream;
      if (fs$WriteStream) {
        WriteStream.prototype = Object.create(fs$WriteStream.prototype);
        WriteStream.prototype.open = WriteStream$open;
      }
      Object.defineProperty(fs2, "ReadStream", {
        get: function() {
          return ReadStream;
        },
        set: function(val) {
          ReadStream = val;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(fs2, "WriteStream", {
        get: function() {
          return WriteStream;
        },
        set: function(val) {
          WriteStream = val;
        },
        enumerable: true,
        configurable: true
      });
      var FileReadStream = ReadStream;
      Object.defineProperty(fs2, "FileReadStream", {
        get: function() {
          return FileReadStream;
        },
        set: function(val) {
          FileReadStream = val;
        },
        enumerable: true,
        configurable: true
      });
      var FileWriteStream = WriteStream;
      Object.defineProperty(fs2, "FileWriteStream", {
        get: function() {
          return FileWriteStream;
        },
        set: function(val) {
          FileWriteStream = val;
        },
        enumerable: true,
        configurable: true
      });
      function ReadStream(path, options) {
        if (this instanceof ReadStream)
          return fs$ReadStream.apply(this, arguments), this;
        else
          return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
      }
      function ReadStream$open() {
        var that = this;
        open(that.path, that.flags, that.mode, function(err, fd) {
          if (err) {
            if (that.autoClose)
              that.destroy();
            that.emit("error", err);
          } else {
            that.fd = fd;
            that.emit("open", fd);
            that.read();
          }
        });
      }
      function WriteStream(path, options) {
        if (this instanceof WriteStream)
          return fs$WriteStream.apply(this, arguments), this;
        else
          return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
      }
      function WriteStream$open() {
        var that = this;
        open(that.path, that.flags, that.mode, function(err, fd) {
          if (err) {
            that.destroy();
            that.emit("error", err);
          } else {
            that.fd = fd;
            that.emit("open", fd);
          }
        });
      }
      function createReadStream(path, options) {
        return new fs2.ReadStream(path, options);
      }
      function createWriteStream(path, options) {
        return new fs2.WriteStream(path, options);
      }
      var fs$open = fs2.open;
      fs2.open = open;
      function open(path, flags, mode, cb) {
        if (typeof mode === "function")
          cb = mode, mode = null;
        return go$open(path, flags, mode, cb);
        function go$open(path2, flags2, mode2, cb2, startTime) {
          return fs$open(path2, flags2, mode2, function(err, fd) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$open, [path2, flags2, mode2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      return fs2;
    }
    function enqueue(elem) {
      debug("ENQUEUE", elem[0].name, elem[1]);
      fs[gracefulQueue].push(elem);
      retry();
    }
    var retryTimer;
    function resetQueue() {
      var now = Date.now();
      for (var i = 0; i < fs[gracefulQueue].length; ++i) {
        if (fs[gracefulQueue][i].length > 2) {
          fs[gracefulQueue][i][3] = now;
          fs[gracefulQueue][i][4] = now;
        }
      }
      retry();
    }
    function retry() {
      clearTimeout(retryTimer);
      retryTimer = void 0;
      if (fs[gracefulQueue].length === 0)
        return;
      var elem = fs[gracefulQueue].shift();
      var fn = elem[0];
      var args = elem[1];
      var err = elem[2];
      var startTime = elem[3];
      var lastTime = elem[4];
      if (startTime === void 0) {
        debug("RETRY", fn.name, args);
        fn.apply(null, args);
      } else if (Date.now() - startTime >= 6e4) {
        debug("TIMEOUT", fn.name, args);
        var cb = args.pop();
        if (typeof cb === "function")
          cb.call(null, err);
      } else {
        var sinceAttempt = Date.now() - lastTime;
        var sinceStart = Math.max(lastTime - startTime, 1);
        var desiredDelay = Math.min(sinceStart * 1.2, 100);
        if (sinceAttempt >= desiredDelay) {
          debug("RETRY", fn.name, args);
          fn.apply(null, args.concat([startTime]));
        } else {
          fs[gracefulQueue].push(elem);
        }
      }
      if (retryTimer === void 0) {
        retryTimer = setTimeout(retry, 0);
      }
    }
  }
});

// node_modules/semver/semver.js
var require_semver = __commonJS({
  "node_modules/semver/semver.js"(exports, module) {
    exports = module.exports = SemVer;
    var debug;
    if (typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
      debug = function() {
        var args = Array.prototype.slice.call(arguments, 0);
        args.unshift("SEMVER");
        console.log.apply(console, args);
      };
    } else {
      debug = function() {
      };
    }
    exports.SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
    9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
    var re = exports.re = [];
    var safeRe = exports.safeRe = [];
    var src = exports.src = [];
    var t2 = exports.tokens = {};
    var R = 0;
    function tok(n) {
      t2[n] = R++;
    }
    var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    var safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ];
    function makeSafeRe(value) {
      for (var i2 = 0; i2 < safeRegexReplacements.length; i2++) {
        var token = safeRegexReplacements[i2][0];
        var max = safeRegexReplacements[i2][1];
        value = value.split(token + "*").join(token + "{0," + max + "}").split(token + "+").join(token + "{1," + max + "}");
      }
      return value;
    }
    tok("NUMERICIDENTIFIER");
    src[t2.NUMERICIDENTIFIER] = "0|[1-9]\\d*";
    tok("NUMERICIDENTIFIERLOOSE");
    src[t2.NUMERICIDENTIFIERLOOSE] = "\\d+";
    tok("NONNUMERICIDENTIFIER");
    src[t2.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-]" + LETTERDASHNUMBER + "*";
    tok("MAINVERSION");
    src[t2.MAINVERSION] = "(" + src[t2.NUMERICIDENTIFIER] + ")\\.(" + src[t2.NUMERICIDENTIFIER] + ")\\.(" + src[t2.NUMERICIDENTIFIER] + ")";
    tok("MAINVERSIONLOOSE");
    src[t2.MAINVERSIONLOOSE] = "(" + src[t2.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t2.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t2.NUMERICIDENTIFIERLOOSE] + ")";
    tok("PRERELEASEIDENTIFIER");
    src[t2.PRERELEASEIDENTIFIER] = "(?:" + src[t2.NUMERICIDENTIFIER] + "|" + src[t2.NONNUMERICIDENTIFIER] + ")";
    tok("PRERELEASEIDENTIFIERLOOSE");
    src[t2.PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[t2.NUMERICIDENTIFIERLOOSE] + "|" + src[t2.NONNUMERICIDENTIFIER] + ")";
    tok("PRERELEASE");
    src[t2.PRERELEASE] = "(?:-(" + src[t2.PRERELEASEIDENTIFIER] + "(?:\\." + src[t2.PRERELEASEIDENTIFIER] + ")*))";
    tok("PRERELEASELOOSE");
    src[t2.PRERELEASELOOSE] = "(?:-?(" + src[t2.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[t2.PRERELEASEIDENTIFIERLOOSE] + ")*))";
    tok("BUILDIDENTIFIER");
    src[t2.BUILDIDENTIFIER] = LETTERDASHNUMBER + "+";
    tok("BUILD");
    src[t2.BUILD] = "(?:\\+(" + src[t2.BUILDIDENTIFIER] + "(?:\\." + src[t2.BUILDIDENTIFIER] + ")*))";
    tok("FULL");
    tok("FULLPLAIN");
    src[t2.FULLPLAIN] = "v?" + src[t2.MAINVERSION] + src[t2.PRERELEASE] + "?" + src[t2.BUILD] + "?";
    src[t2.FULL] = "^" + src[t2.FULLPLAIN] + "$";
    tok("LOOSEPLAIN");
    src[t2.LOOSEPLAIN] = "[v=\\s]*" + src[t2.MAINVERSIONLOOSE] + src[t2.PRERELEASELOOSE] + "?" + src[t2.BUILD] + "?";
    tok("LOOSE");
    src[t2.LOOSE] = "^" + src[t2.LOOSEPLAIN] + "$";
    tok("GTLT");
    src[t2.GTLT] = "((?:<|>)?=?)";
    tok("XRANGEIDENTIFIERLOOSE");
    src[t2.XRANGEIDENTIFIERLOOSE] = src[t2.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
    tok("XRANGEIDENTIFIER");
    src[t2.XRANGEIDENTIFIER] = src[t2.NUMERICIDENTIFIER] + "|x|X|\\*";
    tok("XRANGEPLAIN");
    src[t2.XRANGEPLAIN] = "[v=\\s]*(" + src[t2.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIER] + ")(?:" + src[t2.PRERELEASE] + ")?" + src[t2.BUILD] + "?)?)?";
    tok("XRANGEPLAINLOOSE");
    src[t2.XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[t2.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t2.XRANGEIDENTIFIERLOOSE] + ")(?:" + src[t2.PRERELEASELOOSE] + ")?" + src[t2.BUILD] + "?)?)?";
    tok("XRANGE");
    src[t2.XRANGE] = "^" + src[t2.GTLT] + "\\s*" + src[t2.XRANGEPLAIN] + "$";
    tok("XRANGELOOSE");
    src[t2.XRANGELOOSE] = "^" + src[t2.GTLT] + "\\s*" + src[t2.XRANGEPLAINLOOSE] + "$";
    tok("COERCE");
    src[t2.COERCE] = "(^|[^\\d])(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "})(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:$|[^\\d])";
    tok("COERCERTL");
    re[t2.COERCERTL] = new RegExp(src[t2.COERCE], "g");
    safeRe[t2.COERCERTL] = new RegExp(makeSafeRe(src[t2.COERCE]), "g");
    tok("LONETILDE");
    src[t2.LONETILDE] = "(?:~>?)";
    tok("TILDETRIM");
    src[t2.TILDETRIM] = "(\\s*)" + src[t2.LONETILDE] + "\\s+";
    re[t2.TILDETRIM] = new RegExp(src[t2.TILDETRIM], "g");
    safeRe[t2.TILDETRIM] = new RegExp(makeSafeRe(src[t2.TILDETRIM]), "g");
    var tildeTrimReplace = "$1~";
    tok("TILDE");
    src[t2.TILDE] = "^" + src[t2.LONETILDE] + src[t2.XRANGEPLAIN] + "$";
    tok("TILDELOOSE");
    src[t2.TILDELOOSE] = "^" + src[t2.LONETILDE] + src[t2.XRANGEPLAINLOOSE] + "$";
    tok("LONECARET");
    src[t2.LONECARET] = "(?:\\^)";
    tok("CARETTRIM");
    src[t2.CARETTRIM] = "(\\s*)" + src[t2.LONECARET] + "\\s+";
    re[t2.CARETTRIM] = new RegExp(src[t2.CARETTRIM], "g");
    safeRe[t2.CARETTRIM] = new RegExp(makeSafeRe(src[t2.CARETTRIM]), "g");
    var caretTrimReplace = "$1^";
    tok("CARET");
    src[t2.CARET] = "^" + src[t2.LONECARET] + src[t2.XRANGEPLAIN] + "$";
    tok("CARETLOOSE");
    src[t2.CARETLOOSE] = "^" + src[t2.LONECARET] + src[t2.XRANGEPLAINLOOSE] + "$";
    tok("COMPARATORLOOSE");
    src[t2.COMPARATORLOOSE] = "^" + src[t2.GTLT] + "\\s*(" + src[t2.LOOSEPLAIN] + ")$|^$";
    tok("COMPARATOR");
    src[t2.COMPARATOR] = "^" + src[t2.GTLT] + "\\s*(" + src[t2.FULLPLAIN] + ")$|^$";
    tok("COMPARATORTRIM");
    src[t2.COMPARATORTRIM] = "(\\s*)" + src[t2.GTLT] + "\\s*(" + src[t2.LOOSEPLAIN] + "|" + src[t2.XRANGEPLAIN] + ")";
    re[t2.COMPARATORTRIM] = new RegExp(src[t2.COMPARATORTRIM], "g");
    safeRe[t2.COMPARATORTRIM] = new RegExp(makeSafeRe(src[t2.COMPARATORTRIM]), "g");
    var comparatorTrimReplace = "$1$2$3";
    tok("HYPHENRANGE");
    src[t2.HYPHENRANGE] = "^\\s*(" + src[t2.XRANGEPLAIN] + ")\\s+-\\s+(" + src[t2.XRANGEPLAIN] + ")\\s*$";
    tok("HYPHENRANGELOOSE");
    src[t2.HYPHENRANGELOOSE] = "^\\s*(" + src[t2.XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[t2.XRANGEPLAINLOOSE] + ")\\s*$";
    tok("STAR");
    src[t2.STAR] = "(<|>)?=?\\s*\\*";
    for (i = 0; i < R; i++) {
      debug(i, src[i]);
      if (!re[i]) {
        re[i] = new RegExp(src[i]);
        safeRe[i] = new RegExp(makeSafeRe(src[i]));
      }
    }
    var i;
    exports.parse = parse;
    function parse(version, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version !== "string") {
        return null;
      }
      if (version.length > MAX_LENGTH) {
        return null;
      }
      var r = options.loose ? safeRe[t2.LOOSE] : safeRe[t2.FULL];
      if (!r.test(version)) {
        return null;
      }
      try {
        return new SemVer(version, options);
      } catch (er) {
        return null;
      }
    }
    exports.valid = valid;
    function valid(version, options) {
      var v = parse(version, options);
      return v ? v.version : null;
    }
    exports.clean = clean;
    function clean(version, options) {
      var s = parse(version.trim().replace(/^[=v]+/, ""), options);
      return s ? s.version : null;
    }
    exports.SemVer = SemVer;
    function SemVer(version, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (version instanceof SemVer) {
        if (version.loose === options.loose) {
          return version;
        } else {
          version = version.version;
        }
      } else if (typeof version !== "string") {
        throw new TypeError("Invalid Version: " + version);
      }
      if (version.length > MAX_LENGTH) {
        throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
      }
      if (!(this instanceof SemVer)) {
        return new SemVer(version, options);
      }
      debug("SemVer", version, options);
      this.options = options;
      this.loose = !!options.loose;
      var m = version.trim().match(options.loose ? safeRe[t2.LOOSE] : safeRe[t2.FULL]);
      if (!m) {
        throw new TypeError("Invalid Version: " + version);
      }
      this.raw = version;
      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];
      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError("Invalid major version");
      }
      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError("Invalid minor version");
      }
      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError("Invalid patch version");
      }
      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split(".").map(function(id) {
          if (/^[0-9]+$/.test(id)) {
            var num = +id;
            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num;
            }
          }
          return id;
        });
      }
      this.build = m[5] ? m[5].split(".") : [];
      this.format();
    }
    SemVer.prototype.format = function() {
      this.version = this.major + "." + this.minor + "." + this.patch;
      if (this.prerelease.length) {
        this.version += "-" + this.prerelease.join(".");
      }
      return this.version;
    };
    SemVer.prototype.toString = function() {
      return this.version;
    };
    SemVer.prototype.compare = function(other) {
      debug("SemVer.compare", this.version, this.options, other);
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return this.compareMain(other) || this.comparePre(other);
    };
    SemVer.prototype.compareMain = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    };
    SemVer.prototype.comparePre = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }
      var i2 = 0;
      do {
        var a = this.prerelease[i2];
        var b = other.prerelease[i2];
        debug("prerelease compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i2);
    };
    SemVer.prototype.compareBuild = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      var i2 = 0;
      do {
        var a = this.build[i2];
        var b = other.build[i2];
        debug("prerelease compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i2);
    };
    SemVer.prototype.inc = function(release, identifier) {
      switch (release) {
        case "premajor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc("pre", identifier);
          break;
        case "preminor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc("pre", identifier);
          break;
        case "prepatch":
          this.prerelease.length = 0;
          this.inc("patch", identifier);
          this.inc("pre", identifier);
          break;
        case "prerelease":
          if (this.prerelease.length === 0) {
            this.inc("patch", identifier);
          }
          this.inc("pre", identifier);
          break;
        case "major":
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }
          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;
        case "minor":
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }
          this.patch = 0;
          this.prerelease = [];
          break;
        case "patch":
          if (this.prerelease.length === 0) {
            this.patch++;
          }
          this.prerelease = [];
          break;
        case "pre":
          if (this.prerelease.length === 0) {
            this.prerelease = [0];
          } else {
            var i2 = this.prerelease.length;
            while (--i2 >= 0) {
              if (typeof this.prerelease[i2] === "number") {
                this.prerelease[i2]++;
                i2 = -2;
              }
            }
            if (i2 === -1) {
              this.prerelease.push(0);
            }
          }
          if (identifier) {
            if (this.prerelease[0] === identifier) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = [identifier, 0];
              }
            } else {
              this.prerelease = [identifier, 0];
            }
          }
          break;
        default:
          throw new Error("invalid increment argument: " + release);
      }
      this.format();
      this.raw = this.version;
      return this;
    };
    exports.inc = inc;
    function inc(version, release, loose, identifier) {
      if (typeof loose === "string") {
        identifier = loose;
        loose = void 0;
      }
      try {
        return new SemVer(version, loose).inc(release, identifier).version;
      } catch (er) {
        return null;
      }
    }
    exports.diff = diff;
    function diff(version1, version2) {
      if (eq(version1, version2)) {
        return null;
      } else {
        var v1 = parse(version1);
        var v2 = parse(version2);
        var prefix = "";
        if (v1.prerelease.length || v2.prerelease.length) {
          prefix = "pre";
          var defaultResult = "prerelease";
        }
        for (var key in v1) {
          if (key === "major" || key === "minor" || key === "patch") {
            if (v1[key] !== v2[key]) {
              return prefix + key;
            }
          }
        }
        return defaultResult;
      }
    }
    exports.compareIdentifiers = compareIdentifiers;
    var numeric = /^[0-9]+$/;
    function compareIdentifiers(a, b) {
      var anum = numeric.test(a);
      var bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    }
    exports.rcompareIdentifiers = rcompareIdentifiers;
    function rcompareIdentifiers(a, b) {
      return compareIdentifiers(b, a);
    }
    exports.major = major;
    function major(a, loose) {
      return new SemVer(a, loose).major;
    }
    exports.minor = minor;
    function minor(a, loose) {
      return new SemVer(a, loose).minor;
    }
    exports.patch = patch;
    function patch(a, loose) {
      return new SemVer(a, loose).patch;
    }
    exports.compare = compare;
    function compare(a, b, loose) {
      return new SemVer(a, loose).compare(new SemVer(b, loose));
    }
    exports.compareLoose = compareLoose;
    function compareLoose(a, b) {
      return compare(a, b, true);
    }
    exports.compareBuild = compareBuild;
    function compareBuild(a, b, loose) {
      var versionA = new SemVer(a, loose);
      var versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    }
    exports.rcompare = rcompare;
    function rcompare(a, b, loose) {
      return compare(b, a, loose);
    }
    exports.sort = sort;
    function sort(list, loose) {
      return list.sort(function(a, b) {
        return exports.compareBuild(a, b, loose);
      });
    }
    exports.rsort = rsort;
    function rsort(list, loose) {
      return list.sort(function(a, b) {
        return exports.compareBuild(b, a, loose);
      });
    }
    exports.gt = gt;
    function gt(a, b, loose) {
      return compare(a, b, loose) > 0;
    }
    exports.lt = lt;
    function lt(a, b, loose) {
      return compare(a, b, loose) < 0;
    }
    exports.eq = eq;
    function eq(a, b, loose) {
      return compare(a, b, loose) === 0;
    }
    exports.neq = neq;
    function neq(a, b, loose) {
      return compare(a, b, loose) !== 0;
    }
    exports.gte = gte;
    function gte(a, b, loose) {
      return compare(a, b, loose) >= 0;
    }
    exports.lte = lte;
    function lte(a, b, loose) {
      return compare(a, b, loose) <= 0;
    }
    exports.cmp = cmp;
    function cmp(a, op, b, loose) {
      switch (op) {
        case "===":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a === b;
        case "!==":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError("Invalid operator: " + op);
      }
    }
    exports.Comparator = Comparator;
    function Comparator(comp, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp;
        } else {
          comp = comp.value;
        }
      }
      if (!(this instanceof Comparator)) {
        return new Comparator(comp, options);
      }
      comp = comp.trim().split(/\s+/).join(" ");
      debug("comparator", comp, options);
      this.options = options;
      this.loose = !!options.loose;
      this.parse(comp);
      if (this.semver === ANY) {
        this.value = "";
      } else {
        this.value = this.operator + this.semver.version;
      }
      debug("comp", this);
    }
    var ANY = {};
    Comparator.prototype.parse = function(comp) {
      var r = this.options.loose ? safeRe[t2.COMPARATORLOOSE] : safeRe[t2.COMPARATOR];
      var m = comp.match(r);
      if (!m) {
        throw new TypeError("Invalid comparator: " + comp);
      }
      this.operator = m[1] !== void 0 ? m[1] : "";
      if (this.operator === "=") {
        this.operator = "";
      }
      if (!m[2]) {
        this.semver = ANY;
      } else {
        this.semver = new SemVer(m[2], this.options.loose);
      }
    };
    Comparator.prototype.toString = function() {
      return this.value;
    };
    Comparator.prototype.test = function(version) {
      debug("Comparator.test", version, this.options.loose);
      if (this.semver === ANY || version === ANY) {
        return true;
      }
      if (typeof version === "string") {
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return false;
        }
      }
      return cmp(version, this.operator, this.semver, this.options);
    };
    Comparator.prototype.intersects = function(comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError("a Comparator is required");
      }
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      var rangeTmp;
      if (this.operator === "") {
        if (this.value === "") {
          return true;
        }
        rangeTmp = new Range(comp.value, options);
        return satisfies(this.value, rangeTmp, options);
      } else if (comp.operator === "") {
        if (comp.value === "") {
          return true;
        }
        rangeTmp = new Range(this.value, options);
        return satisfies(comp.semver, rangeTmp, options);
      }
      var sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
      var sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
      var sameSemVer = this.semver.version === comp.semver.version;
      var differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
      var oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && ((this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<"));
      var oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ((this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">"));
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    };
    exports.Range = Range;
    function Range(range, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (range instanceof Range) {
        if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
          return range;
        } else {
          return new Range(range.raw, options);
        }
      }
      if (range instanceof Comparator) {
        return new Range(range.value, options);
      }
      if (!(this instanceof Range)) {
        return new Range(range, options);
      }
      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;
      this.raw = range.trim().split(/\s+/).join(" ");
      this.set = this.raw.split("||").map(function(range2) {
        return this.parseRange(range2.trim());
      }, this).filter(function(c) {
        return c.length;
      });
      if (!this.set.length) {
        throw new TypeError("Invalid SemVer Range: " + this.raw);
      }
      this.format();
    }
    Range.prototype.format = function() {
      this.range = this.set.map(function(comps) {
        return comps.join(" ").trim();
      }).join("||").trim();
      return this.range;
    };
    Range.prototype.toString = function() {
      return this.range;
    };
    Range.prototype.parseRange = function(range) {
      var loose = this.options.loose;
      var hr = loose ? safeRe[t2.HYPHENRANGELOOSE] : safeRe[t2.HYPHENRANGE];
      range = range.replace(hr, hyphenReplace);
      debug("hyphen replace", range);
      range = range.replace(safeRe[t2.COMPARATORTRIM], comparatorTrimReplace);
      debug("comparator trim", range, safeRe[t2.COMPARATORTRIM]);
      range = range.replace(safeRe[t2.TILDETRIM], tildeTrimReplace);
      range = range.replace(safeRe[t2.CARETTRIM], caretTrimReplace);
      range = range.split(/\s+/).join(" ");
      var compRe = loose ? safeRe[t2.COMPARATORLOOSE] : safeRe[t2.COMPARATOR];
      var set = range.split(" ").map(function(comp) {
        return parseComparator(comp, this.options);
      }, this).join(" ").split(/\s+/);
      if (this.options.loose) {
        set = set.filter(function(comp) {
          return !!comp.match(compRe);
        });
      }
      set = set.map(function(comp) {
        return new Comparator(comp, this.options);
      }, this);
      return set;
    };
    Range.prototype.intersects = function(range, options) {
      if (!(range instanceof Range)) {
        throw new TypeError("a Range is required");
      }
      return this.set.some(function(thisComparators) {
        return isSatisfiable(thisComparators, options) && range.set.some(function(rangeComparators) {
          return isSatisfiable(rangeComparators, options) && thisComparators.every(function(thisComparator) {
            return rangeComparators.every(function(rangeComparator) {
              return thisComparator.intersects(rangeComparator, options);
            });
          });
        });
      });
    };
    function isSatisfiable(comparators, options) {
      var result = true;
      var remainingComparators = comparators.slice();
      var testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every(function(otherComparator) {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    }
    exports.toComparators = toComparators;
    function toComparators(range, options) {
      return new Range(range, options).set.map(function(comp) {
        return comp.map(function(c) {
          return c.value;
        }).join(" ").trim().split(" ");
      });
    }
    function parseComparator(comp, options) {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    }
    function isX(id) {
      return !id || id.toLowerCase() === "x" || id === "*";
    }
    function replaceTildes(comp, options) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceTilde(comp2, options);
      }).join(" ");
    }
    function replaceTilde(comp, options) {
      var r = options.loose ? safeRe[t2.TILDELOOSE] : safeRe[t2.TILDE];
      return comp.replace(r, function(_, M, m, p, pr) {
        debug("tilde", comp, _, M, m, p, pr);
        var ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (isX(p)) {
          ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
        } else {
          ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
        }
        debug("tilde return", ret);
        return ret;
      });
    }
    function replaceCarets(comp, options) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceCaret(comp2, options);
      }).join(" ");
    }
    function replaceCaret(comp, options) {
      debug("caret", comp, options);
      var r = options.loose ? safeRe[t2.CARETLOOSE] : safeRe[t2.CARET];
      return comp.replace(r, function(_, M, m, p, pr) {
        debug("caret", comp, _, M, m, p, pr);
        var ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (isX(p)) {
          if (M === "0") {
            ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
          } else {
            ret = ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0";
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + m + "." + (+p + 1);
            } else {
              ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
            }
          } else {
            ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0";
          }
        } else {
          debug("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = ">=" + M + "." + m + "." + p + " <" + M + "." + m + "." + (+p + 1);
            } else {
              ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
            }
          } else {
            ret = ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0";
          }
        }
        debug("caret return", ret);
        return ret;
      });
    }
    function replaceXRanges(comp, options) {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map(function(comp2) {
        return replaceXRange(comp2, options);
      }).join(" ");
    }
    function replaceXRange(comp, options) {
      comp = comp.trim();
      var r = options.loose ? safeRe[t2.XRANGELOOSE] : safeRe[t2.XRANGE];
      return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        var xM = isX(M);
        var xm = xM || isX(m);
        var xp = xm || isX(p);
        var anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          ret = gtlt + M + "." + m + "." + p + pr;
        } else if (xm) {
          ret = ">=" + M + ".0.0" + pr + " <" + (+M + 1) + ".0.0" + pr;
        } else if (xp) {
          ret = ">=" + M + "." + m + ".0" + pr + " <" + M + "." + (+m + 1) + ".0" + pr;
        }
        debug("xRange return", ret);
        return ret;
      });
    }
    function replaceStars(comp, options) {
      debug("replaceStars", comp, options);
      return comp.trim().replace(safeRe[t2.STAR], "");
    }
    function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = ">=" + fM + ".0.0";
      } else if (isX(fp)) {
        from = ">=" + fM + "." + fm + ".0";
      } else {
        from = ">=" + from;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = "<" + (+tM + 1) + ".0.0";
      } else if (isX(tp)) {
        to = "<" + tM + "." + (+tm + 1) + ".0";
      } else if (tpr) {
        to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
      } else {
        to = "<=" + to;
      }
      return (from + " " + to).trim();
    }
    Range.prototype.test = function(version) {
      if (!version) {
        return false;
      }
      if (typeof version === "string") {
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return false;
        }
      }
      for (var i2 = 0; i2 < this.set.length; i2++) {
        if (testSet(this.set[i2], version, this.options)) {
          return true;
        }
      }
      return false;
    };
    function testSet(set, version, options) {
      for (var i2 = 0; i2 < set.length; i2++) {
        if (!set[i2].test(version)) {
          return false;
        }
      }
      if (version.prerelease.length && !options.includePrerelease) {
        for (i2 = 0; i2 < set.length; i2++) {
          debug(set[i2].semver);
          if (set[i2].semver === ANY) {
            continue;
          }
          if (set[i2].semver.prerelease.length > 0) {
            var allowed = set[i2].semver;
            if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    }
    exports.satisfies = satisfies;
    function satisfies(version, range, options) {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version);
    }
    exports.maxSatisfying = maxSatisfying;
    function maxSatisfying(versions, range, options) {
      var max = null;
      var maxSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    }
    exports.minSatisfying = minSatisfying;
    function minSatisfying(versions, range, options) {
      var min = null;
      var minSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    }
    exports.minVersion = minVersion;
    function minVersion(range, loose) {
      range = new Range(range, loose);
      var minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        comparators.forEach(function(comparator) {
          var compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case "":
            case ">=":
              if (!minver || gt(minver, compver)) {
                minver = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            default:
              throw new Error("Unexpected operation: " + comparator.operator);
          }
        });
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    }
    exports.validRange = validRange;
    function validRange(range, options) {
      try {
        return new Range(range, options).range || "*";
      } catch (er) {
        return null;
      }
    }
    exports.ltr = ltr;
    function ltr(version, range, options) {
      return outside(version, range, "<", options);
    }
    exports.gtr = gtr;
    function gtr(version, range, options) {
      return outside(version, range, ">", options);
    }
    exports.outside = outside;
    function outside(version, range, hilo, options) {
      version = new SemVer(version, options);
      range = new Range(range, options);
      var gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version, range, options)) {
        return false;
      }
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        var high = null;
        var low = null;
        comparators.forEach(function(comparator) {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false;
        }
      }
      return true;
    }
    exports.prerelease = prerelease;
    function prerelease(version, options) {
      var parsed = parse(version, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    }
    exports.intersects = intersects;
    function intersects(r1, r2, options) {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2);
    }
    exports.coerce = coerce;
    function coerce(version, options) {
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version === "number") {
        version = String(version);
      }
      if (typeof version !== "string") {
        return null;
      }
      options = options || {};
      var match = null;
      if (!options.rtl) {
        match = version.match(safeRe[t2.COERCE]);
      } else {
        var next;
        while ((next = safeRe[t2.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          safeRe[t2.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
        }
        safeRe[t2.COERCERTL].lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      return parse(match[2] + "." + (match[3] || "0") + "." + (match[4] || "0"), options);
    }
  }
});

// node_modules/make-dir/index.js
var require_make_dir = __commonJS({
  "node_modules/make-dir/index.js"(exports, module) {
    "use strict";
    var fs = require_fs();
    var path = require_path();
    var { promisify } = require_util();
    var semver = require_semver();
    var useNativeRecursiveOption = semver.satisfies(process.version, ">=10.12.0");
    var checkPath = (pth) => {
      if (process.platform === "win32") {
        const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(pth.replace(path.parse(pth).root, ""));
        if (pathHasInvalidWinCharacters) {
          const error = new Error(`Path contains invalid characters: ${pth}`);
          error.code = "EINVAL";
          throw error;
        }
      }
    };
    var processOptions = (options) => {
      const defaults = {
        mode: 511,
        fs
      };
      return {
        ...defaults,
        ...options
      };
    };
    var permissionError = (pth) => {
      const error = new Error(`operation not permitted, mkdir '${pth}'`);
      error.code = "EPERM";
      error.errno = -4048;
      error.path = pth;
      error.syscall = "mkdir";
      return error;
    };
    var makeDir = async (input, options) => {
      checkPath(input);
      options = processOptions(options);
      const mkdir = promisify(options.fs.mkdir);
      const stat = promisify(options.fs.stat);
      if (useNativeRecursiveOption && options.fs.mkdir === fs.mkdir) {
        const pth = path.resolve(input);
        await mkdir(pth, {
          mode: options.mode,
          recursive: true
        });
        return pth;
      }
      const make = async (pth) => {
        try {
          await mkdir(pth, options.mode);
          return pth;
        } catch (error) {
          if (error.code === "EPERM") {
            throw error;
          }
          if (error.code === "ENOENT") {
            if (path.dirname(pth) === pth) {
              throw permissionError(pth);
            }
            if (error.message.includes("null bytes")) {
              throw error;
            }
            await make(path.dirname(pth));
            return make(pth);
          }
          try {
            const stats = await stat(pth);
            if (!stats.isDirectory()) {
              throw new Error("The path is not a directory");
            }
          } catch (_) {
            throw error;
          }
          return pth;
        }
      };
      return make(path.resolve(input));
    };
    module.exports = makeDir;
    module.exports.sync = (input, options) => {
      checkPath(input);
      options = processOptions(options);
      if (useNativeRecursiveOption && options.fs.mkdirSync === fs.mkdirSync) {
        const pth = path.resolve(input);
        fs.mkdirSync(pth, {
          mode: options.mode,
          recursive: true
        });
        return pth;
      }
      const make = (pth) => {
        try {
          options.fs.mkdirSync(pth, options.mode);
        } catch (error) {
          if (error.code === "EPERM") {
            throw error;
          }
          if (error.code === "ENOENT") {
            if (path.dirname(pth) === pth) {
              throw permissionError(pth);
            }
            if (error.message.includes("null bytes")) {
              throw error;
            }
            make(path.dirname(pth));
            return make(pth);
          }
          try {
            if (!options.fs.statSync(pth).isDirectory()) {
              throw new Error("The path is not a directory");
            }
          } catch (_) {
            throw error;
          }
        }
        return pth;
      };
      return make(path.resolve(input));
    };
  }
});

// node_modules/xdg-basedir/index.js
var require_xdg_basedir = __commonJS({
  "node_modules/xdg-basedir/index.js"(exports) {
    "use strict";
    var os = require_os();
    var path = require_path();
    var homeDirectory = os.homedir();
    var { env } = process;
    exports.data = env.XDG_DATA_HOME || (homeDirectory ? path.join(homeDirectory, ".local", "share") : void 0);
    exports.config = env.XDG_CONFIG_HOME || (homeDirectory ? path.join(homeDirectory, ".config") : void 0);
    exports.cache = env.XDG_CACHE_HOME || (homeDirectory ? path.join(homeDirectory, ".cache") : void 0);
    exports.runtime = env.XDG_RUNTIME_DIR || void 0;
    exports.dataDirs = (env.XDG_DATA_DIRS || "/usr/local/share/:/usr/share/").split(":");
    if (exports.data) {
      exports.dataDirs.unshift(exports.data);
    }
    exports.configDirs = (env.XDG_CONFIG_DIRS || "/etc/xdg").split(":");
    if (exports.config) {
      exports.configDirs.unshift(exports.config);
    }
  }
});

// node_modules/imurmurhash/imurmurhash.js
var require_imurmurhash = __commonJS({
  "node_modules/imurmurhash/imurmurhash.js"(exports, module) {
    (function() {
      var cache;
      function MurmurHash3(key, seed) {
        var m = this instanceof MurmurHash3 ? this : cache;
        m.reset(seed);
        if (typeof key === "string" && key.length > 0) {
          m.hash(key);
        }
        if (m !== this) {
          return m;
        }
      }
      ;
      MurmurHash3.prototype.hash = function(key) {
        var h1, k1, i, top, len;
        len = key.length;
        this.len += len;
        k1 = this.k1;
        i = 0;
        switch (this.rem) {
          case 0:
            k1 ^= len > i ? key.charCodeAt(i++) & 65535 : 0;
          case 1:
            k1 ^= len > i ? (key.charCodeAt(i++) & 65535) << 8 : 0;
          case 2:
            k1 ^= len > i ? (key.charCodeAt(i++) & 65535) << 16 : 0;
          case 3:
            k1 ^= len > i ? (key.charCodeAt(i) & 255) << 24 : 0;
            k1 ^= len > i ? (key.charCodeAt(i++) & 65280) >> 8 : 0;
        }
        this.rem = len + this.rem & 3;
        len -= this.rem;
        if (len > 0) {
          h1 = this.h1;
          while (1) {
            k1 = k1 * 11601 + (k1 & 65535) * 3432906752 & 4294967295;
            k1 = k1 << 15 | k1 >>> 17;
            k1 = k1 * 13715 + (k1 & 65535) * 461832192 & 4294967295;
            h1 ^= k1;
            h1 = h1 << 13 | h1 >>> 19;
            h1 = h1 * 5 + 3864292196 & 4294967295;
            if (i >= len) {
              break;
            }
            k1 = key.charCodeAt(i++) & 65535 ^ (key.charCodeAt(i++) & 65535) << 8 ^ (key.charCodeAt(i++) & 65535) << 16;
            top = key.charCodeAt(i++);
            k1 ^= (top & 255) << 24 ^ (top & 65280) >> 8;
          }
          k1 = 0;
          switch (this.rem) {
            case 3:
              k1 ^= (key.charCodeAt(i + 2) & 65535) << 16;
            case 2:
              k1 ^= (key.charCodeAt(i + 1) & 65535) << 8;
            case 1:
              k1 ^= key.charCodeAt(i) & 65535;
          }
          this.h1 = h1;
        }
        this.k1 = k1;
        return this;
      };
      MurmurHash3.prototype.result = function() {
        var k1, h1;
        k1 = this.k1;
        h1 = this.h1;
        if (k1 > 0) {
          k1 = k1 * 11601 + (k1 & 65535) * 3432906752 & 4294967295;
          k1 = k1 << 15 | k1 >>> 17;
          k1 = k1 * 13715 + (k1 & 65535) * 461832192 & 4294967295;
          h1 ^= k1;
        }
        h1 ^= this.len;
        h1 ^= h1 >>> 16;
        h1 = h1 * 51819 + (h1 & 65535) * 2246770688 & 4294967295;
        h1 ^= h1 >>> 13;
        h1 = h1 * 44597 + (h1 & 65535) * 3266445312 & 4294967295;
        h1 ^= h1 >>> 16;
        return h1 >>> 0;
      };
      MurmurHash3.prototype.reset = function(seed) {
        this.h1 = typeof seed === "number" ? seed : 0;
        this.rem = this.k1 = this.len = 0;
        return this;
      };
      cache = new MurmurHash3();
      if (typeof module != "undefined") {
        module.exports = MurmurHash3;
      } else {
        this.MurmurHash3 = MurmurHash3;
      }
    })();
  }
});

// node_modules/signal-exit/signals.js
var require_signals = __commonJS({
  "node_modules/signal-exit/signals.js"(exports, module) {
    module.exports = [
      "SIGABRT",
      "SIGALRM",
      "SIGHUP",
      "SIGINT",
      "SIGTERM"
    ];
    if (process.platform !== "win32") {
      module.exports.push(
        "SIGVTALRM",
        "SIGXCPU",
        "SIGXFSZ",
        "SIGUSR2",
        "SIGTRAP",
        "SIGSYS",
        "SIGQUIT",
        "SIGIOT"
        // should detect profiler and enable/disable accordingly.
        // see #21
        // 'SIGPROF'
      );
    }
    if (process.platform === "linux") {
      module.exports.push(
        "SIGIO",
        "SIGPOLL",
        "SIGPWR",
        "SIGSTKFLT",
        "SIGUNUSED"
      );
    }
  }
});

// node_modules/signal-exit/index.js
var require_signal_exit = __commonJS({
  "node_modules/signal-exit/index.js"(exports, module) {
    var process2 = global.process;
    var processOk = function(process3) {
      return process3 && typeof process3 === "object" && typeof process3.removeListener === "function" && typeof process3.emit === "function" && typeof process3.reallyExit === "function" && typeof process3.listeners === "function" && typeof process3.kill === "function" && typeof process3.pid === "number" && typeof process3.on === "function";
    };
    if (!processOk(process2)) {
      module.exports = function() {
        return function() {
        };
      };
    } else {
      assert = require_assert();
      signals = require_signals();
      isWin = /^win/i.test(process2.platform);
      EE = require_events();
      if (typeof EE !== "function") {
        EE = EE.EventEmitter;
      }
      if (process2.__signal_exit_emitter__) {
        emitter = process2.__signal_exit_emitter__;
      } else {
        emitter = process2.__signal_exit_emitter__ = new EE();
        emitter.count = 0;
        emitter.emitted = {};
      }
      if (!emitter.infinite) {
        emitter.setMaxListeners(Infinity);
        emitter.infinite = true;
      }
      module.exports = function(cb, opts) {
        if (!processOk(global.process)) {
          return function() {
          };
        }
        assert.equal(typeof cb, "function", "a callback must be provided for exit handler");
        if (loaded === false) {
          load();
        }
        var ev = "exit";
        if (opts && opts.alwaysLast) {
          ev = "afterexit";
        }
        var remove = function() {
          emitter.removeListener(ev, cb);
          if (emitter.listeners("exit").length === 0 && emitter.listeners("afterexit").length === 0) {
            unload();
          }
        };
        emitter.on(ev, cb);
        return remove;
      };
      unload = function unload2() {
        if (!loaded || !processOk(global.process)) {
          return;
        }
        loaded = false;
        signals.forEach(function(sig) {
          try {
            process2.removeListener(sig, sigListeners[sig]);
          } catch (er) {
          }
        });
        process2.emit = originalProcessEmit;
        process2.reallyExit = originalProcessReallyExit;
        emitter.count -= 1;
      };
      module.exports.unload = unload;
      emit = function emit2(event, code, signal) {
        if (emitter.emitted[event]) {
          return;
        }
        emitter.emitted[event] = true;
        emitter.emit(event, code, signal);
      };
      sigListeners = {};
      signals.forEach(function(sig) {
        sigListeners[sig] = function listener() {
          if (!processOk(global.process)) {
            return;
          }
          var listeners = process2.listeners(sig);
          if (listeners.length === emitter.count) {
            unload();
            emit("exit", null, sig);
            emit("afterexit", null, sig);
            if (isWin && sig === "SIGHUP") {
              sig = "SIGINT";
            }
            process2.kill(process2.pid, sig);
          }
        };
      });
      module.exports.signals = function() {
        return signals;
      };
      loaded = false;
      load = function load2() {
        if (loaded || !processOk(global.process)) {
          return;
        }
        loaded = true;
        emitter.count += 1;
        signals = signals.filter(function(sig) {
          try {
            process2.on(sig, sigListeners[sig]);
            return true;
          } catch (er) {
            return false;
          }
        });
        process2.emit = processEmit;
        process2.reallyExit = processReallyExit;
      };
      module.exports.load = load;
      originalProcessReallyExit = process2.reallyExit;
      processReallyExit = function processReallyExit2(code) {
        if (!processOk(global.process)) {
          return;
        }
        process2.exitCode = code || /* istanbul ignore next */
        0;
        emit("exit", process2.exitCode, null);
        emit("afterexit", process2.exitCode, null);
        originalProcessReallyExit.call(process2, process2.exitCode);
      };
      originalProcessEmit = process2.emit;
      processEmit = function processEmit2(ev, arg) {
        if (ev === "exit" && processOk(global.process)) {
          if (arg !== void 0) {
            process2.exitCode = arg;
          }
          var ret = originalProcessEmit.apply(this, arguments);
          emit("exit", process2.exitCode, null);
          emit("afterexit", process2.exitCode, null);
          return ret;
        } else {
          return originalProcessEmit.apply(this, arguments);
        }
      };
    }
    var assert;
    var signals;
    var isWin;
    var EE;
    var emitter;
    var unload;
    var emit;
    var sigListeners;
    var loaded;
    var load;
    var originalProcessReallyExit;
    var processReallyExit;
    var originalProcessEmit;
    var processEmit;
  }
});

// node_modules/is-typedarray/index.js
var require_is_typedarray = __commonJS({
  "node_modules/is-typedarray/index.js"(exports, module) {
    module.exports = isTypedArray;
    isTypedArray.strict = isStrictTypedArray;
    isTypedArray.loose = isLooseTypedArray;
    var toString = Object.prototype.toString;
    var names = {
      "[object Int8Array]": true,
      "[object Int16Array]": true,
      "[object Int32Array]": true,
      "[object Uint8Array]": true,
      "[object Uint8ClampedArray]": true,
      "[object Uint16Array]": true,
      "[object Uint32Array]": true,
      "[object Float32Array]": true,
      "[object Float64Array]": true
    };
    function isTypedArray(arr) {
      return isStrictTypedArray(arr) || isLooseTypedArray(arr);
    }
    function isStrictTypedArray(arr) {
      return arr instanceof Int8Array || arr instanceof Int16Array || arr instanceof Int32Array || arr instanceof Uint8Array || arr instanceof Uint8ClampedArray || arr instanceof Uint16Array || arr instanceof Uint32Array || arr instanceof Float32Array || arr instanceof Float64Array;
    }
    function isLooseTypedArray(arr) {
      return names[toString.call(arr)];
    }
  }
});

// node_modules/typedarray-to-buffer/index.js
var require_typedarray_to_buffer = __commonJS({
  "node_modules/typedarray-to-buffer/index.js"(exports, module) {
    var isTypedArray = require_is_typedarray().strict;
    module.exports = function typedarrayToBuffer(arr) {
      if (isTypedArray(arr)) {
        var buf = Buffer.from(arr.buffer);
        if (arr.byteLength !== arr.buffer.byteLength) {
          buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength);
        }
        return buf;
      } else {
        return Buffer.from(arr);
      }
    };
  }
});

// browser-external:worker_threads
var require_worker_threads = __commonJS({
  "browser-external:worker_threads"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "worker_threads" has been externalized for browser compatibility. Cannot access "worker_threads.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/write-file-atomic/index.js
var require_write_file_atomic = __commonJS({
  "node_modules/write-file-atomic/index.js"(exports, module) {
    "use strict";
    module.exports = writeFile;
    module.exports.sync = writeFileSync;
    module.exports._getTmpname = getTmpname;
    module.exports._cleanupOnExit = cleanupOnExit;
    var fs = require_fs();
    var MurmurHash3 = require_imurmurhash();
    var onExit = require_signal_exit();
    var path = require_path();
    var isTypedArray = require_is_typedarray();
    var typedArrayToBuffer = require_typedarray_to_buffer();
    var { promisify } = require_util();
    var activeFiles = {};
    var threadId = function getId() {
      try {
        const workerThreads = require_worker_threads();
        return workerThreads.threadId;
      } catch (e) {
        return 0;
      }
    }();
    var invocations = 0;
    function getTmpname(filename) {
      return filename + "." + MurmurHash3(__filename).hash(String(process.pid)).hash(String(threadId)).hash(String(++invocations)).result();
    }
    function cleanupOnExit(tmpfile) {
      return () => {
        try {
          fs.unlinkSync(typeof tmpfile === "function" ? tmpfile() : tmpfile);
        } catch (_) {
        }
      };
    }
    function serializeActiveFile(absoluteName) {
      return new Promise((resolve) => {
        if (!activeFiles[absoluteName])
          activeFiles[absoluteName] = [];
        activeFiles[absoluteName].push(resolve);
        if (activeFiles[absoluteName].length === 1)
          resolve();
      });
    }
    function isChownErrOk(err) {
      if (err.code === "ENOSYS") {
        return true;
      }
      const nonroot = !process.getuid || process.getuid() !== 0;
      if (nonroot) {
        if (err.code === "EINVAL" || err.code === "EPERM") {
          return true;
        }
      }
      return false;
    }
    async function writeFileAsync(filename, data, options = {}) {
      if (typeof options === "string") {
        options = { encoding: options };
      }
      let fd;
      let tmpfile;
      const removeOnExitHandler = onExit(cleanupOnExit(() => tmpfile));
      const absoluteName = path.resolve(filename);
      try {
        await serializeActiveFile(absoluteName);
        const truename = await promisify(fs.realpath)(filename).catch(() => filename);
        tmpfile = getTmpname(truename);
        if (!options.mode || !options.chown) {
          const stats = await promisify(fs.stat)(truename).catch(() => {
          });
          if (stats) {
            if (options.mode == null) {
              options.mode = stats.mode;
            }
            if (options.chown == null && process.getuid) {
              options.chown = { uid: stats.uid, gid: stats.gid };
            }
          }
        }
        fd = await promisify(fs.open)(tmpfile, "w", options.mode);
        if (options.tmpfileCreated) {
          await options.tmpfileCreated(tmpfile);
        }
        if (isTypedArray(data)) {
          data = typedArrayToBuffer(data);
        }
        if (Buffer.isBuffer(data)) {
          await promisify(fs.write)(fd, data, 0, data.length, 0);
        } else if (data != null) {
          await promisify(fs.write)(fd, String(data), 0, String(options.encoding || "utf8"));
        }
        if (options.fsync !== false) {
          await promisify(fs.fsync)(fd);
        }
        await promisify(fs.close)(fd);
        fd = null;
        if (options.chown) {
          await promisify(fs.chown)(tmpfile, options.chown.uid, options.chown.gid).catch((err) => {
            if (!isChownErrOk(err)) {
              throw err;
            }
          });
        }
        if (options.mode) {
          await promisify(fs.chmod)(tmpfile, options.mode).catch((err) => {
            if (!isChownErrOk(err)) {
              throw err;
            }
          });
        }
        await promisify(fs.rename)(tmpfile, truename);
      } finally {
        if (fd) {
          await promisify(fs.close)(fd).catch(
            /* istanbul ignore next */
            () => {
            }
          );
        }
        removeOnExitHandler();
        await promisify(fs.unlink)(tmpfile).catch(() => {
        });
        activeFiles[absoluteName].shift();
        if (activeFiles[absoluteName].length > 0) {
          activeFiles[absoluteName][0]();
        } else
          delete activeFiles[absoluteName];
      }
    }
    function writeFile(filename, data, options, callback) {
      if (options instanceof Function) {
        callback = options;
        options = {};
      }
      const promise = writeFileAsync(filename, data, options);
      if (callback) {
        promise.then(callback, callback);
      }
      return promise;
    }
    function writeFileSync(filename, data, options) {
      if (typeof options === "string")
        options = { encoding: options };
      else if (!options)
        options = {};
      try {
        filename = fs.realpathSync(filename);
      } catch (ex) {
      }
      const tmpfile = getTmpname(filename);
      if (!options.mode || !options.chown) {
        try {
          const stats = fs.statSync(filename);
          options = Object.assign({}, options);
          if (!options.mode) {
            options.mode = stats.mode;
          }
          if (!options.chown && process.getuid) {
            options.chown = { uid: stats.uid, gid: stats.gid };
          }
        } catch (ex) {
        }
      }
      let fd;
      const cleanup = cleanupOnExit(tmpfile);
      const removeOnExitHandler = onExit(cleanup);
      let threw = true;
      try {
        fd = fs.openSync(tmpfile, "w", options.mode || 438);
        if (options.tmpfileCreated) {
          options.tmpfileCreated(tmpfile);
        }
        if (isTypedArray(data)) {
          data = typedArrayToBuffer(data);
        }
        if (Buffer.isBuffer(data)) {
          fs.writeSync(fd, data, 0, data.length, 0);
        } else if (data != null) {
          fs.writeSync(fd, String(data), 0, String(options.encoding || "utf8"));
        }
        if (options.fsync !== false) {
          fs.fsyncSync(fd);
        }
        fs.closeSync(fd);
        fd = null;
        if (options.chown) {
          try {
            fs.chownSync(tmpfile, options.chown.uid, options.chown.gid);
          } catch (err) {
            if (!isChownErrOk(err)) {
              throw err;
            }
          }
        }
        if (options.mode) {
          try {
            fs.chmodSync(tmpfile, options.mode);
          } catch (err) {
            if (!isChownErrOk(err)) {
              throw err;
            }
          }
        }
        fs.renameSync(tmpfile, filename);
        threw = false;
      } finally {
        if (fd) {
          try {
            fs.closeSync(fd);
          } catch (ex) {
          }
        }
        removeOnExitHandler();
        if (threw) {
          cleanup();
        }
      }
    }
  }
});

// node_modules/is-obj/index.js
var require_is_obj = __commonJS({
  "node_modules/is-obj/index.js"(exports, module) {
    "use strict";
    module.exports = (value) => {
      const type = typeof value;
      return value !== null && (type === "object" || type === "function");
    };
  }
});

// node_modules/dot-prop/index.js
var require_dot_prop = __commonJS({
  "node_modules/dot-prop/index.js"(exports, module) {
    "use strict";
    var isObj = require_is_obj();
    var disallowedKeys = [
      "__proto__",
      "prototype",
      "constructor"
    ];
    var isValidPath = (pathSegments) => !pathSegments.some((segment) => disallowedKeys.includes(segment));
    function getPathSegments(path) {
      const pathArray = path.split(".");
      const parts = [];
      for (let i = 0; i < pathArray.length; i++) {
        let p = pathArray[i];
        while (p[p.length - 1] === "\\" && pathArray[i + 1] !== void 0) {
          p = p.slice(0, -1) + ".";
          p += pathArray[++i];
        }
        parts.push(p);
      }
      if (!isValidPath(parts)) {
        return [];
      }
      return parts;
    }
    module.exports = {
      get(object, path, value) {
        if (!isObj(object) || typeof path !== "string") {
          return value === void 0 ? object : value;
        }
        const pathArray = getPathSegments(path);
        if (pathArray.length === 0) {
          return;
        }
        for (let i = 0; i < pathArray.length; i++) {
          if (!Object.prototype.propertyIsEnumerable.call(object, pathArray[i])) {
            return value;
          }
          object = object[pathArray[i]];
          if (object === void 0 || object === null) {
            if (i !== pathArray.length - 1) {
              return value;
            }
            break;
          }
        }
        return object;
      },
      set(object, path, value) {
        if (!isObj(object) || typeof path !== "string") {
          return object;
        }
        const root = object;
        const pathArray = getPathSegments(path);
        for (let i = 0; i < pathArray.length; i++) {
          const p = pathArray[i];
          if (!isObj(object[p])) {
            object[p] = {};
          }
          if (i === pathArray.length - 1) {
            object[p] = value;
          }
          object = object[p];
        }
        return root;
      },
      delete(object, path) {
        if (!isObj(object) || typeof path !== "string") {
          return false;
        }
        const pathArray = getPathSegments(path);
        for (let i = 0; i < pathArray.length; i++) {
          const p = pathArray[i];
          if (i === pathArray.length - 1) {
            delete object[p];
            return true;
          }
          object = object[p];
          if (!isObj(object)) {
            return false;
          }
        }
      },
      has(object, path) {
        if (!isObj(object) || typeof path !== "string") {
          return false;
        }
        const pathArray = getPathSegments(path);
        if (pathArray.length === 0) {
          return false;
        }
        for (let i = 0; i < pathArray.length; i++) {
          if (isObj(object)) {
            if (!(pathArray[i] in object)) {
              return false;
            }
            object = object[pathArray[i]];
          } else {
            return false;
          }
        }
        return true;
      }
    };
  }
});

// node_modules/crypto-random-string/index.js
var require_crypto_random_string = __commonJS({
  "node_modules/crypto-random-string/index.js"(exports, module) {
    "use strict";
    var crypto = require_crypto2();
    module.exports = (length) => {
      if (!Number.isFinite(length)) {
        throw new TypeError("Expected a finite number");
      }
      return crypto.randomBytes(Math.ceil(length / 2)).toString("hex").slice(0, length);
    };
  }
});

// node_modules/unique-string/index.js
var require_unique_string = __commonJS({
  "node_modules/unique-string/index.js"(exports, module) {
    "use strict";
    var cryptoRandomString = require_crypto_random_string();
    module.exports = () => cryptoRandomString(32);
  }
});

// node_modules/configstore/index.js
var require_configstore = __commonJS({
  "node_modules/configstore/index.js"(exports, module) {
    "use strict";
    var path = require_path();
    var os = require_os();
    var fs = require_graceful_fs();
    var makeDir = require_make_dir();
    var xdgBasedir = require_xdg_basedir();
    var writeFileAtomic = require_write_file_atomic();
    var dotProp = require_dot_prop();
    var uniqueString = require_unique_string();
    var configDirectory = xdgBasedir.config || path.join(os.tmpdir(), uniqueString());
    var permissionError = "You don't have access to this file.";
    var makeDirOptions = { mode: 448 };
    var writeFileOptions = { mode: 384 };
    var Configstore = class {
      constructor(id, defaults, options = {}) {
        const pathPrefix = options.globalConfigPath ? path.join(id, "config.json") : path.join("configstore", `${id}.json`);
        this.path = options.configPath || path.join(configDirectory, pathPrefix);
        if (defaults) {
          this.all = {
            ...defaults,
            ...this.all
          };
        }
      }
      get all() {
        try {
          return JSON.parse(fs.readFileSync(this.path, "utf8"));
        } catch (error) {
          if (error.code === "ENOENT") {
            return {};
          }
          if (error.code === "EACCES") {
            error.message = `${error.message}
${permissionError}
`;
          }
          if (error.name === "SyntaxError") {
            writeFileAtomic.sync(this.path, "", writeFileOptions);
            return {};
          }
          throw error;
        }
      }
      set all(value) {
        try {
          makeDir.sync(path.dirname(this.path), makeDirOptions);
          writeFileAtomic.sync(this.path, JSON.stringify(value, void 0, "	"), writeFileOptions);
        } catch (error) {
          if (error.code === "EACCES") {
            error.message = `${error.message}
${permissionError}
`;
          }
          throw error;
        }
      }
      get size() {
        return Object.keys(this.all || {}).length;
      }
      get(key) {
        return dotProp.get(this.all, key);
      }
      set(key, value) {
        const config = this.all;
        if (arguments.length === 1) {
          for (const k2 of Object.keys(key)) {
            dotProp.set(config, k2, key[k2]);
          }
        } else {
          dotProp.set(config, key, value);
        }
        this.all = config;
      }
      has(key) {
        return dotProp.has(this.all, key);
      }
      delete(key) {
        const config = this.all;
        dotProp.delete(config, key);
        this.all = config;
      }
      clear() {
        this.all = {};
      }
    };
    module.exports = Configstore;
  }
});

// node_modules/@mtproto/core/envs/node/get-local-storage.js
var require_get_local_storage = __commonJS({
  "node_modules/@mtproto/core/envs/node/get-local-storage.js"(exports, module) {
    var Configstore = require_configstore();
    var baseDebug = require_base_debug();
    var debug = baseDebug.extend("storage");
    function getLocalStorage(options) {
      if (!options.path) {
        throw new Error("Specify the storageOptions.path for storing session");
      }
      const localStorage2 = new Configstore(
        "@mtproto/core",
        {},
        {
          configPath: options.path
        }
      );
      debug(`session located in ${localStorage2.path}`);
      return localStorage2;
    }
    module.exports = getLocalStorage;
  }
});

// node_modules/@mtproto/core/envs/node/index.js
var require_node = __commonJS({
  "node_modules/@mtproto/core/envs/node/index.js"(exports, module) {
    var makeMTProto = require_src();
    var SHA1 = require_sha1();
    var SHA256 = require_sha256();
    var PBKDF2 = require_pbkdf2();
    var Transport = require_transport();
    var getRandomBytes = require_get_random_bytes();
    var getLocalStorage = require_get_local_storage();
    function createTransport(dc, crypto) {
      return new Transport(dc, crypto);
    }
    var MTProto = makeMTProto({
      SHA1,
      SHA256,
      PBKDF2,
      getRandomBytes,
      getLocalStorage,
      createTransport
    });
    module.exports = MTProto;
  }
});
export default require_node();
/*! Bundled license information:

aes-js/index.js:
  (*! MIT License. Copyright 2015-2018 Richard Moore <me@ricmoo.com>. See LICENSE.txt. *)

imurmurhash/imurmurhash.js:
  (**
   * @preserve
   * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)
   *
   * @author <a href="mailto:jensyt@gmail.com">Jens Taylor</a>
   * @see http://github.com/homebrewing/brauhaus-diff
   * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
   * @see http://github.com/garycourt/murmurhash-js
   * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
   * @see http://sites.google.com/site/murmurhash/
   *)
*/
//# sourceMappingURL=@mtproto_core.js.map
